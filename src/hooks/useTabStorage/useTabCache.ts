/*
 * useTabCache.ts
 *
 * TAB CACHE KEZEL≈ê HOOK (News app)
 * --------------------------------
 * Ez a hook felel≈ës a tab tartalom cache kezel√©s√©√©rt:
 *  - Mem√≥ria cache kezel√©s (LRU strat√©gia)
 *  - Cache invalid√°l√°s √©s cleanup
 *  - Tab tartalom bet√∂lt√©se √©s ment√©se
 *  - H√°tt√©r friss√≠t√©s (background refresh)
 *  - K√©sleltetett DB ment√©s (throttling)
 *
 * Sz√©tv√°lasztva a useTabStorage.ts-b≈ël a Single Responsibility Principle alapj√°n.
 */
import { useRef, useCallback, useEffect } from 'react';
import { useStorage } from '../useStorage';
import { TabContentData } from '../../utils/datamanager/storage/indexedDBTypes';

// Mem√≥ria cache t√≠pusa
interface MemoryCacheEntry {
  content: TabContentData;
  timestamp: number;
}

// Cache √©rv√©nyess√©gi konfigur√°ci√≥
const CACHE_CONFIG = {
  MAX_AGE: 2 * 60 * 60 * 1000, // 2 √≥ra
  MAX_TABS: 20,
  REFRESH_INTERVAL: 15 * 60 * 1000, // 15 perc
};

const SAVE_DELAY = 1000; // 1000ms k√©sleltet√©s

// Debug helper - csak development m√≥dban
const DEBUG_TAB_CACHE = false;

const debugLog = (message: string, ...args: unknown[]) => {
  if (DEBUG_TAB_CACHE && process.env.NODE_ENV === 'development') {
    console.log(`[useTabCache] ${message}`, ...args);
  }
};

export function useTabCache() {
  const { saveTabContent, getTabContent: getTabContentFromStorage } = useStorage();

  const memoryCache = useRef<Map<string, MemoryCacheEntry>>(new Map());
  const saveTimeouts = useRef<Map<string, number>>(new Map());

  // ‚úÖ GLOB√ÅLIS REFERENCIA: clearAllTabCache f√ºggv√©ny sz√°m√°ra
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const windowWithCache = window as Window & { __tabMemoryCache?: Map<string, MemoryCacheEntry> };
      windowWithCache.__tabMemoryCache = memoryCache.current;
    }
  }, []);

  // Cleanup useEffect - Memory leak prevention
  useEffect(() => {
    return () => {
      // Cleanup timeouts
      saveTimeouts.current.forEach(timeoutId => {
        window.clearTimeout(timeoutId);
      });
      saveTimeouts.current.clear();
      
      // Clear cache
      memoryCache.current.clear();
      debugLog('Cache √©s timeouts t√∂r√∂lve cleanup sor√°n');
    };
  }, []);

  // Cache cleanup logika
  const performCacheCleanup = useCallback(() => {
    const now = Date.now();

    // R√©gi elemek t√∂rl√©se
    for (const [tabId, entry] of memoryCache.current) {
      if (now - entry.timestamp > CACHE_CONFIG.MAX_AGE) {
        debugLog(`Lej√°rt cache t√∂rl√©se: ${tabId}`);
        memoryCache.current.delete(tabId);
      }
    }

    // LRU elv alkalmaz√°sa, ha t√∫l sok elem van
    if (memoryCache.current.size > CACHE_CONFIG.MAX_TABS) {
      const entries = Array.from(memoryCache.current.entries()).sort(
        ([, a], [, b]) => a.timestamp - b.timestamp,
      );

      for (let i = 0; i < entries.length - CACHE_CONFIG.MAX_TABS; i++) {
        const [tabId] = entries[i];
        if (tabId) {
          debugLog(`LRU cache t√∂rl√©s: ${tabId}`);
          memoryCache.current.delete(tabId);
        }
      }
    }
  }, []);

  // Cache invalid√°l√°sa egy adott tabra
  const invalidateCache = useCallback((tabId: string) => {
    console.log(`[useTabCache] Cache invalid√°l√°sa: ${tabId}`);
    memoryCache.current.delete(tabId);
  }, []);

  // Manu√°lis friss√≠t√©s - cache invalid√°l√°ssal √©s √∫jrat√∂lt√©ssel
  const refreshTabContent = useCallback(
    async (tabId: string): Promise<TabContentData | null> => {
      // Cache t√∂rl√©se az adott tabra
      invalidateCache(tabId);

      // IndexedDB-b≈ël t√∂ltj√ºk be az adatokat
      const content = await getTabContentFromStorage(tabId);

      // Ha van friss tartalom, friss√≠tj√ºk a mem√≥ria cache-t is
      if (content) {
        memoryCache.current.set(tabId, {
          content,
          timestamp: Date.now(),
        });
      }

      return content;
    },
    [invalidateCache, getTabContentFromStorage],
  );

  // Tab tartalom bet√∂lt√©se (el≈ësz√∂r mem√≥ri√°b√≥l, azt√°n DB-b≈ël)
  const loadTabContent = useCallback(
    async (tabId: string, options?: { forceRefresh?: boolean; expectedCountry?: string }): Promise<TabContentData | null> => {
      // CACHE BYPASS: Ha a forceRefresh opci√≥ akt√≠v
      if (options?.forceRefresh) {
        console.log(`[useTabCache] forceRefresh akt√≠v, cache teljesen kihagyva: ${tabId}`);
        return null;
      }

      console.log(`[useTabCache] Tab tartalom bet√∂lt√©se: ${tabId}`);

      // 1. Ellen≈ërizz√ºk a mem√≥ria cache-t (FAST PATH)
      let cachedEntry = memoryCache.current.get(tabId);

      // ‚úÖ Orsz√°g-meta valid√°ci√≥ mem√≥ri√°ban
      if (cachedEntry && options?.expectedCountry) {
        const cachedCountry = (cachedEntry.content as any)?.meta?.country;
        if (cachedCountry && cachedCountry !== options.expectedCountry) {
          console.log(`[useTabCache] ‚ö†Ô∏è Cache orsz√°g mismatch (${cachedCountry} ‚â† ${options.expectedCountry}) ‚Äì invalid√°ljuk: ${tabId}`);
          memoryCache.current.delete(tabId);
          cachedEntry = undefined;
        }
      }

      if (cachedEntry) {
        console.log(`[useTabCache] Tab tartalom bet√∂ltve mem√≥ria cache-b≈ël (GYORS): ${tabId}`);

        // Friss√≠tj√ºk az id≈ëb√©lyeget (LRU strat√©gia miatt)
        memoryCache.current.set(tabId, {
          ...cachedEntry,
          timestamp: Date.now(),
        });

        // H√°tt√©r friss√≠t√©s be√°ll√≠t√°sa, ha a cache m√°r t√∫l r√©gi
        const now = Date.now();
        if (
          now - cachedEntry.timestamp > CACHE_CONFIG.REFRESH_INTERVAL &&
          now - cachedEntry.timestamp < CACHE_CONFIG.MAX_AGE
        ) {
          console.log(`[useTabCache] H√°tt√©rben friss√≠tj√ºk a r√©gi cache-t: ${tabId}`);
          setTimeout(() => {
            refreshTabContent(tabId).catch((err) => {
              console.error(`[useTabCache] Hiba a h√°tt√©r friss√≠t√©skor: ${tabId}`, err);
            });
          }, 0);
        }

        return cachedEntry.content;
      }

      // 2. Ha nincs a cache-ben, el√©rj√ºk az IndexedDB-t (SLOW PATH)
      console.log(`[useTabCache] Tab tartalom bet√∂lt√©se IndexedDB-b≈ël (LASS√ö): ${tabId}`);
      const content = await getTabContentFromStorage(tabId);

      // 3. Ha van tartalom, elt√°roljuk a mem√≥ria cache-ben
      if (content) {
        console.log(`[useTabCache] Tab tartalom ment√©se mem√≥ria cache-be: ${tabId}`);
        memoryCache.current.set(tabId, {
          content,
          timestamp: Date.now(),
        });

        // Takar√≠t√°s, ha sz√ºks√©ges
        performCacheCleanup();
      }

      return content;
    },
    [getTabContentFromStorage, performCacheCleanup, refreshTabContent],
  );

  // K√©sleltetett DB ment√©st kezel≈ë f√ºggv√©ny
  const scheduleThrottledDbSave = useCallback(
    (tabId: string, content: TabContentData) => {
      // T√∂r√∂lj√ºk a kor√°bbi id≈ëz√≠t≈ët, ha l√©tezik
      if (saveTimeouts.current.has(tabId)) {
        window.clearTimeout(saveTimeouts.current.get(tabId));
        saveTimeouts.current.delete(tabId);
      }

      // √öj id≈ëz√≠t≈ë be√°ll√≠t√°sa a ment√©shez
      const timeoutId = window.setTimeout(async () => {
        console.log(`[useTabCache] K√©sleltetett IndexedDB ment√©s: ${tabId}`);
        await saveTabContent(tabId, content);
        saveTimeouts.current.delete(tabId);
      }, SAVE_DELAY);

      saveTimeouts.current.set(tabId, timeoutId);
    },
    [saveTabContent],
  );

  // Tab tartalom ment√©se (mem√≥ria cache + k√©sleltetett DB √≠r√°s)
  const saveCurrentTabContent = useCallback(
    async (content: TabContentData, tabId: string, country?: string): Promise<boolean> => {
      console.log(`[useTabCache] Tab tartalom ment√©se: ${tabId}`, content);

      if (tabId && tabId !== 'default') {
        try {
          // 1. Azonnali ment√©s a mem√≥ria cache-be
          console.log(`[useTabCache] Ment√©s a mem√≥ri√°ba: ${tabId}`, content);
          memoryCache.current.set(tabId, {
            content,
            timestamp: Date.now(),
          });
          console.log(`[useTabCache] Tab tartalom mentve mem√≥ria cache-be: ${tabId}`);

          // 2. K√©sleltetett ment√©s az IndexedDB-be
          scheduleThrottledDbSave(tabId, content);

          // Takar√≠t√°s, ha sz√ºks√©ges
          performCacheCleanup();

          return true;
        } catch (error) {
          console.error(`[useTabCache] Hiba a tab tartalom ment√©sekor: ${tabId}`, error);
          return false;
        }
      } else {
        console.warn(`[useTabCache] Nem lehet menteni a tab tartalm√°t √©rv√©nytelen azonos√≠t√≥val: ${tabId}`);
        return false;
      }
    },
    [scheduleThrottledDbSave, performCacheCleanup],
  );

  // Cache statisztik√°k
  const getCacheInfo = useCallback(() => {
    return {
      size: memoryCache.current.size,
      maxSize: CACHE_CONFIG.MAX_TABS,
      entries: Array.from(memoryCache.current.keys()),
    };
  }, []);

  /**
   * ‚úÖ √öJ: Ellen≈ërzi, hogy egy tab cache friss-e
   * @param tabId A tab azonos√≠t√≥ja
   * @param maxAgeMinutes Maximum frissess√©gi id≈ë percben (alap√©rtelmezett: 1440 perc = 24 √≥ra)
   * @returns Promise<boolean> true, ha a cache friss
   */
  const isCacheFresh = useCallback(async (tabId: string, maxAgeMinutes: number = 1440) => {
    if (!tabId) return false;
    
    // 1. El≈ësz√∂r a mem√≥ria cache ellen≈ërz√©se (gyors)
    const memoryEntry = memoryCache.current.get(tabId);
    if (memoryEntry) {
      const now = Date.now();
      const isFresh = (now - memoryEntry.timestamp) < (maxAgeMinutes * 60 * 1000);
      
      if (isFresh) {
        console.log(`[useTabCache] üü¢ Friss mem√≥ria cache (${Math.round((now - memoryEntry.timestamp)/1000)}s): ${tabId}`);
        return true;
      }
      
      console.log(`[useTabCache] üü† Lej√°rt mem√≥ria cache (${Math.round((now - memoryEntry.timestamp)/1000)}s): ${tabId}`);
    }
    
    // 2. Ha nincs mem√≥ri√°ban vagy nem friss, IndexedDB ellen≈ërz√©se
    try {
      const dbEntry = await getTabContentFromStorage(tabId);
      if (dbEntry && dbEntry.timestamp) {
        const now = Date.now();
        const isFresh = (now - dbEntry.timestamp) < (maxAgeMinutes * 60 * 1000);
        
        if (isFresh) {
          console.log(`[useTabCache] üü¢ Friss IndexedDB cache (${Math.round((now - dbEntry.timestamp)/1000)}s): ${tabId}`);
          return true;
        }
        
        console.log(`[useTabCache] üü† Lej√°rt IndexedDB cache (${Math.round((now - dbEntry.timestamp)/1000)}s): ${tabId}`);
      }
    } catch (error) {
      console.error(`[useTabCache] Hiba az IndexedDB cache ellen≈ërz√©se k√∂zben:`, error);
    }
    
    console.log(`[useTabCache] Nincs cache: ${tabId}`);
    return false;
  }, [getTabContentFromStorage]);

  /**
   * √öJ: Tab tartalom lek√©r√©se b√°rmely forr√°sb√≥l (mem√≥ria vagy IndexedDB)
   * @param tabId A tab azonos√≠t√≥ja
   * @param expectedCountry Elv√°rt orsz√°g valid√°ci√≥hoz
   * @returns Promise<TabContentData | null>
   */
  const getTabContent = useCallback(async (tabId: string, expectedCountry?: string): Promise<TabContentData | null> => {
    if (!tabId) return null;
    
    // 1. El≈ësz√∂r a mem√≥ria cache ellen≈ërz√©se (gyors)
    let memoryEntry = memoryCache.current.get(tabId);
    
    // Orsz√°g-meta valid√°ci√≥ mem√≥ri√°ban
    if (memoryEntry && expectedCountry) {
      const cachedCountry = (memoryEntry.content as any)?.meta?.country;
      if (cachedCountry && cachedCountry !== expectedCountry) {
        console.log(`[useTabCache] getTabContent orsz√°g mismatch (${cachedCountry} ‚â† ${expectedCountry}) ‚Äì invalid√°ljuk: ${tabId}`);
        memoryCache.current.delete(tabId);
        memoryEntry = undefined;
      }
    }
    
    if (memoryEntry) {
      console.log(`[useTabCache] Tab tartalom bet√∂ltve mem√≥ria cache-b≈ël: ${tabId}`);
      return memoryEntry.content;
    }
    
    // 2. Ha nincs mem√≥ri√°ban, IndexedDB ellen≈ërz√©se
    try {
      const dbEntry = await getTabContentFromStorage(tabId);
      if (dbEntry) {
        // Orsz√°g valid√°ci√≥ IndexedDB-ben is
        if (expectedCountry) {
          const cachedCountry = (dbEntry as any)?.meta?.country;
          if (cachedCountry && cachedCountry !== expectedCountry) {
            console.log(`[useTabCache] getTabContent IndexedDB orsz√°g mismatch (${cachedCountry} ‚â† ${expectedCountry}) ‚Äì kihagyva: ${tabId}`);
            return null;
          }
        }
        
        console.log(`[useTabCache] Tab tartalom bet√∂ltve IndexedDB-b≈ël: ${tabId}`);
        // JAV√çT√ÅS: Explicit t√≠puskonverzi√≥ a hib√°k elker√ºl√©se √©rdek√©ben
        return dbEntry as TabContentData;
      }
    } catch (error) {
      console.error(`[useTabCache] Hiba az IndexedDB bet√∂lt√©sekor:`, error);
    }
    
    console.log(`[useTabCache] Nincs el√©rhet≈ë tartalom: ${tabId}`);
    return null;
  }, [getTabContentFromStorage]);

  return {
    // Tartalom m≈±veletek
    loadTabContent,
    saveTabContent: saveCurrentTabContent,
    refreshTabContent,
    
    // Cache m≈±veletek
    invalidateCache,
    getCacheInfo,
    
    // Tiszt√≠t√°s
    performCacheCleanup,

    // ‚úÖ √öJ: Frissess√©g √©s tartalom ellen≈ërz≈ë f√ºggv√©nyek export√°l√°sa
    isCacheFresh,
    getTabContent,
  };
}