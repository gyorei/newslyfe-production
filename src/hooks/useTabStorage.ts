/*
 * useTabStorage.ts
 *
 * TAB TARTALOM √âS √ÅLLAPOT KEZEL≈ê HOOK (News app)
 * ---------------------------------------------
 * Ez a hook felel≈ës a tabok tartalm√°nak gyors, mem√≥ri√°ban √©s IndexedDB-ben t√∂rt√©n≈ë kezel√©s√©√©rt:
 *  - Tab tartalom bet√∂lt√©se, ment√©se, cache-el√©se (mem√≥ria + IndexedDB)
 *  - Tabok l√©trehoz√°sa, bez√°r√°sa, √°trendez√©se, akt√≠vv√° t√©tele
 *  - Pagination √°llapot ment√©se/bet√∂lt√©se minden tabhoz k√ºl√∂n
 *  - Mem√≥ria cache statisztik√°k, automatikus cache cleanup, teljes√≠tm√©nyfigyel√©s
 *  - NINCS duplik√°ci√≥ a useStorage-hoz k√©pest: a perzisztens storage m≈±veleteket a useStorage hook v√©gzi, ez csak a tab-specifikus logik√°t √©s gyors√≠t√≥t√°rat kezeli
 *
 * F≈ëbb haszn√°lati helyek:
 *  - Content, Panel, TabController komponensek (tab tartalom, scroll, pagination)
 *  - Minden tabhoz k√ºl√∂n cache √©s √°llapot
 *
 * A hook c√©lja: gyors, b√∂ng√©sz≈ë-szer≈± tab √©lm√©ny, gyors v√°lt√°s, √°llapotmeg≈ërz√©s, mem√≥ria- √©s storage-optimaliz√°ci√≥.
 *//*
import { useState, useCallback, useEffect, useRef } from 'react';
import { useStorage } from './useStorage';
import { TabDefinition } from '../utils/datamanager/types/storage';
import { TabContentData } from '../utils/datamanager/storage/indexedDBTypes';
import { PaginationStorage } from '../utils/datamanager/services/PaginationStorage'; // ‚úÖ √öJ: PaginationStorage import

// Mem√≥ria cache t√≠pusa
interface MemoryCacheEntry {
  content: TabContentData;
  timestamp: number;
}

// Cache √©rv√©nyess√©gi konfigur√°ci√≥
const CACHE_CONFIG = {
  // ‚úÖ OPTIMALIZ√ÅLVA: Cache √©rv√©nyess√©gi id≈ë 30 perc ‚Üí 2 √≥ra
  MAX_AGE: 2 * 60 * 60 * 1000,
  // ‚úÖ OPTIMALIZ√ÅLVA: Maximum t√°rolt tab-ok sz√°ma 10 ‚Üí 20
  MAX_TABS: 20,
  // ‚úÖ OPTIMALIZ√ÅLVA: Friss√≠t√©si id≈ëk√∂z 5 perc ‚Üí 15 perc
  REFRESH_INTERVAL: 15 * 60 * 1000,
};

// ‚úÖ JAV√çT√ÅS: Hi√°nyz√≥ konstansok hozz√°ad√°sa
const SAVE_DELAY = 1000; // 1000ms k√©sleltet√©s

// Debug helper - csak development m√≥dban
const _IS_DEVELOPMENT = process.env.NODE_ENV === 'development';
const DEBUG_TAB_STORAGE = false; // ‚úÖ JAV√çT√ÅS: Explicit kikapcsol√°s a t√∫lterhel√©s elker√ºl√©s√©re

const debugLog = (message: string, ...args: unknown[]) => {
  if (DEBUG_TAB_STORAGE) {
    console.log(`[useTabStorage] ${message}`, ...args);
  }
};

// ‚úÖ JAV√çT√ÅS: Performance memory interface
declare global {
  interface Performance {
    memory?: {
      usedJSHeapSize: number;
      totalJSHeapSize: number;
      jsHeapSizeLimit: number;
    };
  }
}

export function useTabStorage() {
  const {
    state,
    updateTabState,
    saveTabContent,
    getTabContent,
    // ‚ùå ELT√ÅVOL√çTVA: saveScrollPosition - duplik√°ci√≥ megsz√ºntetve, ScrollStorage service haszn√°lata helyett
  } = useStorage();

  const [activeTabId, setActiveTabId] = useState<string>('default');
  const [tabs, setTabs] = useState<TabDefinition[]>([]);

  const memoryCache = useRef<Map<string, MemoryCacheEntry>>(new Map());

  // ‚úÖ JAV√çT√ÅS: Hi√°nyz√≥ saveTimeouts ref hozz√°ad√°sa
  const saveTimeouts = useRef<Map<string, number>>(new Map());

  // ‚úÖ √öJ: Fejlett cache statisztik√°k tracking
  const [memCacheStats, setMemCacheStats] = useState<{
    hits: number;
    misses: number;
    size: number;
    hitRate: number;
    avgAccessTime: number;
    lastCleanup: number;
  }>({
    hits: 0,
    misses: 0,
    size: 0,
    hitRate: 0,
    avgAccessTime: 0,
    lastCleanup: Date.now(),
  });

  // ‚úÖ √öJ: Performance tracking
  const performanceMetrics = useRef({
    accessTimes: [] as number[],
    lastMeasurement: Date.now(),
  });

  // ‚úÖ √öJ: Memory usage tracking
  const trackMemoryUsage = useCallback(() => {
    if (performance.memory) {
      const used = Math.round(performance.memory.usedJSHeapSize / 1024 / 1024);
      const total = Math.round(performance.memory.totalJSHeapSize / 1024 / 1024);
      const percentage = ((used / total) * 100).toFixed(1);

      if (used > 100) {
        // Warning if over 100MB
        console.warn(`[useTabStorage] Magas mem√≥riahaszn√°lat: ${used}MB (${percentage}%)`);
      }
    }
  }, []);

  // ‚úÖ √öJ: Cache hit rate sz√°m√≠t√°sa √©s logging
  const _logAdvancedCacheStats = useCallback(() => {
    const total = memCacheStats.hits + memCacheStats.misses;
    const hitRate = total > 0 ? ((memCacheStats.hits / total) * 100).toFixed(1) : '0.0';
    const avgTime =
      performanceMetrics.current.accessTimes.length > 0
        ? (
            performanceMetrics.current.accessTimes.reduce((a, b) => a + b, 0) /
            performanceMetrics.current.accessTimes.length
          ).toFixed(2)
        : '0.00';

    console.log(
      `[useTabStorage] üìä Cache Stats - Size: ${memoryCache.current.size}, Hit Rate: ${hitRate}%, Avg Access: ${avgTime}ms`,
    );

    // Critical performance warning
    if (parseFloat(hitRate) < 50 && total > 10) {
      console.warn(
        `[useTabStorage] ‚ö†Ô∏è ALACSONY CACHE HAT√âKONYS√ÅG: ${hitRate}% - optimaliz√°l√°s sz√ºks√©ges!`,
      );
    }

    // Memory leak detection
    if (memoryCache.current.size > CACHE_CONFIG.MAX_TABS * 2) {
      console.error(
        `[useTabStorage] üö® MEMORY LEAK GYAN√ö: ${memoryCache.current.size} cache entries!`,
      );
    }
  }, [memCacheStats]);

  // ‚úÖ √öJ: Performance measurement wrapper - prefixelj√ºk _-el ha nem haszn√°ljuk
  const _measurePerformance = useCallback(<T>(operation: () => T, operationName: string): T => {
    const startTime = performance.now();
    const result = operation();
    const duration = performance.now() - startTime;

    // Track access times (keep last 100 measurements)
    performanceMetrics.current.accessTimes.push(duration);
    if (performanceMetrics.current.accessTimes.length > 100) {
      performanceMetrics.current.accessTimes.shift();
    }

    // Log slow operations
    if (duration > 50) {
      console.warn(`[useTabStorage] üêå LASS√ö M≈∞VELET: ${operationName} - ${duration.toFixed(2)}ms`);
    }

    return result;
  }, []);

  // Inicializ√°l√°s a t√°rolt √°llapotb√≥l
  useEffect(() => {
    if (state?.tabs) {
      setActiveTabId(state.tabs.activeId);
      setTabs(state.tabs.definitions as unknown as TabDefinition[]);
    }
  }, [state?.tabs]);

  // Debug: Mem√≥ria cache metrik√°kat ki√≠rni
  useEffect(() => {
    if (!DEBUG_TAB_STORAGE) return;

    const logInterval = setInterval(() => {
      debugLog(
        `Memory cache stats - Size: ${memoryCache.current.size}, Hits: ${memCacheStats.hits}, Misses: ${memCacheStats.misses}`,
      );
    }, 300000); // ‚úÖ JAV√çT√ÅS: 1 perc ‚Üí 5 perc (300000ms)

    return () => clearInterval(logInterval);
  }, [memCacheStats]);

  // ‚úÖ √öJ: REFACTORED - K√∂z√∂s cache cleanup logika DRY elv szerint
  const performCacheCleanup = useCallback(
    (
      options: {
        withMetrics?: boolean;
        withPerformanceTracking?: boolean;
      } = {},
    ) => {
      const startTime = options.withPerformanceTracking ? performance.now() : 0;
      const initialSize = options.withMetrics ? memoryCache.current.size : 0;

      // Cache invalid√°l√°s kor alapj√°n
      const now = Date.now();

      // R√©gi elemek t√∂rl√©se
      for (const [tabId, entry] of memoryCache.current) {
        if (now - entry.timestamp > CACHE_CONFIG.MAX_AGE) {
          debugLog(`Lej√°rt cache t√∂rl√©se: ${tabId}`);
          memoryCache.current.delete(tabId);
        }
      }

      // LRU elv alkalmaz√°sa, ha t√∫l sok elem van
      if (memoryCache.current.size > CACHE_CONFIG.MAX_TABS) {
        const entries = Array.from(memoryCache.current.entries()).sort(
          ([, a], [, b]) => a.timestamp - b.timestamp,
        );

        for (let i = 0; i < entries.length - CACHE_CONFIG.MAX_TABS; i++) {
          const [tabId] = entries[i];
          if (tabId) {
            debugLog(`LRU cache t√∂rl√©s: ${tabId}`);
            memoryCache.current.delete(tabId);
          }
        }
      }

      // ‚úÖ Opcion√°lis metrik√°k √©s performance tracking
      if (options.withMetrics) {
        const cleanedCount = initialSize - memoryCache.current.size;
        const duration = options.withPerformanceTracking ? performance.now() - startTime : 0;

        if (cleanedCount > 0) {
          debugLog(`Cache cleanup: ${cleanedCount} elem t√∂r√∂lve ${duration.toFixed(2)}ms alatt`);
        }

        // Update cleanup timestamp
        setMemCacheStats((prev) => ({
          ...prev,
          size: memoryCache.current.size,
          lastCleanup: Date.now(),
        }));

        // Memory usage check after cleanup
        trackMemoryUsage();
      }
    },
    [trackMemoryUsage],
  );

  // Cache invalid√°l√°s kor alapj√°n - REFACTORED
  const cleanupStaleCache = useCallback(() => {
    // ‚úÖ DUPLIK√ÅCI√ì JAV√çTVA: K√∂z√∂s performCacheCleanup haszn√°lata
    performCacheCleanup();
  }, [performCacheCleanup]);

  // Cache invalid√°l√°sa egy adott tabra (pl. manu√°lis friss√≠t√©sn√©l)
  const invalidateCache = useCallback((tabId: string) => {
    console.log(`[useTabStorage] Cache invalid√°l√°sa: ${tabId}`);
    memoryCache.current.delete(tabId);
  }, []);

  // Manu√°lis friss√≠t√©s - cache invalid√°l√°ssal √©s √∫jrat√∂lt√©ssel
  const refreshTabContent = useCallback(
    async (tabId: string): Promise<TabContentData | null> => {
      // Cache t√∂rl√©se az adott tabra
      invalidateCache(tabId);

      // Itt k√∂zvetlen√ºl az IndexedDB-b≈ël t√∂ltj√ºk be az adatokat a getTabContent f√ºggv√©nnyel
      // Ez biztos√≠tja, hogy friss adatokat kapjunk a mem√≥ria cache helyett
      const content = await getTabContent(tabId);

      // Ha van friss tartalom, friss√≠tj√ºk a mem√≥ria cache-t is
      if (content) {
        memoryCache.current.set(tabId, {
          content,
          timestamp: Date.now(),
        });
      }

      return content;
    },
    [invalidateCache, getTabContent],
  );

  // OPTIMALIZ√ÅLT Tab tartalom bet√∂lt√©se (el≈ësz√∂r mem√≥ri√°b√≥l, azt√°n DB-b≈ël)
  const loadTabContent = useCallback(
    async (tabId: string, options?: { forceRefresh?: boolean }): Promise<TabContentData | null> => {
      // CACHE BYPASS: Ha a forceRefresh opci√≥ akt√≠v, a f√ºggv√©ny azonnal null-t ad vissza.
      // Ezzel a teljes cache (mem√≥ria √©s IndexedDB) ellen≈ërz√©se kihagy√°sra ker√ºl,
      // √©s a h√≠v√≥ f√©l (pl. Content.tsx) k√©nyszer√≠tve lesz egy √∫j API h√≠v√°sra.
      if (options?.forceRefresh) {
        console.log(`[useTabStorage] forceRefresh akt√≠v, cache teljesen kihagyva: ${tabId}`);
        return null; // <-- cache bypass
      }

      console.log(`üöÄ [useTabStorage] LOADTABCONTENT MEGH√çVVA! tabId: ${tabId}`);
      console.log(`[useTabStorage] Tab tartalom bet√∂lt√©se: ${tabId}`);

      // 1. Ellen≈ërizz√ºk a mem√≥ria cache-t (FAST PATH)
      const cachedEntry = memoryCache.current.get(tabId);

      if (cachedEntry) {
        console.log(`[useTabStorage] Tab tartalom bet√∂ltve mem√≥ria cache-b≈ël (GYORS): ${tabId}`);

        // Friss√≠tj√ºk az id≈ëb√©lyeget (LRU strat√©gia miatt)
        memoryCache.current.set(tabId, {
          ...cachedEntry,
          timestamp: Date.now(),
        });

        // Cache tal√°lat statisztika n√∂vel√©se
        setMemCacheStats((prev) => ({ ...prev, hits: prev.hits + 1 }));

        // H√°tt√©r friss√≠t√©s be√°ll√≠t√°sa, ha a cache m√°r t√∫l r√©gi, de m√©g nem j√°rt le
        const now = Date.now();
        if (
          now - cachedEntry.timestamp > CACHE_CONFIG.REFRESH_INTERVAL &&
          now - cachedEntry.timestamp < CACHE_CONFIG.MAX_AGE
        ) {
          console.log(`[useTabStorage] H√°tt√©rben friss√≠tj√ºk a r√©gi cache-t: ${tabId}`);
          // Nem v√°rjuk meg, azonnal visszat√©r√ºnk a cache-el
          setTimeout(() => {
            refreshTabContent(tabId).catch((err) => {
              console.error(`[useTabStorage] Hiba a h√°tt√©r friss√≠t√©skor: ${tabId}`, err);
            });
          }, 0);
        }

        return cachedEntry.content;
      }

      // Cache miss statisztika n√∂vel√©se
      setMemCacheStats((prev) => ({ ...prev, misses: prev.misses + 1 }));

      // 2. Ha nincs a cache-ben, el√©rj√ºk az IndexedDB-t (SLOW PATH)
      console.log(`[useTabStorage] Tab tartalom bet√∂lt√©se IndexedDB-b≈ël (LASS√ö): ${tabId}`);
      const content = await getTabContent(tabId);

      // 3. Ha van tartalom, elt√°roljuk a mem√≥ria cache-ben
      if (content) {
        console.log(`[useTabStorage] Tab tartalom ment√©se mem√≥ria cache-be: ${tabId}`);
        memoryCache.current.set(tabId, {
          content,
          timestamp: Date.now(),
        });

        // Takar√≠t√°s, ha sz√ºks√©ges
        cleanupStaleCache();
      }

      return content;
    },
    [getTabContent, cleanupStaleCache, refreshTabContent],
  );

  // Akt√≠v tab be√°ll√≠t√°sa
  const setActiveTab = useCallback(
    async (tabId: string) => {
      if (tabId !== activeTabId) {
        setActiveTabId(tabId);
        await updateTabState(tabId, { isActive: true });

        if (state?.tabs?.definitions) {
          await updateTabState('tabs', {
            activeId: tabId,
            definitions: state.tabs.definitions,
          });
        }

        // OPTIMALIZ√ÅCI√ì: El≈ëre bet√∂ltj√ºk a tartalmat, ha m√©g nincs a mem√≥ria cache-ben
        if (!memoryCache.current.has(tabId)) {
          debugLog(`El≈ëre t√∂ltj√ºk a tab tartalm√°t: ${tabId}`);
          loadTabContent(tabId) // <-- itt nem kell forceRefresh
            .then((content) => {
              debugLog(`Tab tartalom el≈ëre bet√∂ltve: ${tabId}, tal√°lat: ${!!content}`);
            })
            .catch((err) => {
              console.error(`Hiba a tab tartalom el≈ët√∂lt√©sekor: ${tabId}`, err);
            });
        }
      }
    },
    [activeTabId, updateTabState, state?.tabs?.definitions, loadTabContent],
  );

  // √öj tab l√©trehoz√°sa
  const createTab = useCallback(
    async (tabData: Omit<TabDefinition, 'id'>) => {
      const newId = `tab-${Date.now()}`;
      const newTab = {
        id: newId,
        ...tabData,
      };

      await updateTabState(newId, newTab);
      setActiveTab(newId);

      return newId;
    },
    [updateTabState, setActiveTab],
  );

  // Tab bez√°r√°sa
  const closeTab = useCallback(
    async (tabId: string) => {
      if (!state?.tabs?.definitions) return;

      const newTabs = state.tabs.definitions.filter((tab) => tab.id !== tabId);

      // Ha az akt√≠v tabot z√°rjuk be, aktiv√°ljuk az els≈ët
      let newActiveId = state.tabs.activeId;
      if (newActiveId === tabId && newTabs.length > 0) {
        newActiveId = newTabs[0].id;
      }

      await updateTabState('tabs', {
        activeId: newActiveId,
        definitions: newTabs,
      });

      if (newActiveId !== activeTabId) {
        setActiveTabId(newActiveId);
      }

      // ‚ùå R√âGI K√ìD (cache t√∂rl√©s - kikomment√°lva)
      // Cache tiszt√≠t√°sa a bez√°rt tabra
      // if (memoryCache.current.has(tabId)) {
      //   console.log(`[useTabStorage] Tab cache t√∂rl√©se bez√°r√°skor: ${tabId}`);
      //   memoryCache.current.delete(tabId);
      // }

      // ‚úÖ √öJ K√ìD (cache megtart√°s - gyors bet√∂lt√©s)
      // Cache megtart√°sa a bez√°rt tabra - gyors √∫jrabet√∂lt√©shez
      console.log(`[useTabStorage] Cache megtartva bez√°r√°skor: ${tabId} - gyors √∫jrabet√∂lt√©shez`);

      // T√∂r√∂lni az esetleges ment√©s id≈ëz√≠t≈ët
      if (saveTimeouts.current.has(tabId)) {
        window.clearTimeout(saveTimeouts.current.get(tabId));
        saveTimeouts.current.delete(tabId);
      }

      // ‚ùå R√âGI K√ìD (pagination t√∂rl√©s - kikomment√°lva)
      // ‚úÖ √öJ: Pagination √°llapot t√∂rl√©se bez√°rt tabra
      // PaginationStorage.clear(tabId);
      // console.log(`[useTabStorage] Pagination √°llapot t√∂r√∂lve bez√°rt tabra: ${tabId}`);
      
      // ‚úÖ √öJ K√ìD (pagination megtart√°s - √°llapot meg≈ërz√©s)
      console.log(`[useTabStorage] Pagination √°llapot megtartva bez√°rt tabra: ${tabId} - √°llapot meg≈ërz√©s`);
    },
    [state?.tabs, updateTabState, activeTabId],
  );

  // K√©sleltetett DB ment√©st kezel≈ë f√ºggv√©ny - megakad√°lyozza a t√∫l gyakori √≠r√°sokat
  const scheduleThrottledDbSave = useCallback(
    (tabId: string, content: TabContentData) => {
      // T√∂r√∂lj√ºk a kor√°bbi id≈ëz√≠t≈ët, ha l√©tezik
      if (saveTimeouts.current.has(tabId)) {
        window.clearTimeout(saveTimeouts.current.get(tabId));
        saveTimeouts.current.delete(tabId);
      }

      // √öj id≈ëz√≠t≈ë be√°ll√≠t√°sa a ment√©shez
      const timeoutId = window.setTimeout(async () => {
        console.log(`[useTabStorage] K√©sleltetett IndexedDB ment√©s: ${tabId}`);
        await saveTabContent(tabId, content);
        saveTimeouts.current.delete(tabId);
      }, SAVE_DELAY);

      saveTimeouts.current.set(tabId, timeoutId);
    },
    [saveTabContent],
  );

  // Tab tartalom ment√©se (mem√≥ria cache + k√©sleltetett DB √≠r√°s)
  const saveCurrentTabContent = useCallback(
    async (content: TabContentData, tabId?: string) => {
      // Ha kapunk explicit tabId-t, haszn√°ljuk azt, k√ºl√∂nben az activeTabId-t
      const targetTabId = tabId || activeTabId;
      console.log(`[useTabStorage] Tab tartalom ment√©se: ${targetTabId}`, content);

      if (targetTabId && targetTabId !== 'default') {
        try {
          // 1. Azonnali ment√©s a mem√≥ria cache-be
          console.log(`[useTabStorage] Ment√©s a mem√≥ri√°ba: ${targetTabId}`, content); // Debug logging
          memoryCache.current.set(targetTabId, {
            content,
            timestamp: Date.now(),
          });
          console.log(`[useTabStorage] Tab tartalom mentve mem√≥ria cache-be: ${targetTabId}`);

          // 2. K√©sleltetett ment√©s az IndexedDB-be
          scheduleThrottledDbSave(targetTabId, content);

          // Takar√≠t√°s, ha sz√ºks√©ges
          cleanupStaleCache();

          return true;
        } catch (error) {
          console.error(`[useTabStorage] Hiba a tab tartalom ment√©sekor: ${targetTabId}`, error);
          return false;
        }
      } else {
        console.warn(
          `[useTabStorage] Nem lehet menteni a tab tartalm√°t √©rv√©nytelen azonos√≠t√≥val: ${targetTabId}`,
        );
        return false;
      }
    },
    [activeTabId, scheduleThrottledDbSave, cleanupStaleCache],
  );

  // ‚úÖ KIKOMMENT√ÅLVA: Tab g√∂rget√©si poz√≠ci√≥ ment√©se - duplik√°ci√≥ elker√ºl√©se
  // A scroll poz√≠ci√≥ ment√©st a ScrollStorage.ts kezeli, nem itt!
  // const saveTabScrollPosition = useCallback(
  //   (position: number) => {
  //     // ‚úÖ DIAGN√ìZTIKA: R√©szletes logging a saveTabScrollPosition h√≠v√°sakor
  //     console.log(`[useTabStorage] saveTabScrollPosition h√≠vva: ${position}px, activeTabId: ${activeTabId}`);
      
  //     if (activeTabId) {
  //       // Ellen≈ërizz√ºk, hogy van-e a tab a mem√≥ria cache-ben
  //       const cachedEntry = memoryCache.current.get(activeTabId);

  //       if (cachedEntry) {
  //         // Ha igen, akkor friss√≠tj√ºk a scrollPosition-t a mem√≥ria cache-ben
  //         const updatedContent = {
  //           ...cachedEntry.content,
  //           meta: {
  //             ...(cachedEntry.content.meta || {}), // Megtartjuk a megl√©v≈ë meta adatokat
  //             scrollPosition: position,
  //           },
  //         };

  //         memoryCache.current.set(activeTabId, {
  //           content: updatedContent,
  //           timestamp: Date.now(),
  //         });

  //         // ‚úÖ JAV√çT√ÅS: saveCurrentTabContent haszn√°lata a saveTabContent helyett
  //         console.log(`[useTabStorage] Scroll mentve: ${position}px (Tab: ${activeTabId})`); // DEBUG
  //         saveCurrentTabContent(updatedContent, activeTabId);
  //       } else {
  //         // ‚úÖ JAV√çT√ÅS: Ha nincs cache-ben, akkor is mentj√ºk a scroll poz√≠ci√≥t!
  //         // L√©trehozunk egy minim√°lis TabContentData objektumot a scroll poz√≠ci√≥val
  //         const minimalContent: TabContentData = {
  //           id: activeTabId,
  //           articles: [], // √úres h√≠rek list√°ja
  //           timestamp: Date.now(),
  //           meta: {
  //             scrollPosition: position,
  //             lastFetched: Date.now(),
  //             originalNews: [], // √úres h√≠rek list√°ja
  //           },
  //         };

  //         // Cache-be ment√©s
  //         memoryCache.current.set(activeTabId, {
  //           content: minimalContent,
  //           timestamp: Date.now(),
  //         });

  //         // DB-be ment√©s
  //         console.log(`[useTabStorage] Scroll poz√≠ci√≥ mentve √∫j tabhoz: ${position}px (Tab: ${activeTabId})`);
  //         saveCurrentTabContent(minimalContent, activeTabId);
  //       }
  //     } else {
  //       console.warn(`[useTabStorage] saveTabScrollPosition: nincs activeTabId`);
  //     }
  //   },
  //   [activeTabId, saveCurrentTabContent], // ‚úÖ JAV√çT√ÅS: saveCurrentTabContent f√ºgg≈ës√©g hozz√°adva
  // );

  // Tab m√≥d friss√≠t√©se
  const updateTabMode = useCallback(
    (tabId: string, mode: 'feed' | 'article' | 'search' | 'saved') => {
      if (!state?.tabs?.definitions) return;

      const updatedTabs = state.tabs.definitions.map((tab) =>
        tab.id === tabId ? { ...tab, mode } : tab,
      );

      updateTabState('tabs', {
        activeId: state.tabs.activeId,
        definitions: updatedTabs,
      });
    },
    [state?.tabs, updateTabState],
  );

  // Tabok √°trendez√©se
  const reorderTabs = useCallback(
    (newTabs: TabDefinition[]) => {
      if (!state?.tabs) return;

      updateTabState('tabs', {
        activeId: state.tabs.activeId,
        definitions: newTabs,
      });
    },
    [state?.tabs, updateTabState],
  );

  // El≈ëre bet√∂lt√©s - m√°s tabok tartalm√°t is bet√∂ltj√ºk a h√°tt√©rben
  useEffect(() => {
    const preloadOtherTabs = async () => {
      // Csak akkor el≈ët√∂lt√ºnk, ha az akt√≠v tab m√°r bet√∂lt≈ëd√∂tt
      if (tabs.length <= 1 || !activeTabId || activeTabId === 'default') return;

      // Maximum 2-3 tov√°bbi tab el≈ët√∂lt√©se
      const maxPreload = 2;

      // Az akt√≠v tab ut√°n k√∂vetkez≈ë tabok el≈ët√∂lt√©se
      const activeIndex = tabs.findIndex((tab) => tab.id === activeTabId);
      if (activeIndex >= 0) {
        // El≈ëre t√∂lts√ºk a k√∂vetkez≈ë tabokat
        for (let i = 1; i <= maxPreload; i++) {
          const nextIndex = (activeIndex + i) % tabs.length;
          const nextTab = tabs[nextIndex];

          if (nextTab && !memoryCache.current.has(nextTab.id)) {
            // H√°tt√©rben t√∂ltj√ºk, nem blokkoljuk a f≈ësz√°lat
            setTimeout(() => {
              console.log(`[useTabStorage] El≈ët√∂lt√©s a h√°tt√©rben: ${nextTab.id}`);
              loadTabContent(nextTab.id).catch(console.error); // <-- itt sem kell forceRefresh
            }, i * 500); // L√©pcs≈ëzetesen t√∂ltj√ºk
          }
        }
      }
    };

    // Ha v√°ltozik az akt√≠v tab, pr√≥b√°ljuk el≈ët√∂lteni a k√∂vetkez≈ë tabokat
    preloadOtherTabs().catch(console.error);
  }, [activeTabId, tabs, loadTabContent]);

  // ‚úÖ √öJ: Cache diagnostic met√≥dus
  const getCacheDiagnostics = useCallback(() => {
    const total = memCacheStats.hits + memCacheStats.misses;
    const hitRate = total > 0 ? (memCacheStats.hits / total) * 100 : 0;
    const avgAccessTime =
      performanceMetrics.current.accessTimes.length > 0
        ? performanceMetrics.current.accessTimes.reduce((a, b) => a + b, 0) /
          performanceMetrics.current.accessTimes.length
        : 0;

    return {
      cacheSize: memoryCache.current.size,
      maxSize: CACHE_CONFIG.MAX_TABS,
      hits: memCacheStats.hits,
      misses: memCacheStats.misses,
      hitRate: hitRate.toFixed(1) + '%',
      avgAccessTime: avgAccessTime.toFixed(2) + 'ms',
      lastCleanup: new Date(memCacheStats.lastCleanup).toLocaleTimeString(),
      healthStatus:
        hitRate > 70 ? 'KIV√ÅL√ì' : hitRate > 50 ? 'J√ì' : hitRate > 30 ? 'K√ñZEPES' : 'GYENGE',
    };
  }, [memCacheStats]);

  // ‚úÖ √öJ: Pagination √°llapot ment√©se
  const savePaginationState = useCallback(
    (currentPage: number, itemsPerPage: number, tabId?: string) => {
      const targetTabId = tabId || activeTabId;

      if (targetTabId && targetTabId !== 'default') {
        console.log(
          `[useTabStorage] Pagination √°llapot ment√©se: ${targetTabId} -> page ${currentPage}, ${itemsPerPage} items/page`,
        );
        PaginationStorage.save(targetTabId, currentPage, itemsPerPage);
      } else {
        console.warn(
          `[useTabStorage] Nem lehet menteni a pagination √°llapotot √©rv√©nytelen tab ID-val: ${targetTabId}`,
        );
      }
    },
    [activeTabId],
  );

  // ‚úÖ √öJ: Pagination √°llapot bet√∂lt√©se
  const loadPaginationState = useCallback(
    (tabId?: string): { currentPage: number; itemsPerPage: number } | null => {
      const targetTabId = tabId || activeTabId;

      if (targetTabId && targetTabId !== 'default') {
        const paginationState = PaginationStorage.load(targetTabId);
        if (paginationState) {
          console.log(
            `[useTabStorage] Pagination √°llapot bet√∂ltve: ${targetTabId} -> page ${paginationState.currentPage}, ${paginationState.itemsPerPage} items/page`,
          );
        }
        return paginationState;
      }

      return null;
    },
    [activeTabId],
  );

  // ‚úÖ √öJ: Pagination √°llapot t√∂rl√©se
  const clearPaginationState = useCallback(
    (tabId?: string) => {
      const targetTabId = tabId || activeTabId;

      if (targetTabId && targetTabId !== 'default') {
        console.log(`[useTabStorage] Pagination √°llapot t√∂rl√©se: ${targetTabId}`);
        PaginationStorage.clear(targetTabId);
      }
    },
    [activeTabId],
  );

  return {
    activeTabId,
    tabs,
    setActiveTab,
    createTab,
    closeTab,
    saveTabContent: saveCurrentTabContent,
    loadTabContent,
    // ‚úÖ KIKOMMENT√ÅLVA: saveScrollPosition export - duplik√°ci√≥ elker√ºl√©se
    // saveScrollPosition: saveTabScrollPosition, // ‚úÖ Ezt adja √°t a Content.tsx
    updateTabMode,
    reorderTabs,
    refreshTabContent,
    invalidateCache,
    getCacheDiagnostics,
    getCacheStats: () => memCacheStats,
    getPerformanceMetrics: () => ({
      avgAccessTime:
        performanceMetrics.current.accessTimes.length > 0
          ? performanceMetrics.current.accessTimes.reduce((a, b) => a + b, 0) /
            performanceMetrics.current.accessTimes.length
          : 0,
      accessCount: performanceMetrics.current.accessTimes.length,
      lastMeasurement: performanceMetrics.current.lastMeasurement,
    }),
    // ‚úÖ √öJ: Pagination funkci√≥k hozz√°ad√°sa
    savePaginationState,
    loadPaginationState,
    clearPaginationState,
  };
}

// ‚úÖ M√ìDOS√çTOTT: Tab cache t√∂rl√©se orsz√°g v√°lt√°skor + pagination
export const clearAllTabCache = (): void => {
  console.log('[useTabStorage] √ñsszes tab cache t√∂rl√©se orsz√°g v√°lt√°s miatt...');

  // Memory cache t√∂rl√©se - a memoryCache referencia el√©r√©s√©re sz√ºks√©g van
  // Mivel a memoryCache a useTabStorage hook-on bel√ºl van, export√°lni kell egy glob√°lis referenci√°t
  if (typeof window !== 'undefined') {
    const windowWithCache = window as Window & { __tabMemoryCache?: Map<string, unknown> };
    if (windowWithCache.__tabMemoryCache) {
      windowWithCache.__tabMemoryCache.clear();
      console.log('[useTabStorage] Memory cache t√∂r√∂lve');
    }
  }

  // ‚úÖ √öJ: √ñsszes pagination √°llapot t√∂rl√©se is
  PaginationStorage.clearAll();
  console.log('[useTabStorage] √ñsszes pagination √°llapot t√∂r√∂lve');

  console.log('[useTabStorage] Tab cache t√∂rl√©s k√©sz');
};
*/