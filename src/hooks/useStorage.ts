/*
 * useStorage.ts
 *
 * F≈ê STORAGE HOOK A NEWS ALKALMAZ√ÅSHOZ
 * -----------------------------------
 * Ez a hook biztos√≠tja a teljes perzisztencia r√©teget a News app sz√°m√°ra:
 *  - Tabok, cikkek, be√°ll√≠t√°sok, cache, szinkroniz√°ci√≥ kezel√©se
 *  - LocalStorage √©s IndexedDB t√°mogat√°s
 *  - Mem√≥ria cache a felhaszn√°l√≥i be√°ll√≠t√°sokhoz (UserPreference)
 *  - Tab tartalom ment√©se/bet√∂lt√©se, cikkek olvasotts√°ga, ment√©se
 *  - Glob√°lis szinkroniz√°ci√≥s √°llapot (SyncInfo) kezel√©se
 *  - Cache statisztik√°k, diagnosztika, cache invalid√°l√°s
 *
 * F≈ëbb haszn√°lati helyek:
 *  - App.tsx (glob√°lis storage state, sync, be√°ll√≠t√°sok)
 *  - useTabStorage (tab tartalom, cache)
 *  - useArticleStorage (cikkek ment√©se, olvasotts√°g)
 *  - Panel, egy√©b komponensek (be√°ll√≠t√°sok, cache, tab state)
 *
 * A hook minden fontosabb perzisztens adatfolyamot √©s cache-t ezen kereszt√ºl kezel a projektben.
 */
// A szoftver-fejleszt√©sben fontos alapelv
// a YAGNI (You Aren't Gonna Need It)
// - ne vezess be komplexit√°st, am√≠g nincs r√° val√≥di ig√©ny.

/**
 * F≈ë storage hook a News alkalmaz√°shoz
 * ‚ö° TELJES√çTM√âNY OPTIMALIZ√ÅL√ÅS: Mem√≥ria cache a UserPreference-ek sz√°m√°ra
 */
import { useState, useEffect, useCallback, useMemo } from 'react';
import { DataManager, DataArea } from '../utils/datamanager/manager';
import { StorageConfig } from '../utils/datamanager/config';
import {
  LocalStorageData,
  TabDefinition,
  ReadArticle,
  SaveQueueItem,
} from '../utils/datamanager/types/storage';

import { SyncInfo, SyncOptions } from '../utils/datamanager/types/sync'; // SyncInfo-t innen import√°ljuk

import {
  ArticleData,
  UserPreference,
  TabContentData, // TabContentData import√°l√°sa a helyes f√°jlb√≥l
} from '../utils/datamanager/storage/indexedDBTypes';

// import { v4 as uuidv4 } from 'uuid';

// Konstansok
const STORAGE_ADAPTER_NOT_FOUND_ERROR =
  '[useStorage] Nem tal√°lhat√≥ storageAdapter a DataManager-ben';

// ‚ö° √öJ: Mem√≥ria cache UserPreference-ekhez
interface PreferenceCache {
  value: UserPreference;
  timestamp: number;
  ttl: number; // Cache √©lettartam milliszekundumban
}

// ‚ö° Cache be√°ll√≠t√°sok
const PREFERENCE_CACHE_TTL = 5 * 60 * 1000; // 5 perc cache √©lettartam
const PREFERENCE_CACHE_MAX_SIZE = 50; // Maximum 50 be√°ll√≠t√°s cache-el√©se

// ‚ö° Glob√°lis mem√≥ria cache Map
const preferenceCache = new Map<string, PreferenceCache>();

// ‚ö° Cache statisztik√°k
const cacheStats = {
  hits: 0,
  misses: 0,
  saves: 0,
  evictions: 0,
};

// ‚úÖ √öJ: DataManager inicializ√°l√°s singleton
let globalDataManagerInitialized = false;

// ‚úÖ TELJESEN √öJ: GLOB√ÅLIS SINGLETON MANAGER
class GlobalStorageManager {
  private static instance: GlobalStorageManager | null = null;
  private syncInfo: SyncInfo | null = null;
  private _isLoaded: boolean = false; // ‚úÖ JAV√çT√ÅS: √Åtnevezve _isLoaded-ra
  private dataManager: DataManager | null = null; // ‚úÖ JAV√çT√ÅS: DataManager t√≠pus
  private loadPromise: Promise<SyncInfo | null> | null = null;

  public static getInstance(): GlobalStorageManager {
    if (!GlobalStorageManager.instance) {
      GlobalStorageManager.instance = new GlobalStorageManager();
    }
    return GlobalStorageManager.instance;
  }

  public async getSyncInfo(dataManager: DataManager): Promise<SyncInfo | null> {
    // ‚úÖ JAV√çT√ÅS: DataManager t√≠pus
    // ‚úÖ Ha m√°r bet√∂lt√∂tt√ºk, azonnal visszaadjuk
    if (this._isLoaded) {
      console.log('[GlobalStorageManager] Sync info m√°r bet√∂ltve, cache visszaad√°sa');
      return this.syncInfo;
    }

    // ‚úÖ Ha m√°r folyamatban van bet√∂lt√©s, v√°rjuk meg
    if (this.loadPromise) {
      console.log('[GlobalStorageManager] Bet√∂lt√©s m√°r folyamatban, v√°rakoz√°s...');
      return await this.loadPromise;
    }

    // ‚úÖ Els≈ë bet√∂lt√©s
    console.log('[GlobalStorageManager] Sync info bet√∂lt√©se...');
    this.loadPromise = this._loadSyncInfo(dataManager);

    try {
      this.syncInfo = await this.loadPromise;
      this._isLoaded = true;
      console.log('[GlobalStorageManager] Sync info sikeresen bet√∂ltve:', this.syncInfo);
      return this.syncInfo;
    } catch (error) {
      console.error('[GlobalStorageManager] Sync info bet√∂lt√©si hiba:', error);
      this.loadPromise = null;
      throw error;
    }
  }

  private async _loadSyncInfo(dataManager: DataManager): Promise<SyncInfo | null> {
    // ‚úÖ JAV√çT√ÅS: DataManager t√≠pus
    return await dataManager.getSyncInfo();
  }

  public updateSyncInfo(syncInfo: SyncInfo): void {
    this.syncInfo = syncInfo;
    console.log('[GlobalStorageManager] Sync info friss√≠tve:', syncInfo);
  }

  // ‚úÖ JAV√çT√ÅS: Public getter hozz√°ad√°sa
  public get isLoaded(): boolean {
    return this._isLoaded;
  }

  // ‚úÖ JAV√çT√ÅS: Public getter a syncInfo-hoz
  public get currentSyncInfo(): SyncInfo | null {
    return this.syncInfo;
  }
}

// ‚úÖ GLOB√ÅLIS SINGLETON INSTANCE
const globalStorageManager = GlobalStorageManager.getInstance();

// ‚ö° Cache helper f√ºggv√©nyek
const getCacheKey = (preferenceId: string) => `pref_${preferenceId}`;

const isCacheValid = (entry: PreferenceCache): boolean => {
  return Date.now() - entry.timestamp < entry.ttl;
};

// ‚ö° T√≠pusok pontos√≠t√°sa a cache helper f√ºggv√©nyekn√©l
const getCachedPreference = (preferenceId: string): UserPreference | null => {
  const cacheKey = getCacheKey(preferenceId);
  const cached = preferenceCache.get(cacheKey);

  if (cached && isCacheValid(cached)) {
    cacheStats.hits++;
    console.log(
      `[useStorage] üéØ CACHE HIT: ${preferenceId} (${Math.round((Date.now() - cached.timestamp) / 1000)}s kor)`,
    );
    return cached.value;
  }

  if (cached) {
    // Lej√°rt cache bejegyz√©s t√∂rl√©se
    preferenceCache.delete(cacheKey);
    console.log(`[useStorage] ‚è∞ Cache lej√°rt √©s t√∂r√∂lve: ${preferenceId}`);
  }

  cacheStats.misses++;
  return null;
};

const setCachedPreference = (preferenceId: string, preference: UserPreference): void => {
  const cacheKey = getCacheKey(preferenceId);

  // Cache m√©ret korl√°toz√°s
  if (preferenceCache.size >= PREFERENCE_CACHE_MAX_SIZE) {
    // Legr√©gebbi bejegyz√©s elt√°vol√≠t√°sa
    const oldestKey = Array.from(preferenceCache.entries()).sort(
      ([, a], [, b]) => a.timestamp - b.timestamp,
    )[0]?.[0];
    if (oldestKey) {
      preferenceCache.delete(oldestKey);
      cacheStats.evictions++;
      console.log(`[useStorage] üßπ Cache eviction: ${oldestKey}`);
    }
  }

  preferenceCache.set(cacheKey, {
    value: preference,
    timestamp: Date.now(),
    ttl: PREFERENCE_CACHE_TTL,
  });

  cacheStats.saves++;
  console.log(`[useStorage] üíæ Cache ment√©s: ${preferenceId}`);
};

const invalidateCache = (preferenceId?: string): void => {
  if (preferenceId) {
    const cacheKey = getCacheKey(preferenceId);
    if (preferenceCache.delete(cacheKey)) {
      console.log(`[useStorage] üóëÔ∏è Cache invalid√°lva: ${preferenceId}`);
    }
  } else {
    const size = preferenceCache.size;
    preferenceCache.clear();
    console.log(`[useStorage] üóëÔ∏è Teljes cache t√∂r√∂lve (${size} bejegyz√©s)`);
  }
};

// ‚ö° T√≠pusok pontos√≠t√°sa az error kezel√©sn√©l
export function useStorage() {
  const dataManager = useMemo(() => DataManager.getInstance(), []);
  const [state, setState] = useState<LocalStorageData | null>(() => {
    // ‚úÖ JAV√çT√ÅS: Default state azonnal F5 race condition elker√ºl√©s√©re
    const defaultState: LocalStorageData = {
      version: '1.0',
      timestamp: Date.now(),
      tabs: {
        activeId: '',
        definitions: [],
      },
      ui: {
        panelStates: { left: true, right: false },
        utilityMode: 'default',
      },
      savedArticles: [],
    };
    return defaultState;
  });
  const [deviceId, setDeviceId] = useState<string | null>(null);
  const [syncInfo, setSyncInfo] = useState<SyncInfo | null>(globalStorageManager.currentSyncInfo); // ‚úÖ JAV√çT√ÅS: Public getter haszn√°lata
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const loadInitialData = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      // ‚úÖ JAV√çT√ÅS: DataManager inicializ√°l√°s CSAK EGYSZER
      if (!globalDataManagerInitialized) {
        await dataManager.initialize();
        console.log('[useStorage] DataManager initialized via useStorage.');
        globalDataManagerInitialized = true;
      } else {
        console.log('[useStorage] DataManager m√°r inicializ√°lva, kihagy√°s');
      }

      const storedState = await dataManager.get<LocalStorageData>(
        DataArea.LOCAL_STORAGE,
        StorageConfig.KEYS.LOCAL_STATE,
      );

      if (storedState) {
        setState(storedState);
      } else {
        const initialState: LocalStorageData = {
          version: '1.0',
          timestamp: Date.now(),
          tabs: {
            activeId: '', // √úres string, ha a t√≠pus string
            definitions: [],
          },
          ui: {
            panelStates: { left: true, right: false },
            utilityMode: 'default',
          },
          savedArticles: [],
        };
        setState(initialState);
        await dataManager.set<LocalStorageData>(
          DataArea.LOCAL_STORAGE,
          StorageConfig.KEYS.LOCAL_STATE,
          initialState,
        );
        console.log('[useStorage] Default state initialized and saved.');
      }

      // Device ID bet√∂lt√©se vagy gener√°l√°sa
      let currentDeviceId = await dataManager.get<string>(
        DataArea.LOCAL_STORAGE,
        StorageConfig.KEYS.DEVICE_ID,
      );
      if (!currentDeviceId) {
        // currentDeviceId = uuidv4(); // Helyettes√≠tsd a saj√°t UUID gener√°l√≥ logik√°ddal, ha van
        currentDeviceId = 'generated-device-id-' + Date.now(); // Egyszer≈± placeholder
        await dataManager.set<string>(
          DataArea.LOCAL_STORAGE,
          StorageConfig.KEYS.DEVICE_ID,
          currentDeviceId,
        );
        console.log('[useStorage] New device ID generated and saved:', currentDeviceId);
      }
      setDeviceId(currentDeviceId);

      // ‚úÖ GLOB√ÅLIS SINGLETON SYNC INFO
      const currentSyncInfo = await globalStorageManager.getSyncInfo(dataManager);
      setSyncInfo(currentSyncInfo);
    } catch (err) {
      console.error('Hiba a kezdeti adatok bet√∂lt√©sekor:', err);
      setError(err instanceof Error ? err.message : String(err));
    } finally {
      setIsLoading(false);
    }
  }, [dataManager]); // ‚úÖ JAV√çT√ÅS: syncInfoLoaded dependency elt√°vol√≠tva

  useEffect(() => {
    loadInitialData();
  }, [loadInitialData]);

  // √Åltal√°nos √°llapotfriss√≠t≈ë f√ºggv√©ny
  const updateState = useCallback(
    async (updater: (prevState: LocalStorageData) => LocalStorageData) => {
      setState((prevState) => {
        const newState = updater(prevState!); // Felt√©telezz√ºk, hogy prevState nem null
        dataManager.set<LocalStorageData>(
          DataArea.LOCAL_STORAGE,
          StorageConfig.KEYS.LOCAL_STATE,
          newState,
        );
        return newState;
      });
    },
    [dataManager],
  );

  // Tab √°llapot friss√≠t√©se
  const updateTabState = useCallback(
    async (
      tabIdOrData: string | 'tabs',
      data?: Partial<TabDefinition> | { activeId: string; definitions: TabDefinition[] },
    ) => {
      await updateState((prevState) => {
        const newTabs = { ...(prevState.tabs || { activeId: 'default', definitions: [] }) }; // Alap√©rtelmezett √©rt√©k, ha prevState.tabs null
        if (typeof tabIdOrData === 'string' && tabIdOrData !== 'tabs' && data) {
          const tabIndex = newTabs.definitions.findIndex((t) => t.id === tabIdOrData);
          const tabDefinitionData = data as Partial<TabDefinition>;
          if (tabIndex > -1) {
            newTabs.definitions[tabIndex] = {
              ...newTabs.definitions[tabIndex],
              ...tabDefinitionData,
            };
          } else {
            const { id: _dataId, ...restOfData } = tabDefinitionData;
            newTabs.definitions.push({ id: tabIdOrData, ...restOfData } as TabDefinition);
          }
        } else if (tabIdOrData === 'tabs' && data && 'activeId' in data && 'definitions' in data) {
          const tabsData = data as { activeId: string; definitions: TabDefinition[] };
          newTabs.activeId = tabsData.activeId;
          newTabs.definitions = tabsData.definitions;
        }
        return { ...prevState, tabs: newTabs } as LocalStorageData; // Biztos√≠tjuk a LocalStorageData t√≠pust
      });
    },
    [updateState],
  );

  // Tab tartalom ment√©se IndexedDB-be
  const saveTabContent = useCallback(
    async (tabId: string, content: TabContentData) => {
      try {
        console.log(`[useStorage] Tab tartalom ment√©se (${tabId}):`, content);

        // A dataManager.getStorageAdapter() met√≥dussal √©rj√ºk el a storageAdapter p√©ld√°nyt
        const storageAdapter = dataManager.getStorageAdapter();

        if (storageAdapter) {
          // Type assertion helyett a StorageAdapter saj√°t t√≠pus√°t haszn√°ljuk
          await storageAdapter.saveTabContent(tabId, content);
          console.log(`[useStorage] Tab tartalom ment√©se sikeres (${tabId})`);
          return true;
        } else {
          console.error(STORAGE_ADAPTER_NOT_FOUND_ERROR);
          return false;
        }
      } catch (error) {
        console.error('[useStorage] Hiba a tab tartalom ment√©sekor:', error);
        return false;
      }
    },
    [dataManager],
  );

  // Tab tartalom lek√©r√©se IndexedDB-b≈ël
  const getTabContent = useCallback(
    async (tabId: string): Promise<TabContentData | null> => {
      // Guard: do not call IndexedDB without a valid tabId
      if (!tabId) {
        console.warn('[useStorage] getTabContent h√≠v√°s tabId n√©lk√ºl ‚Äì kihagyjuk');
        return null;
      }
      try {
        console.log(`[useStorage] Tab tartalom lek√©r√©se (${tabId})...`);

        // K√∂zvetlen storageAdapter haszn√°lata a dataManager.get helyett
        const storageAdapter = dataManager.getStorageAdapter();

        if (storageAdapter) {
          const content = await storageAdapter.getTabContent(tabId);
          console.log(`[useStorage] Tab tartalom bet√∂ltve (${tabId}):`, content);
          return content;
        } else {
          console.error(STORAGE_ADAPTER_NOT_FOUND_ERROR);
          return null;
        }
      } catch (error) {
        console.error('[useStorage] Hiba a tab tartalom lek√©r√©sekor:', error);
        return null;
      }
    },
    [dataManager],
  );

  // Cikk olvasottk√©nt jel√∂l√©se
  const markArticleAsRead = useCallback(
    async (articleId: string) => {
      if (!deviceId) {
        console.warn('Nincs eszk√∂zazonos√≠t√≥, az olvasottk√©nt jel√∂l√©s nem szinkroniz√°l√≥dik.');
      }

      try {
        // A StorageAdapter markArticleAsRead met√≥dus√°nak k√∂zvetlen h√≠v√°sa deviceId-vel
        const storageAdapter = dataManager.getStorageAdapter();
        if (storageAdapter) {
          await storageAdapter.markArticleAsRead(articleId, deviceId || 'unknown-device');
          return true;
        } else {
          console.error(STORAGE_ADAPTER_NOT_FOUND_ERROR);
          return false;
        }
      } catch (error) {
        console.error('Hiba a cikk olvasottk√©nt jel√∂l√©sekor:', error);
        return false;
      }
    },
    [dataManager, deviceId],
  );

  // Cikk olvasotts√°gi √°llapot√°nak lek√©rdez√©se
  const getReadStatus = useCallback(
    async (articleIds: string[]): Promise<Record<string, boolean>> => {
      const statuses: Record<string, boolean> = {};
      for (const id of articleIds) {
        try {
          const entry = await dataManager.get<ReadArticle>(DataArea.STORAGE, id, {
            storeName: StorageConfig.DB.STORES.READ_ARTICLES,
          });
          statuses[id] = !!entry;
        } catch (error) {
          console.error(`Hiba az olvasotts√°g lek√©rdez√©sekor (${id}):`, error);
          statuses[id] = false;
        }
      }
      return statuses;
    },
    [dataManager],
  );

  // Cikk ment√©se
  const saveArticle = useCallback(
    async (article: ArticleData) => {
      // ArticleData az indexedDBTypes-b≈ël
      try {
        await dataManager.set<ArticleData>(DataArea.STORAGE, article.id, article, {
          storeName: StorageConfig.DB.STORES.SAVED_ARTICLES,
        });

        await updateState((prevState) => {
          const newSavedArticles = [...(prevState.savedArticles || [])];
          if (!newSavedArticles.find((id) => id === article.id)) {
            newSavedArticles.push(article.id);
          }
          return { ...prevState, savedArticles: newSavedArticles } as LocalStorageData; // Biztos√≠tjuk a t√≠pust
        });
        return true;
      } catch (error) {
        console.error('Hiba a cikk ment√©sekor:', error);
        return false;
      }
    },
    [dataManager, updateState],
  );

  // Felhaszn√°l√≥i be√°ll√≠t√°sok ment√©se
  const saveUserPreference = useCallback(
    async (preference: UserPreference) => {
      // UserPreference az indexedDBTypes-b≈ël
      try {
        // ‚ö° Cache invalid√°l√°s MENT√âS EL≈êTT
        invalidateCache(preference.id);

        // El≈ësz√∂r pr√≥b√°ljuk meg a USER_PREFERENCES adatt√°rol√≥ba menteni
        try {
          await dataManager.set<UserPreference>(DataArea.STORAGE, preference.id, preference, {
            storeName: StorageConfig.DB.STORES.USER_PREFERENCES,
          });
          console.log(
            `[useStorage] Be√°ll√≠t√°s sikeresen mentve a userPreferences adatt√°rol√≥ba: ${preference.id}`,
          );

          // ‚ö° Sikeres ment√©s ut√°n friss cache bejegyz√©s
          setCachedPreference(preference.id, preference);
          return true;
        } catch (err) {
          // Specifikusabban kezelj√ºk a NotFoundError-t, hogy a log kev√©sb√© legyen "hibajelleg≈±"
          if (err instanceof DOMException && err.name === 'NotFoundError') {
            console.info(
              `[useStorage] A 'USER_PREFERENCES' adatt√°rol√≥ nem tal√°lhat√≥ ment√©shez. Fallback a keyValueStore-ra a '${preference.id}' be√°ll√≠t√°shoz.`,
            );
          } else {
            console.warn(
              `[useStorage] Hiba t√∂rt√©nt a USER_PREFERENCES adatt√°rol√≥ba ment√©skor (fallback a keyValueStore-ra): ${preference.id}`,
              err,
            );
          }
          // Ha hiba t√∂rt√©nt, folytatjuk a fallback megold√°ssal
        }

        // FALLBACK megold√°s: keyValueStore haszn√°lata egyszer≈± kulcs-√©rt√©k alapon
        await dataManager.set(
          DataArea.STORAGE,
          `preference_${preference.id}`,
          {
            value: preference.value,
            timestamp: preference.updatedAt || Date.now(), // updatedAt haszn√°lata timestamp helyett
          },
          {}, // √úres options objektum - alap√©rtelmezett keyValueStore-t fog haszn√°lni
        );
        console.log(`[useStorage] Be√°ll√≠t√°s mentve a fallback keyValueStore-ba: ${preference.id}`);

        // ‚ö° Fallback ment√©s ut√°n is cache friss√≠t√©s
        setCachedPreference(preference.id, preference);
        return true;
      } catch (error) {
        console.error('Hiba a felhaszn√°l√≥i be√°ll√≠t√°s ment√©sekor:', error);
        return false;
      }
    },
    [dataManager],
  );

  // Felhaszn√°l√≥i be√°ll√≠t√°sok lek√©r√©se
  const getUserPreference = useCallback(
    async (preferenceId: string) => {
      // ‚ö° 1. CACHE ELLEN≈êRZ√âS EL≈êSZ√ñR
      const cached = getCachedPreference(preferenceId);
      if (cached) {
        return cached;
      }

      try {
        // 2. Ha nincs cache, akkor API h√≠v√°s
        console.log(`[useStorage] üîç Cache miss, DB lek√©r√©s: ${preferenceId}`);

        // El≈ësz√∂r pr√≥b√°ljuk meg a normal USER_PREFERENCES adatt√°rol√≥b√≥l
        try {
          const preference = await dataManager.get<UserPreference>(DataArea.STORAGE, preferenceId, {
            storeName: StorageConfig.DB.STORES.USER_PREFERENCES,
          });

          if (preference) {
            // ‚ö° Cache-be ment√©s sikeres lek√©r√©s ut√°n
            setCachedPreference(preferenceId, preference);
            return preference;
          }
        } catch (err) {
          // Specifikusabban kezelj√ºk a NotFoundError-t, hogy a log kev√©sb√© legyen "hibajelleg≈±"
          if (err instanceof DOMException && err.name === 'NotFoundError') {
            console.info(
              `[useStorage] A 'USER_PREFERENCES' adatt√°rol√≥ nem tal√°lhat√≥. Fallback a keyValueStore-ra a '${preferenceId}' be√°ll√≠t√°shoz.`,
            );
          } else {
            console.warn(
              `[useStorage] Hiba t√∂rt√©nt a USER_PREFERENCES adatt√°rol√≥ el√©r√©sekor (fallback a keyValueStore-ra): ${preferenceId}`,
              err,
            );
          }
          // Ha hiba t√∂rt√©nt, folytatjuk a fallback megold√°ssal
        }

        // FALLBACK megold√°s: keyValueStore haszn√°lata egyszer≈± kulcs-√©rt√©k alapon
        const keyValuePreference = await dataManager.get<{ value: unknown; timestamp: number }>(
          DataArea.STORAGE,
          `preference_${preferenceId}`,
          {}, // √úres options objektum - alap√©rtelmezett keyValueStore-t fog haszn√°lni
        );

        if (keyValuePreference) {
          // Konvert√°l√°s a UserPreference form√°tumra
          const preference = {
            id: preferenceId,
            type: 'userPreference',
            value: keyValuePreference.value,
            updatedAt: keyValuePreference.timestamp || Date.now(), // timestamp helyett updatedAt
          } as UserPreference;

          // ‚ö° Cache-be ment√©s fallback eredm√©ny ut√°n is
          setCachedPreference(preferenceId, preference);
          return preference;
        }

        return null;
      } catch (error) {
        console.error('Hiba a felhaszn√°l√≥i be√°ll√≠t√°s lek√©r√©sekor:', error);
        return null;
      }
    },
    [dataManager],
  );

  // Ment√©si v√°r√≥lista elem hozz√°ad√°sa
  const addToSaveQueue = useCallback(
    async (item: Omit<SaveQueueItem, 'attempts'>) => {
      // SaveQueueItem a types/storage-b√≥l
      const queueItem: SaveQueueItem = { ...item, attempts: 0 };
      try {
        await dataManager.set<SaveQueueItem>(
          DataArea.STORAGE,
          queueItem.timestamp.toString(),
          queueItem,
          { storeName: StorageConfig.DB.STORES.SAVE_QUEUE },
        );
        return true;
      } catch (error) {
        console.error('Hiba a ment√©si v√°r√≥list√°hoz ad√°skor:', error);
        return false;
      }
    },
    [dataManager],
  );

  // Szinkroniz√°ci√≥ ind√≠t√°sa
  const syncNow = useCallback(
    async (options?: SyncOptions) => {
      // A DataManager.syncNow m√°r tartalmazza a null ellen≈ërz√©st a syncService-re.
      setIsLoading(true);
      setError(null);
      try {
        const success = await dataManager.syncNow(options);
        const updatedSyncInfo = await dataManager.getSyncInfo();
        setSyncInfo(updatedSyncInfo);
        setIsLoading(false);
        return success;
      } catch (err) {
        console.error('[useStorage] Sync error:', err);
        setError(err instanceof Error ? err.message : String(err));
        // Hiba eset√©n is pr√≥b√°ljuk friss√≠teni a syncInfo-t, h√°tha tartalmaz hiba√ºzenetet
        try {
          const updatedSyncInfoOnError = await dataManager.getSyncInfo();
          setSyncInfo(updatedSyncInfoOnError);
        } catch (syncInfoError) {
          console.error('[useStorage] Error fetching sync info after sync error:', syncInfoError);
        }
        setIsLoading(false);
        return false;
      }
    },
    [dataManager],
  );

  // Periodikus SyncInfo friss√≠t√©s (opcion√°lis, de hasznos lehet)
  useEffect(() => {
    // ‚úÖ Csak akkor ind√≠tjuk a periodikus friss√≠t√©st, ha m√°r be van t√∂ltve
    if (!globalStorageManager.isLoaded) return;

    // ‚úÖ JAV√çT√ÅS: Ha van sync hiba, ne ind√≠tsuk a periodikus friss√≠t√©st
    if (error && error.includes('szinkroniz√°ci√≥')) {
      console.log('[useStorage] Sync hiba miatt periodikus friss√≠t√©s kikapcsolva');
      return;
    }

    const intervalId = setInterval(async () => {
      if (dataManager && !isLoading && !error) {
        try {
          console.log('[useStorage] Periodikus sync info friss√≠t√©s...');
          const currentSyncInfo = await dataManager.getSyncInfo();

          // ‚úÖ GLOB√ÅLIS v√°ltoz√≥k friss√≠t√©se
          globalStorageManager.updateSyncInfo(currentSyncInfo);
          
          // ‚úÖ JAV√çT√ÅS: Csak akkor friss√≠tj√ºk a state-et, ha v√°ltozott
          setSyncInfo(prevSyncInfo => {
            if (JSON.stringify(prevSyncInfo) !== JSON.stringify(currentSyncInfo)) {
              console.log('[useStorage] Sync info v√°ltozott, state friss√≠t√©s');
              return currentSyncInfo;
            }
            return prevSyncInfo; // Nincs v√°ltoz√°s, nem renderel√ºnk √∫jra
          });
        } catch (err) {
          console.error('[useStorage] Error during periodic sync info update:', err);
        }
      }
    }, 1800000); // 30 percenk√©nt (optim√°lis teljes√≠tm√©ny)

    return () => clearInterval(intervalId);
  }, [dataManager, isLoading, error]); // ‚úÖ globalSyncInfoLoaded elt√°vol√≠tva

  return {
    state,
    deviceId,
    syncInfo,
    isLoading,
    error,
    storageInitialized: !isLoading && !error,
    syncNow,
    refreshData: loadInitialData,
    // A nem haszn√°lt f√ºggv√©nyeket egyel≈ëre itt hagyjuk, a figyelmeztet√©sekkel k√©s≈ëbb foglalkozunk
    updateTabState,
    saveTabContent,
    getTabContent,
    // ‚ùå T√ñRL√âS: saveScrollPosition - duplik√°ci√≥ megsz√ºntetve, ScrollStorage service haszn√°lata helyett
    markArticleAsRead,
    getReadStatus,
    saveArticle,
    saveUserPreference,
    getUserPreference,
    addToSaveQueue,

    // ‚ö° √öJ: Cache diagnosztika √©s kezel√©s
    getCacheStats: () => ({
      ...cacheStats,
      size: preferenceCache.size,
      maxSize: PREFERENCE_CACHE_MAX_SIZE,
      ttlMinutes: PREFERENCE_CACHE_TTL / (60 * 1000),
    }),
    clearPreferenceCache: () => invalidateCache(),
    invalidatePreferenceCache: invalidateCache,
  };
}
