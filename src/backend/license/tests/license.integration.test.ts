// src/backend/license/tests/license.integration.test.ts
import request from 'supertest';
import { createTestApp } from '../../server/test-app';
import { sequelize } from '../../license/utils/db';
import { License } from '../models/licenseModel';
import crypto from 'crypto';
import { db } from '../../server/PostgreSQLManager';
import express from 'express';

// === KONSTANSOK a duplik√°lt stringek elker√ºl√©s√©re ===
const ADMIN_API_BASE = '/api/admin/license';
const RECOVERY_API_BASE = '/api/recover/license';
const ADMIN_TOKEN = process.env.TEST_ADMIN_TOKEN || 'your-secret-test-token';
const X_ADMIN_TOKEN_HEADER = 'X-Admin-Token';

// Az app v√°ltoz√≥t csak deklar√°ljuk, inicializ√°l√°s a beforeAll-ban
let app: express.Application;
let generatedLicenseKey = '';
let generatedRecoveryCode = '';
let licenseKeyHash = '';

describe('License API - Full Workflow Integration Test', () => {
  // N√∂velj√ºk meg a Jest id≈ëkorl√°tj√°t erre a teszt-suite-ra.
  jest.setTimeout(30000); // 30,000 ms = 30 seconds

  // Minden teszt el≈ëtt t√∂r√∂lj√ºk a t√°bl√°t, hogy tiszta lappal induljunk
  beforeAll(async () => {
    try {
      console.log('üîÑ App inicializ√°l√°s...');
      // 1. L√âP√âS: Hozzuk l√©tre az alkalmaz√°s p√©ld√°nyt.
      app = createTestApp();
      
      console.log('üîÑ Sequelize authentik√°ci√≥...');
      // 2. L√âP√âS: V√°rjuk meg, am√≠g MINDEN adatb√°zis-kapcsolat garant√°ltan √©l.
      await sequelize.authenticate();
      
      console.log('üîÑ PostgreSQL kapcsolat ellen≈ërz√©s...');
      // Csak akkor h√≠vjuk meg, ha l√©tezik a met√≥dus
      if (db && typeof db.checkConnection === 'function') {
        await db.checkConnection();
      }
      
      console.log('üîÑ Adatb√°zis szinkroniz√°l√°s (t√°bl√°k l√©trehoz√°sa)...');
      // Automatikus t√°bla l√©trehoz√°s, ha nem l√©tezik
      await sequelize.sync({ force: false });
      
      console.log('üîÑ T√°bl√°k tartalm√°nak t√∂rl√©se...');
      // 3. L√âP√âS: Most m√°r biztosan l√©tezik a t√°bla, t√∂r√∂lhetj√ºk a tartalm√°t
      await License.destroy({ 
        where: {},
        truncate: true // Opcion√°lis: gyorsabb t√∂rl√©s
      });
      
      console.log('‚úÖ Teszt k√∂rnyezet sikeresen inicializ√°lva!');
    } catch (error) {
      console.error("‚ùå V√©gzetes hiba a teszt-k√∂rnyezet inicializ√°l√°sa sor√°n:", error);
      if (error instanceof Error) {
        console.error("Stack trace:", error.stack);
      } else {
        console.error("Stack trace:", error);
      }
      throw error;
    }
  });

  // Minden teszt ut√°n z√°rjuk le MINDEN adatb√°zis kapcsolatot
  afterAll(async () => {
    try {
      console.log('üîÑ Adatb√°zis kapcsolatok lez√°r√°sa...');
      await sequelize.close();
      
      // Csak akkor h√≠vjuk meg, ha l√©tezik a met√≥dus
      if (db && typeof db.closePool === 'function') {
        await db.closePool();
      }
      console.log('‚úÖ Cleanup befejezve');
    } catch (error) {
      console.error('‚ö†Ô∏è Hiba a cleanup sor√°n:', error);
    }
  });

  // === 1. L√âP√âS: Kulcsgener√°l√°s ===
  it('should successfully generate a new license key', async () => {
    console.log('üìù Teszt: License kulcs gener√°l√°s...');
    
    const response = await request(app)
      .post(`${ADMIN_API_BASE}/generate`)
      .set(X_ADMIN_TOKEN_HEADER, ADMIN_TOKEN) // Authentik√°ci√≥
      .send({ validityMonths: 12 });

    expect(response.status).toBe(201);
    expect(response.body.success).toBe(true);
    expect(response.body.license).toHaveProperty('licenseKey');
    expect(response.body.license).toHaveProperty('recoveryCode');

    // Ments√ºk el a kapott adatokat a tov√°bbi tesztekhez
    generatedLicenseKey = response.body.license.licenseKey;
    generatedRecoveryCode = response.body.license.recoveryCode;
    licenseKeyHash = crypto.createHash('sha256').update(generatedLicenseKey).digest('hex');
    
    console.log('‚úÖ License kulcs sikeresen gener√°lva');
  });

  // === 2. L√âP√âS: Visszavon√°s ===
  it('should successfully revoke the generated license', async () => {
    console.log('üìù Teszt: License visszavon√°s...');
    expect(licenseKeyHash).not.toBe(''); // Biztos√≠tjuk, hogy az el≈ëz≈ë teszt lefutott

    const response = await request(app)
      .post(`${ADMIN_API_BASE}/revoke`)
      .set(X_ADMIN_TOKEN_HEADER, ADMIN_TOKEN)
      .send({
        keyHash: licenseKeyHash,
        reason: 'Integration test revocation'
      });

    expect(response.status).toBe(200);
    expect(response.body.success).toBe(true);
    expect(response.body.license.isRevoked).toBe(true);
    
    console.log('‚úÖ License sikeresen visszavonva');
  });

  // === 3. L√âP√âS: Feketelista Lek√©rdez√©se ===
  it('should include the revoked key hash in the revoked list', async () => {
    console.log('üìù Teszt: Visszavont kulcsok list√°ja...');
    
    const response = await request(app)
      .get(`${ADMIN_API_BASE}/revoked-list`)
      .set(X_ADMIN_TOKEN_HEADER, ADMIN_TOKEN);

    expect(response.status).toBe(200);
    expect(response.body.success).toBe(true);
    expect(response.body.revokedKeyHashes).toBeInstanceOf(Array);
    expect(response.body.revokedKeyHashes).toContain(licenseKeyHash);
    
    console.log('‚úÖ Visszavont kulcs megtal√°lhat√≥ a list√°ban');
  });
  
  // === 4. L√âP√âS: Sikertelen Recovery Teszt (mivel a kulcs m√°r vissza van vonva) ===
  it('should fail to recover a revoked license', async () => {
    console.log('üìù Teszt: Visszavont license recovery (sikertelen)...');
    
    const response = await request(app)
      .post(RECOVERY_API_BASE) // Ez a nyilv√°nos v√©gpont
      .send({ recoveryCode: generatedRecoveryCode });

    expect(response.status).toBe(403); // 403 Forbidden
    expect(response.body.success).toBe(false);
    expect(response.body.error).toBe('This license has been revoked.');
    
    console.log('‚úÖ Visszavont license recovery helyesen elutas√≠tva');
  });
  
  // === 5. L√âP√âS: Sikeres Recovery Teszt (egy √∫j, nem visszavont kulccsal) ===
  it('should successfully recover a non-revoked license', async () => {
    console.log('üìù Teszt: Akt√≠v license recovery (sikeres)...');
    
    // Gener√°lunk egy teljesen √∫j kulcsot ehhez a teszthez
    const genRes = await request(app)
      .post(`${ADMIN_API_BASE}/generate`)
      .set(X_ADMIN_TOKEN_HEADER, ADMIN_TOKEN)
      .send({});
    
    const newRecoveryCode = genRes.body.license.recoveryCode;
    const newLicenseKey = genRes.body.license.licenseKey;

    // Most megpr√≥b√°ljuk vissza√°ll√≠tani
    const recoverRes = await request(app)
      .post(RECOVERY_API_BASE)
      .send({ recoveryCode: newRecoveryCode });

    expect(recoverRes.status).toBe(200);
    expect(recoverRes.body.success).toBe(true);
    expect(recoverRes.body.licenseKey).toBe(newLicenseKey);
    
    console.log('‚úÖ Akt√≠v license sikeresen vissza√°ll√≠tva');
  });
});