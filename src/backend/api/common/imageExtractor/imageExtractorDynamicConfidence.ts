/**
 * Image Extractor Dynamic Confidence - Dinamikus konfidencia sz√°m√≠t√°s
 * 
 * Ez a modul kezeli a feed-specifikus konfidencia sz√°m√≠t√°sokat
 * √©s a feed profil cache-t.
 */

// Import√°ljuk a sz√ºks√©ges t√≠pusokat
import { RssItem } from './imageExtractorStrategies';
import { SYNC_STRATEGIES } from './imageExtractorStrategies';

/**
 * Feed-specifikus profil - Dinamikus konfidencia t√°mogat√°shoz
 */
export interface FeedProfile {
  feedUrl: string;
  strategySuccessRates: Record<string, number>;
  preferredStrategies: string[];
  confidenceOverrides: Record<string, number>;
  totalProcessed: number;
  lastUpdated: number;
}

/**
 * Feed profil cache - Mem√≥ria optimaliz√°lt t√°rol√°s
 */
class FeedProfileCache {
  private profiles = new Map<string, FeedProfile>();
  private readonly maxProfiles = 1000; // Maximum 1000 feed profil cache-ben
  private readonly ttl = 24 * 60 * 60 * 1000; // 24 √≥ra TTL

  /**
   * Feed profil lek√©r√©se vagy l√©trehoz√°sa
   */
  getOrCreateProfile(feedUrl: string): FeedProfile {
    const existing = this.profiles.get(feedUrl);
    
    if (existing && (Date.now() - existing.lastUpdated) < this.ttl) {
      return existing;
    }

    // √öj profil l√©trehoz√°sa
    const newProfile: FeedProfile = {
      feedUrl,
      strategySuccessRates: {},
      preferredStrategies: [],
      confidenceOverrides: {},
      totalProcessed: 0,
      lastUpdated: Date.now()
    };

    // Cache m√©ret ellen≈ërz√©se
    if (this.profiles.size >= this.maxProfiles) {
      this.evictOldest();
    }

    this.profiles.set(feedUrl, newProfile);
    return newProfile;
  }

  /**
   * Feed profil friss√≠t√©se sikeres k√©pkinyer√©s ut√°n
   */
  updateProfile(feedUrl: string, strategy: string, success: boolean): void {
    const profile = this.getOrCreateProfile(feedUrl);
    
    // Sikeres√©g ar√°ny friss√≠t√©se
    if (!profile.strategySuccessRates[strategy]) {
      profile.strategySuccessRates[strategy] = 0;
    }
    
    const currentRate = profile.strategySuccessRates[strategy];
    const totalAttempts = profile.totalProcessed;
    
    if (success) {
      profile.strategySuccessRates[strategy] = (currentRate * totalAttempts + 1) / (totalAttempts + 1);
    } else {
      profile.strategySuccessRates[strategy] = (currentRate * totalAttempts) / (totalAttempts + 1);
    }
    
    profile.totalProcessed++;
    profile.lastUpdated = Date.now();
    
    // Prefer√°lt strat√©gi√°k friss√≠t√©se
    this.updatePreferredStrategies(profile);
  }

  /**
   * Prefer√°lt strat√©gi√°k friss√≠t√©se sikeres√©g ar√°ny alapj√°n
   */
  private updatePreferredStrategies(profile: FeedProfile): void {
    const strategies = Object.entries(profile.strategySuccessRates)
      .filter(([_, rate]) => rate > 0.3) // Csak azok, amik legal√°bb 30%-ban sikeresek
      .sort(([_, a], [__, b]) => b - a)
      .slice(0, 3) // Top 3 strat√©gia
      .map(([strategy, _]) => strategy);
    
    profile.preferredStrategies = strategies;
  }

  /**
   * Legr√©gebbi profil elt√°vol√≠t√°sa cache-b≈ël
   */
  private evictOldest(): void {
    let oldestKey: string | null = null;
    let oldestTime = Date.now();

    for (const [key, profile] of this.profiles.entries()) {
      if (profile.lastUpdated < oldestTime) {
        oldestTime = profile.lastUpdated;
        oldestKey = key;
      }
    }

    if (oldestKey) {
      this.profiles.delete(oldestKey);
    }
  }

  /**
   * Cache statisztik√°k
   */
  getStats(): { totalProfiles: number; averageSuccessRate: number } {
    const profiles = Array.from(this.profiles.values());
    const totalProfiles = profiles.length;
    
    let totalSuccessRate = 0;
    let strategyCount = 0;
    
    for (const profile of profiles) {
      for (const rate of Object.values(profile.strategySuccessRates)) {
        totalSuccessRate += rate;
        strategyCount++;
      }
    }
    
    return {
      totalProfiles,
      averageSuccessRate: strategyCount > 0 ? totalSuccessRate / strategyCount : 0
    };
  }
}

// Glob√°lis feed profil cache
const feedProfileCache = new FeedProfileCache();

/**
 * Dinamikus konfidencia sz√°m√≠t√°s feed-specifikus adatok alapj√°n
 */
export function calculateDynamicConfidence(
  strategy: string, 
  feedUrl: string, 
  item: RssItem
): number {
  // Alap konfidencia a strat√©gi√°b√≥l
  const baseConfidence = SYNC_STRATEGIES.find(s => s.name === strategy)?.confidence || 0.5;
  
  // Feed profil lek√©r√©se
  const profile = feedProfileCache.getOrCreateProfile(feedUrl);
  
  // Feed-specifikus szorz√≥k
  const feedMultiplier = profile.confidenceOverrides[strategy] || 1.0;
  const successRate = profile.strategySuccessRates[strategy] || 0.5;
  
  // Prefer√°lt strat√©gia b√≥nusz
  const isPreferred = profile.preferredStrategies.includes(strategy);
  const preferredMultiplier = isPreferred ? 1.2 : 1.0;
  
  // Feed tapasztalat alap√∫ b√≥nusz (min√©l t√∂bb item, ann√°l megb√≠zhat√≥bb)
  const experienceMultiplier = Math.min(1.0 + (profile.totalProcessed / 1000), 1.3);
  
  // Dinamikus konfidencia sz√°m√≠t√°s
  const dynamicConfidence = baseConfidence * feedMultiplier * successRate * preferredMultiplier * experienceMultiplier;
  
  return Math.min(dynamicConfidence, 1.0);
}

/**
 * Feed-specifikus konfidencia fel√ºl√≠r√°sok be√°ll√≠t√°sa
 */
export function setFeedConfidenceOverrides(
  feedUrl: string, 
  overrides: Record<string, number>
): void {
  const profile = feedProfileCache.getOrCreateProfile(feedUrl);
  profile.confidenceOverrides = { ...profile.confidenceOverrides, ...overrides };
  profile.lastUpdated = Date.now();
}

/**
 * Feed profil statisztik√°k lek√©r√©se
 */
export function getFeedProfileStats(feedUrl: string): FeedProfile | null {
  return feedProfileCache.getOrCreateProfile(feedUrl);
}

/**
 * Cache statisztik√°k lek√©r√©se
 */
export function getCacheStats(): { totalProfiles: number; averageSuccessRate: number } {
  return feedProfileCache.getStats();
}

/**
 * Feed profil cache export√°l√°sa (a f≈ë modul sz√°m√°ra)
 */
export { feedProfileCache };

/**
 * DINAMIKUS KONFIDENCIA TESZT - Fejleszt√©s k√∂zbeni ellen≈ërz√©s
 */
export function testDynamicConfidence() {
  console.log('üß™ Dinamikus Konfidencia Teszt...');
  
  // Teszt feed URL
  const testFeedUrl = 'https://index.hu/rss';
  
  // Teszt item
  const testItem: RssItem = {
    title: 'Teszt cikk',
    description: 'Teszt le√≠r√°s',
    link: 'https://index.hu/cikk/123',
    enclosure: {
      $: {
        url: 'https://example.com/image.jpg',
        type: 'image/jpeg',
        width: '600',
        height: '400'
      }
    }
  };
  
  // 1. Alap konfidencia teszt
  const baseConfidence = calculateDynamicConfidence('enclosure', testFeedUrl, testItem);
  console.log(`Alap konfidencia: ${baseConfidence.toFixed(3)}`);
  
  // 2. Feed profil be√°ll√≠t√°sa
  setFeedConfidenceOverrides(testFeedUrl, {
    'enclosure': 1.2,
    'media-thumbnail': 0.8
  });
  
  // 3. M√≥dos√≠tott konfidencia teszt
  const modifiedConfidence = calculateDynamicConfidence('enclosure', testFeedUrl, testItem);
  console.log(`M√≥dos√≠tott konfidencia: ${modifiedConfidence.toFixed(3)}`);
  
  // 4. Sikeres√©g szimul√°l√°sa
  feedProfileCache.updateProfile(testFeedUrl, 'enclosure', true);
  feedProfileCache.updateProfile(testFeedUrl, 'enclosure', true);
  feedProfileCache.updateProfile(testFeedUrl, 'media-thumbnail', false);
  
  // 5. Tapasztalat alap√∫ konfidencia teszt
  const experiencedConfidence = calculateDynamicConfidence('enclosure', testFeedUrl, testItem);
  console.log(`Tapasztalat alap√∫ konfidencia: ${experiencedConfidence.toFixed(3)}`);
  
  // 6. Cache statisztik√°k
  const stats = getCacheStats();
  console.log('Cache statisztik√°k:', stats);
  
  // 7. Feed profil statisztik√°k
  const profile = getFeedProfileStats(testFeedUrl);
  console.log('Feed profil:', profile);
  
  return true;
} 