/**
 * src\apiclient\apiClient.ts
 * API kliens a News alkalmaz√°shoz
 */
import { endpoints } from './endpoints';
// import { NewsSource } from '../types'; // Egyel≈ëre nem haszn√°ljuk, de k√©s≈ëbb sz√ºks√©g lehet r√°
import { ArticleData } from '../utils/datamanager/types/storage'; // Jav√≠tott el√©r√©si √∫t
// import { ArticleSyncRequest as SyncRequest, ApiResponse as SyncResponse, ArticleSyncItem as SyncChanges } from '../utils/datamanager/types/api'; // R√©gi import
import {
  ArticleSyncRequest as SyncRequest,
  ApiResponse, // ArticleSyncItem import√°l√°sa (SyncChanges alias elhagyhat√≥, ha m√°shol nem kell)
  SyncResponseData, // Az √∫j SyncResponseData import√°l√°sa
  SyncPayloadChanges, // Import√°ljuk ezt is a countChanges met√≥dushoz
} from '../utils/datamanager/types/api';

// ========================================
// üé• VIDEO TYPES - √öJ VIDE√ì T√çPUSOK!
// ========================================
// Ez CSAK vide√≥ h√≠reket kezel!
// NEM keverj√ºk a sima h√≠rekkel!

export interface YouTubeVideo {
  id: string;
  videoId: string;
  title: string;
  link: string;
  thumbnail: string;
  description: string;
  published: string;
  views?: number;
  author: string;
  type: 'youtube';
  channelId: string;
  channelName: string;
}

export interface VideoNewsResponse {
  success: boolean;
  count: number;
  videos: YouTubeVideo[];
}

// T√≠pus defini√°l√°sa az API PUT met√≥dus√°hoz, any helyett
interface ApiRequestData {
  [key: string]: string | number | boolean | null | undefined | string[] | ApiRequestData;
}

// DbRow t√≠pus defini√°l√°sa a NewsSource-b√≥l val√≥ konverzi√≥hoz
// Friss√≠tve, hogy kompatibilis legyen az ApiRequestData-val
export interface DbRow {
  eredeti_id: string;
  cim: string;
  url: string;
  rss_feed: string | null;
  orszag: string;
  nyelv: string;
  fontossag: number;
  sections?: string;
  kontinens?: string; // √öj mez≈ë hozz√°ad√°sa
  aktiv?: boolean; // Forr√°s akt√≠v √°llapota
  [key: string]: string | number | boolean | null | undefined; // Index szignat√∫ra hozz√°ad√°sa
}

export interface DbSourceRow {
  id: string;
  name: string;
  url: string;
  country: string;
  continent: string;
  fontossag: number;
  language: string;
  rssFeed?: string; // √öj mez≈ë az RSS feed URL t√°rol√°s√°ra
  active?: boolean; // Forr√°s akt√≠v √°llapota
}

export interface SearchResultItem {
  id: number;
  title: string;
  url: string;
  description: string;
  published_at: string;
  source_slug: string;
  country_code: string;
  image_url: string;
  relevance: number;
  // √öj, szerverr≈ël √©rkez≈ë mez≈ëk
  source_name?: string;
  continent?: string;
  orszag?: string;
  match_language?: string;
}

export interface SearchResponse {
  query?: string;
  language?: string;
  totalResults?: number;
  limit?: number;
  offset?: number;
  results: SearchResultItem[];
  // √öj meta objektum
  meta?: {
    totalResults?: number;
    languageBreakdown?: { [key: string]: number };
  };
}

// √öJ: Keres√©si param√©terek t√≠pusdefin√≠ci√≥ja
export interface SearchNewsParams {
  q: string;
  lang?: string;
  countries?: string; // √öJ: orsz√°gk√≥dok vessz≈ëvel elv√°lasztva
  limit?: number;
  offset?: number;
}

/**
 * API kliens oszt√°ly
 */
export class ApiClient {
  private static instance: ApiClient | null = null;
  private baseUrl: string;

  constructor(baseUrl: string = endpoints.postgres.baseUrl) {
    this.baseUrl = baseUrl;
    console.log('[ApiClient] Inicializ√°lva:', this.baseUrl);
  }

  /**
   * Singleton pattern - egyetlen ApiClient p√©ld√°ny biztos√≠t√°sa
   */
  public static getInstance(baseUrl?: string): ApiClient {
    if (!ApiClient.instance) {
      ApiClient.instance = new ApiClient(baseUrl);
    }
    return ApiClient.instance;
  }

  // √Åltal√°nos API h√≠v√°s - b≈ëv√≠tett napl√≥z√°ssal
  private async apiCall<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    const url = `${this.baseUrl}${endpoint}`;
    console.log(`[ApiClient] K√©r√©s: ${url}`);

    try {
      // üì± MOBILE FIX: 30 m√°sodperces timeout hozz√°ad√°sa
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000);
      
      const response = await fetch(url, {
        ...options,
        signal: controller.signal,
        headers: {
          'Content-Type': 'application/json',
          ...options.headers,
        },
      });
      
      clearTimeout(timeoutId);

      if (!response.ok) {
        throw new Error(`API hiba: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      console.log(
        `[ApiClient] Sikeres v√°lasz: ${url}`,
        Array.isArray(data) ? `(${data.length} elem)` : 'sikeres',
      );
      return data as T;
    } catch (error) {
      // üì± MOBILE FIX: Specifikus timeout hiba √ºzenet
      if (error instanceof Error && error.name === 'AbortError') {
        console.error(`[ApiClient] üì± Timeout (30s): ${url}`);
        throw new Error('K√©r√©s t√∫ll√©pi az id≈ëkorl√°tot. Ellen≈ërizd a kapcsolatot!');
      }
      console.error(`[ApiClient] Hiba: ${url}`, error);
      throw error;
    }
  }

  // PostgreSQL API h√≠v√°sok
  private async postgresApiCall<T>(endpoint: string): Promise<T> {
    return this.apiCall<T>(endpoint);
  }

  // PostgreSQL adatok √≠r√°sa PUT met√≥dussal - any helyett ApiRequestData
  private async postgresApiPut<T>(endpoint: string, data: ApiRequestData): Promise<T> {
    return this.apiCall<T>(endpoint, {
      method: 'PUT',
      body: JSON.stringify(data),
    });
  }

  // PostgreSQL adatok √≠r√°sa DELETE met√≥dussal
  private async postgresApiDelete<T>(endpoint: string): Promise<T> {
    return this.apiCall<T>(endpoint, {
      method: 'DELETE',
    });
  }

  // ========================================
  // üé• VIDEO API MET√ìDUSOK - √öJ VIDE√ì FUNKCI√ìK!
  // ========================================
  // Ez CSAK vide√≥ h√≠reket k√©r le!
  // NEM keverj√ºk a sima h√≠rekkel!

  /**
   * Vide√≥ h√≠rek lek√©r√©se a YouTube aggregatorb√≥l
   */
  async getVideoNews(params?: { country?: string; maxVideos?: number; maxAgeDays?: number }): Promise<VideoNewsResponse> {
    console.log('[ApiClient] getVideoNews h√≠v√°s params:', params);
    try {
      console.log('[ApiClient] üé• Vide√≥ h√≠rek lek√©r√©se...');
      let url = endpoints.videoNews;
      
      // Query param√©terek √∂ssze√°ll√≠t√°sa
      const queryParams = new URLSearchParams();
      if (params?.country) {
        queryParams.append('country', params.country);
      }
      if (params?.maxVideos) {
        queryParams.append('maxVideos', params.maxVideos.toString());
      }
      if (params?.maxAgeDays) {
        queryParams.append('maxAgeDays', params.maxAgeDays.toString());
      }
      
      // URL √∂ssze√°ll√≠t√°sa query param√©terekkel
      if (queryParams.toString()) {
        url += `?${queryParams.toString()}`;
      }
      
      console.log('[ApiClient] üé• API URL:', url);
      const response = await this.apiCall<VideoNewsResponse>(url);
      console.log(`[ApiClient] üé• ${response.count} vide√≥ h√≠r sikeresen lek√©rdezve`);
      return response;
    } catch (error) {
      console.error('[ApiClient] üé• Hiba a vide√≥ h√≠rek lek√©r√©sekor:', error);
      throw error;
    }
  }

  // Ping teszt a szerverkapcsolat ellen≈ërz√©s√©hez
  async ping(): Promise<{ status: string; time: Date }> {
    return this.postgresApiCall<{ status: string; time: Date }>(endpoints.postgres.ping);
  }

  /**
   * Health check a szerver √°llapot ellen≈ërz√©s√©hez
   * Ez a met√≥dus ellen≈ërzi, hogy a szerver teljesen bet√∂lt√∂tt-e
   */
  async healthCheck(): Promise<{ status: string; timestamp: string; uptime: number; environment: string }> {
    return this.apiCall<{ status: string; timestamp: string; uptime: number; environment: string }>('/api/health');
  }

  /**
   * V√°rakoz√°s a szerver teljes bet√∂lt√©s√©re
   * @param maxRetries - Maximum pr√≥b√°lkoz√°sok sz√°ma (alap√©rtelmezett: 30)
   * @param retryDelay - V√°rakoz√°s milliszekundumokban pr√≥b√°lkoz√°sok k√∂z√∂tt (alap√©rtelmezett: 1000ms)
   */
  async waitForServer(maxRetries: number = 30, retryDelay: number = 1000): Promise<boolean> {
    console.log('[ApiClient] Szerver el√©rhet≈ës√©g ellen≈ërz√©se...');
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`[ApiClient] Pr√≥b√°lkoz√°s ${attempt}/${maxRetries}...`);
        await this.healthCheck();
        console.log('[ApiClient] ‚úÖ Szerver el√©rhet≈ë!');
        return true;
      } catch (error) {
        console.log(`[ApiClient] ‚è≥ Szerver m√©g nem el√©rhet≈ë (${attempt}/${maxRetries}):`, error);
        
        if (attempt === maxRetries) {
          console.error('[ApiClient] ‚ùå Szerver nem el√©rhet≈ë a maxim√°lis pr√≥b√°lkoz√°sok ut√°n');
          return false;
        }
        
        // V√°rakoz√°s a k√∂vetkez≈ë pr√≥b√°lkoz√°s el≈ëtt
        await new Promise(resolve => setTimeout(resolve, retryDelay));
      }
    }
    
    return false;
  }

  // H√≠rforr√°sok lek√©rdez√©se kontinens alapj√°n
  async getSourcesByContinent(continent: string): Promise<DbRow[]> {
    // Elt√°vol√≠tva a k√∂t≈ëjel-sz√≥k√∂z √°talak√≠t√°s, ezt a szerver fogja kezelni
    return this.postgresApiCall<DbRow[]>(endpoints.postgres.continentSources(continent));
  }

  // V√°lasz konvert√°l√°sa a megfelel≈ë form√°tumra
  private convertDbRowToSourceRow(row: DbRow): DbSourceRow {
    return {
      id: row.eredeti_id,
      name: row.cim,
      url: row.url,
      country: row.orszag,
      continent: row.kontinens || '',
      fontossag: row.fontossag,
      language: row.nyelv,
      rssFeed: row.rss_feed || undefined, // Az RSS feed URL √°tvitele
      active: row.aktiv || true, // Alap√©rtelmezetten akt√≠v
    };
  }

  // H√≠rforr√°sok lek√©rdez√©se orsz√°g alapj√°n
  async getSourcesByCountry(country: string): Promise<DbSourceRow[]> {
    const rows = await this.postgresApiCall<DbRow[]>(endpoints.postgres.countrySources(country));
    return rows.map((row) => this.convertDbRowToSourceRow(row));
  }

  // H√≠rforr√°s lek√©rdez√©se azonos√≠t√≥ alapj√°n
  async getSourceById(id: string): Promise<DbRow | null> {
    return this.postgresApiCall<DbRow | null>(endpoints.postgres.sourceById(id));
  }

  // √öJ: √ñsszes h√≠rforr√°s lek√©rdez√©se
  async getAllSources(): Promise<DbSourceRow[]> {
    // Ha van v√©gpont az √∂sszes forr√°s lek√©rdez√©s√©hez, azt haszn√°ljuk
    if (endpoints.postgres.allSources) {
      const rows = await this.postgresApiCall<DbRow[]>(endpoints.postgres.allSources);
      return rows.map((row) => this.convertDbRowToSourceRow(row));
    }

    // Egy√©bk√©nt kigy≈±jtj√ºk az √∂sszes orsz√°got √©s minden orsz√°gb√≥l lek√©rj√ºk a forr√°sokat
    const countries = await this.getAllCountries();
    const allSources: DbSourceRow[] = [];

    for (const country of countries) {
      const sources = await this.getSourcesByCountry(country);
      allSources.push(...sources);
    }

    return allSources;
  }

  // √öJ: Forr√°s adatainak friss√≠t√©se
  async updateSource(source: DbSourceRow): Promise<boolean> {
    try {
      // A DbSourceRow form√°tum√∫ objektumot DbRow form√°tumba konvert√°ljuk
      const dbRow: DbRow = {
        eredeti_id: source.id,
        cim: source.name,
        url: source.url,
        rss_feed: source.rssFeed || null,
        orszag: source.country,
        nyelv: source.language,
        fontossag: source.fontossag,
        kontinens: source.continent,
        aktiv: source.active,
      };

      // Ellen≈ërizz√ºk, hogy van-e megfelel≈ë v√©gpont
      if (!endpoints.postgres.updateSource) {
        console.warn('[ApiClient] A updateSource v√©gpont nincs defini√°lva az endpoints.ts f√°jlban');
        // Mockolt sikeres v√°lasz a fejleszt√©s folytat√°s√°hoz
        return true;
      }

      // PUT k√©r√©s a szerver fel√© a forr√°s friss√≠t√©s√©hez
      const result = await this.postgresApiPut<{ success: boolean }>(
        endpoints.postgres.updateSource(source.id),
        dbRow as ApiRequestData, // Explicit t√≠puskonverzi√≥ az ApiRequestData-ra
      );

      return result.success;
    } catch (error) {
      console.error('[ApiClient] Hiba a forr√°s friss√≠t√©sekor:', error);
      return false;
    }
  }

  // √öJ: Forr√°s st√°tusz√°nak friss√≠t√©se (akt√≠v/inakt√≠v)
  async updateSourceStatus(id: string, status: { active: boolean }): Promise<boolean> {
    try {
      // Ellen≈ërizz√ºk, hogy van-e megfelel≈ë v√©gpont
      if (!endpoints.postgres.updateSourceStatus) {
        console.warn(
          '[ApiClient] A updateSourceStatus v√©gpont nincs defini√°lva az endpoints.ts f√°jlban',
        );
        // Mockolt sikeres v√°lasz a fejleszt√©s folytat√°s√°hoz
        return true;
      }

      // PUT k√©r√©s a szerver fel√© a forr√°s st√°tusz√°nak friss√≠t√©s√©hez
      const result = await this.postgresApiPut<{ success: boolean }>(
        endpoints.postgres.updateSourceStatus(id),
        { active: status.active },
      );

      return result.success;
    } catch (error) {
      console.error('[ApiClient] Hiba a forr√°s st√°tusz√°nak friss√≠t√©sekor:', error);
      return false;
    }
  }

  // √öJ: Forr√°s t√∂rl√©se
  async deleteSource(id: string): Promise<boolean> {
    try {
      // Ellen≈ërizz√ºk, hogy van-e megfelel≈ë v√©gpont
      if (!endpoints.postgres.deleteSource) {
        console.warn('[ApiClient] A deleteSource v√©gpont nincs defini√°lva az endpoints.ts f√°jlban');
        // Mockolt sikeres v√°lasz a fejleszt√©s folytat√°s√°hoz
        return true;
      }

      // DELETE k√©r√©s a szerver fel√© a forr√°s t√∂rl√©s√©hez
      const result = await this.postgresApiDelete<{ success: boolean }>(
        endpoints.postgres.deleteSource(id),
      );

      return result.success;
    } catch (error) {
      console.error('[ApiClient] Hiba a forr√°s t√∂rl√©sekor:', error);
      return false;
    }
  }

  // √ñsszes orsz√°g lek√©rdez√©se
  async getAllCountries(): Promise<string[]> {
    return this.postgresApiCall<string[]>(endpoints.postgres.allCountries);
  }

  // Nyilv√°nos met√≥dus az orsz√°gok bet≈± szerinti lek√©rdez√©s√©hez
  async getCountriesByLetter(letter: string): Promise<string[]> {
    return this.postgresApiCall<string[]>(endpoints.postgres.countriesByLetter(letter));
  }

  /**
   * Cikk ment√©se a szerverre
   * @param article A mentend≈ë cikk adatai
   */
  async saveArticle(article: ArticleData): Promise<void> {
    try {
      console.log('[ApiClient] Cikk ment√©se:', article.id);
      const url = `${this.baseUrl}${endpoints.saveArticle}`;
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${this.getAuthToken()}`,
        },
        body: JSON.stringify(article),
      });

      if (!response.ok) {
        throw new Error(`Cikk ment√©si hiba: ${response.status}`);
      }

      console.log('[ApiClient] Cikk sikeresen mentve:', article.id);
    } catch (error) {
      console.error('[ApiClient] Cikk ment√©si hiba:', error);
      throw error;
    }
  }

  /**
   * K√©tir√°ny√∫ szinkroniz√°ci√≥ a szerverrel
   * @param request Szinkroniz√°ci√≥s k√©r√©s adatai
   * @returns A szerver √°ltal visszaadott m√≥dos√≠t√°sok
   */
  async synchronize(request: SyncRequest): Promise<ApiResponse<SyncResponseData>> {
    try {
      console.log('[ApiClient] Szinkroniz√°ci√≥ ind√≠t√°sa', {
        deviceId: request.deviceId,
        lastSync: new Date(request.lastSyncTimestamp),
      });

      const url = `${this.baseUrl}${endpoints.sync}`;
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${this.getAuthToken()}`,
        },
        body: JSON.stringify(request),
      });

      if (!response.ok) {
        throw new Error(`Szinkroniz√°ci√≥s hiba: ${response.status}`);
      }

      const data: ApiResponse<SyncResponseData> = await response.json(); // <<< M√≥dos√≠tva
      console.log('[ApiClient] Szinkroniz√°ci√≥ sikeres', {
        receivedChanges: this.countChanges(data.data?.changes), // <<< M√≥dos√≠tva: data.data?.changes
      });

      return data;
    } catch (error) {
      console.error('[ApiClient] Szinkroniz√°ci√≥s hiba:', error);
      throw error;
    }
  }

  // Helper met√≥dus a v√°ltoz√°sok sz√°mol√°s√°hoz - jav√≠tva a null √©rt√©k kezel√©se
  private countChanges(changes?: SyncPayloadChanges | null): number {
    // <<< T√≠pus m√≥dos√≠tva
    if (!changes) return 0;
    let count = 0;
    if (changes.readArticles) count += changes.readArticles.length;
    if (changes.savedArticles) count += changes.savedArticles.length;
    if (changes.userPreferences) count += 1;
    return count;
  }

  // Hiteles√≠t√©si token lek√©r√©se
  private getAuthToken(): string {
    return localStorage.getItem('auth-token') || '';
  }

  // Vide√≥s orsz√°gok bet≈± szerinti lek√©rdez√©se
  async getVideoCountries(): Promise<{ [letter: string]: unknown[] }> {
    return this.apiCall<{ [letter: string]: unknown[] }>(endpoints.videoCountries);
  }

  /**
   * Keres√©s a teljes h√≠r adatb√°zisban
   * @param params Keres√©si param√©terek
   */
  async searchNews(params: SearchNewsParams): Promise<SearchResponse> {
    // Csak az enged√©lyezett nyelveket engedj√ºk √°t
    const allowedLangs = ['en', 'hu'];
    const safeParams = {
      ...params,
      lang: params.lang && allowedLangs.includes(params.lang) ? params.lang as 'en' | 'hu' : undefined,
    };
    // --- LOG: orsz√°gk√≥d param√©ter ---
    console.log('[ApiClient] searchNews countries param:', params.countries);
    const url = endpoints.searchNews(safeParams);
    return this.apiCall<SearchResponse>(url);
  }

  // √öJ: Helyi h√≠rek lek√©r√©se sourceId param√©terrel
  async getLocalNews(params: { country?: string; sourceId?: string; limit?: number; offset?: number } = {}): Promise<unknown> {
    let url = '/api/local/news';
    const query: string[] = [];
    if (params.country) query.push(`country=${encodeURIComponent(params.country)}`);
    if (params.sourceId) query.push(`sourceId=${encodeURIComponent(params.sourceId)}`);
    if (params.limit) query.push(`limit=${params.limit}`);
    if (params.offset) query.push(`offset=${params.offset}`);
    if (query.length) url += '?' + query.join('&');
    return this.apiCall(url);
  }
}

// Egyes√≠tett API kliens a PostgreSQL adatok lek√©r√©s√©hez
const apiClientInstance = ApiClient.getInstance(); // ‚úÖ JAV√çT√ÅS: Singleton pattern haszn√°lata

export const apiClient = {
  getSourcesByContinent: async (continent: string): Promise<DbRow[]> => {
    // √Åtadjuk az eredeti kontinens azonos√≠t√≥t
    return apiClientInstance.getSourcesByContinent(continent);
  },
  getSourcesByCountry: async (country: string): Promise<DbSourceRow[]> => {
    return apiClientInstance.getSourcesByCountry(country);
  },
  getSourceById: async (id: string): Promise<DbRow | null> => {
    return apiClientInstance.getSourceById(id);
  },
  getAllCountries: async (): Promise<string[]> => {
    return apiClientInstance.getAllCountries();
  },
  ping: async (): Promise<{ status: string; time: Date }> => {
    return apiClientInstance.ping();
  },
  saveArticle: async (article: ArticleData): Promise<void> => {
    return apiClientInstance.saveArticle(article);
  },
  synchronize: async (request: SyncRequest): Promise<ApiResponse<SyncResponseData>> => {
    // <<< M√≥dos√≠tva
    return apiClientInstance.synchronize(request);
  },
  getCountriesByLetter: async (letter: string): Promise<string[]> => {
    return apiClientInstance.getCountriesByLetter(letter);
  },
  // √öJ: Hozz√°adott met√≥dusok
  getAllSources: async (): Promise<DbSourceRow[]> => {
    return apiClientInstance.getAllSources();
  },
  updateSource: async (source: DbSourceRow): Promise<boolean> => {
    return apiClientInstance.updateSource(source);
  },
  updateSourceStatus: async (id: string, status: { active: boolean }): Promise<boolean> => {
    return apiClientInstance.updateSourceStatus(id, status);
  },
  deleteSource: async (id: string): Promise<boolean> => {
    return apiClientInstance.deleteSource(id);
  },
  // ========================================
  // üé• VIDEO API MET√ìDUSOK - √öJ VIDE√ì FUNKCI√ìK!
  // ========================================
  // Ez CSAK vide√≥ h√≠reket k√©r le!
  // NEM keverj√ºk a sima h√≠rekkel!
  getVideoNews: async (params?: { country?: string; maxVideos?: number; maxAgeDays?: number }): Promise<VideoNewsResponse> => {
    return apiClientInstance.getVideoNews(params);
  },
  getVideoCountries: async (): Promise<{ [letter: string]: unknown[] }> => {
    return apiClientInstance.getVideoCountries();
  },
  // √öJ: Helyi h√≠rek lek√©r√©se sourceId param√©terrel
  getLocalNews: async (params: { country?: string; sourceId?: string; limit?: number; offset?: number } = {}): Promise<unknown> => {
    return apiClientInstance.getLocalNews(params);
  },
  
  // √öJ: Full-text keres√©s a h√≠rek k√∂z√∂tt
  searchNews: async (params: SearchNewsParams): Promise<SearchResponse> => {
    return apiClientInstance.searchNews(params);
  },
};
