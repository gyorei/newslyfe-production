/**
 * K√∂zponti napl√≥z√≥ szolg√°ltat√°s (logger.ts)
 *
 * Szolg√°ltat√°s c√©lja:
 * - Egys√©ges napl√≥z√°si fel√ºlet biztos√≠t√°sa az alkalmaz√°s sz√°m√°ra
 * - K√ºl√∂nb√∂z≈ë r√©szletess√©gi szintek t√°mogat√°sa (debug, info, warn, error)
 * - Struktur√°lt napl√≥z√°s JSON form√°tumban
 * - Kateg√≥ri√°k szerinti sz≈±r√©s √©s form√°z√°s
 * - K√∂rnyezet-f√ºgg≈ë napl√≥z√°s (fejleszt√©s vs. produkci√≥)
 *
 * Kapcsol√≥d√≥ f√°jlok:
 * - src/utils/monitoring/index.ts: Hibak√∂vet√©s √©s teljes√≠tm√©nyfigyel√©s
 * - src/config/env.ts: K√∂rnyezeti be√°ll√≠t√°sok
 */

// Napl√≥z√°si szintek meghat√°roz√°sa fontoss√°gi sorrendben
export enum LogLevel {
  DEBUG = 0,
  INFO = 1,
  WARN = 2,
  ERROR = 3,
}

// K√∂rnyezet-alap√∫ alap√©rtelmezett napl√≥z√°si szint
const DEFAULT_LOG_LEVEL =
  process.env.NODE_ENV === 'production'
    ? LogLevel.WARN // Termel√©si k√∂rnyezetben csak figyelmeztet√©sek √©s hib√°k
    : LogLevel.DEBUG; // Fejleszt√©si k√∂rnyezetben minden

// Napl√≥z√°si kateg√≥ri√°k enged√©lyez√©se/letilt√°sa
const enabledCategories: Record<string, boolean> = {
  network: true,
  cache: true,
  rss: true,
  ui: true,
  location: true,
  data: true,
  local: true,
  performance: true,
  error: true,
  user: true,
  default: true,
};

// Napl√≥z√°si be√°ll√≠t√°sok t√°rol√°sa
let currentLogLevel = DEFAULT_LOG_LEVEL;
let enableConsoleOutput = true;
let enableRemoteLogging = false;
let remoteLogEndpoint = '';

/**
 * Id≈ëb√©lyeggel ell√°tott napl√≥bejegyz√©s form√°z√°sa
 */
function formatLogEntry(level: string, category: string, message: string, data?: unknown): string {
  const timestamp = new Date().toISOString();
  const dataString = data ? ` | ${JSON.stringify(data, formatErrorsInJson)}` : '';
  return `[${timestamp}] [${level.toUpperCase()}] [${category}] ${message}${dataString}`;
}

/**
 * JSON.stringify sz√°m√°ra error objektumok helyes form√°z√°sa
 */
function formatErrorsInJson(_key: string, value: unknown) {
  if (value instanceof Error) {
    return {
      name: value.name,
      message: value.message,
      stack: value.stack,
      cause: value.cause,
    };
  }
  return value;
}

/**
 * T√°voli napl√≥z√≥ v√©gpont be√°ll√≠t√°sa (ha sz√ºks√©ges)
 */
async function sendToRemoteLogger(
  level: string,
  category: string,
  message: string,
  data?: unknown,
): Promise<void> {
  if (!enableRemoteLogging || !remoteLogEndpoint) return;

  try {
    await fetch(remoteLogEndpoint, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        level,
        category,
        message,
        data,
        timestamp: new Date().toISOString(),
        app: 'news-app',
        environment: process.env.NODE_ENV || 'development',
        userAgent: navigator.userAgent,
      }),
    });
  } catch (error) {
    // Ha a t√°voli napl√≥z√°s sikertelen, csak a konzolon jelezz√ºk (de nem pr√≥b√°ljuk √∫jra, hogy elker√ºlj√ºk a v√©gtelen ciklust)
    console.error('Hiba a t√°voli napl√≥z√°s sor√°n:', error);
  }
}

/**
 * Napl√≥bejegyz√©s r√∂gz√≠t√©se
 */
async function logEntry(
  level: LogLevel,
  levelName: string,
  category: string,
  message: string,
  data?: unknown,
) {
  // Ellen≈ërizz√ºk, hogy a napl√≥z√°si szint √©s kateg√≥ria enged√©lyezve van-e
  if (
    level < currentLogLevel ||
    enabledCategories[category] === false ||
    (!enabledCategories[category] && !enabledCategories.default)
  ) {
    return;
  }

  // Form√°zott napl√≥bejegyz√©s el≈ë√°ll√≠t√°sa
  const formattedMessage = formatLogEntry(levelName, category, message, data);

  // Ki√≠rat√°s a konzolra, ha enged√©lyezve van
  if (enableConsoleOutput) {
    switch (level) {
      case LogLevel.DEBUG:
        console.debug(formattedMessage);
        break;
      case LogLevel.INFO:
        console.info(formattedMessage);
        break;
      case LogLevel.WARN:
        console.warn(formattedMessage);
        break;
      case LogLevel.ERROR:
        console.error(formattedMessage);
        break;
    }
  }

  // T√°voli napl√≥z√°s, ha enged√©lyezve van
  await sendToRemoteLogger(levelName, category, message, data);

  // Hib√°k k√∂zponti kezel√©se a monitoroz√°s r√©sz√©re
  if (level === LogLevel.ERROR && typeof window !== 'undefined') {
    try {
      const event = new CustomEvent('app-error', {
        detail: { level, category, message, data, timestamp: new Date() },
      });
      window.dispatchEvent(event);
    } catch {
      // N√©ma hiba, ha az esem√©ny k√ºld√©s sikertelen (az 'e' v√°ltoz√≥ elt√°vol√≠tva, mivel nem volt haszn√°lva)
    }
  }
}

/**
 * A k√∂zponti napl√≥z√≥ szolg√°ltat√°s
 */
export const logger = {
  /**
   * Debug szint≈± inform√°ci√≥k napl√≥z√°sa (csak fejleszt√©shez)
   */
  debug: (category: string, message: string, data?: unknown) =>
    logEntry(LogLevel.DEBUG, 'debug', category, message, data),

  /**
   * Informat√≠v √ºzenetek napl√≥z√°sa
   */
  info: (category: string, message: string, data?: unknown) =>
    logEntry(LogLevel.INFO, 'info', category, message, data),

  /**
   * Figyelmeztet√©sek napl√≥z√°sa
   */
  warn: (category: string, message: string, data?: unknown) =>
    logEntry(LogLevel.WARN, 'warn', category, message, data),

  /**
   * Hib√°k napl√≥z√°sa
   */
  error: (category: string, message: string, error?: Error | unknown) =>
    logEntry(LogLevel.ERROR, 'error', category, message, error),

  /**
   * Teljes√≠tm√©nym√©r√©s kezdete
   */
  startPerf: (category: string, id: string): number => {
    const startTime = performance.now();
    logger.debug('performance', `‚è±Ô∏è Teljes√≠tm√©nym√©r√©s kezdete: ${id}`, { category, startTime });
    return startTime;
  },

  /**
   * Teljes√≠tm√©nym√©r√©s befejez√©se √©s eredm√©ny napl√≥z√°sa
   */
  endPerf: (category: string, id: string, startTime: number): number => {
    const endTime = performance.now();
    const duration = endTime - startTime;
    logger.debug('performance', `‚è±Ô∏è Teljes√≠tm√©nym√©r√©s v√©ge: ${id}`, {
      category,
      startTime,
      endTime,
      duration: `${duration.toFixed(2)}ms`,
    });
    return duration;
  },

  /**
   * Felhaszn√°l√≥i tev√©kenys√©g napl√≥z√°sa
   */
  userAction: (action: string, detail?: unknown) => {
    logger.info('user', `üë§ Felhaszn√°l√≥i tev√©kenys√©g: ${action}`, detail);
  },

  /**
   * Napl√≥z√°si be√°ll√≠t√°sok m√≥dos√≠t√°sa
   */
  config: {
    /**
     * Napl√≥z√°si szint be√°ll√≠t√°sa
     */
    setLevel: (level: LogLevel) => {
      currentLogLevel = level;
      logger.info('logger', `Napl√≥z√°si szint be√°ll√≠tva: ${LogLevel[level]}`);
    },

    /**
     * Kateg√≥ria enged√©lyez√©se/letilt√°sa
     */
    setCategory: (category: string, enabled: boolean) => {
      enabledCategories[category] = enabled;
      logger.info('logger', `Kateg√≥ria ${enabled ? 'enged√©lyezve' : 'letiltva'}: ${category}`);
    },

    /**
     * Konzol kimenet enged√©lyez√©se/letilt√°sa
     */
    setConsoleOutput: (enabled: boolean) => {
      enableConsoleOutput = enabled;
      console.log(`Konzol napl√≥z√°s ${enabled ? 'enged√©lyezve' : 'letiltva'}`);
    },

    /**
     * T√°voli napl√≥z√°s be√°ll√≠t√°sa
     */
    setRemoteLogging: (enabled: boolean, endpoint?: string) => {
      enableRemoteLogging = enabled;
      if (endpoint) remoteLogEndpoint = endpoint;
      logger.info(
        'logger',
        `T√°voli napl√≥z√°s ${enabled ? 'enged√©lyezve' : 'letiltva'}`,
        endpoint ? { endpoint } : undefined,
      );
    },
  },
};

export default logger;
