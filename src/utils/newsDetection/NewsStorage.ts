// üì∞ News Storage - DataManager wrapper (FRISS√çTVE)
// Utols√≥ friss√≠t√©s: 2025.06.03

import { LastCheckState, STORAGE_KEYS } from './types';
import { DataManager } from '../datamanager';

/**
 * DataManager alap√∫ news detection storage
 * localStorage helyett DataManager LOCAL_STORAGE ter√ºletet haszn√°l
 */
export class NewsStorage {
  private dataManager = DataManager.getInstance();

  /**
   * Utols√≥ ellen≈ërz√©s √°llapot ment√©se
   */
  async saveLastCheck(tabId: string, state: LastCheckState): Promise<void> {
    try {
      const key = `${STORAGE_KEYS.LAST_CHECK_PREFIX}${tabId}`;
      await this.dataManager.setItem(key, state);
    } catch (error) {
      console.warn('NewsStorage: Nem siker√ºlt menteni:', error);
    }
  }

  /**
   * Utols√≥ ellen≈ërz√©s √°llapot bet√∂lt√©se
   */
  async getLastCheck(tabId: string): Promise<LastCheckState | null> {
    try {
      const key = `${STORAGE_KEYS.LAST_CHECK_PREFIX}${tabId}`;
      return await this.dataManager.getItem<LastCheckState>(key);
    } catch (error) {
      console.warn('NewsStorage: Nem siker√ºlt bet√∂lteni:', error);
      return null;
    }
  }

  /**
   * Tab √°llapot t√∂rl√©se
   */
  async clearTab(tabId: string): Promise<void> {
    try {
      const key = `${STORAGE_KEYS.LAST_CHECK_PREFIX}${tabId}`;
      await this.dataManager.removeItem(key);
    } catch (error) {
      console.warn('NewsStorage: Nem siker√ºlt t√∂r√∂lni:', error);
    }
  }

  /**
   * √ñsszes news detection adat t√∂rl√©se
   */
  async clearAll(): Promise<void> {
    try {
      // DataManager localStorage kulcsok lek√©r√©se √©s sz≈±r√©se
      const allKeys = await this.dataManager.getAllStorageKeys();
      const newsKeys = allKeys.filter((key) => key.startsWith(STORAGE_KEYS.LAST_CHECK_PREFIX));

      for (const key of newsKeys) {
        await this.dataManager.removeItem(key);
      }
    } catch (error) {
      console.warn('NewsStorage: Nem siker√ºlt mindent t√∂r√∂lni:', error);
    }
  }

  /**
   * Debug: √∂sszes t√°rolt tab list√°z√°sa
   */
  async getAllStoredTabs(): Promise<string[]> {
    try {
      const allKeys = await this.dataManager.getAllStorageKeys();
      return allKeys
        .filter((key) => key.startsWith(STORAGE_KEYS.LAST_CHECK_PREFIX))
        .map((key) => key.replace(STORAGE_KEYS.LAST_CHECK_PREFIX, ''));
    } catch (error) {
      console.warn('NewsStorage: Nem siker√ºlt list√°zni:', error);
      return [];
    }
  }
}
