import { StorageAdapter } from './storage';
import { LocalStorageAdapter } from './localStorage';
import { CacheOptions } from './cache/types';
import { StorageOptions } from './storage/types';
import { LocalStorageOptions } from './localStorage/types';
import { ApiClient } from '../../apiclient/apiClient';
import { SyncService } from './sync/syncService';
import { SyncInfo, SyncOptions } from './types/sync';
import { DebugInfo } from './types/debug';
// √öJ: Cleanup scheduler import
import { cleanupScheduler } from './jobs/CleanupScheduler';
// √öJ: StorageMetrics import
import { StorageMetrics, DetailedStorageStats } from './services/StorageMetrics';

/**
 * Az adatterulet t√≠pusa
 */
export enum DataArea {
  CACHE = 'cache', // Gyors, r√∂vid √©lettartam√∫ cache
  STORAGE = 'storage', // Perzisztens t√°rol√°s
  LOCAL_STORAGE = 'local', // K√∂zvetlen localStorage el√©r√©s
}

/**
 * Ter√ºletspecifikus opci√≥k t√≠pusa
 */
export type AreaSpecificOptions =
  | { area: DataArea.CACHE; options: CacheOptions }
  | { area: DataArea.STORAGE; options: StorageOptions }
  | { area: DataArea.LOCAL_STORAGE; options: LocalStorageOptions };

/**
 * √öJ: Inicializ√°l√°si √°llapot nyomon k√∂vet√©se
 * ‚úÖ JAV√çTOTT: R√©szletesebb inicializ√°l√°si st√°tusz
 */
let isInitialized = false;
let isInitializing = false;
let initializePromise: Promise<void> | null = null; // ‚úÖ KRITIKUS JAV√çT√ÅS: Promise cache

// ‚úÖ JAV√çT√ÅS: Performance memory interface
declare global {
  interface Performance {
    memory?: {
      usedJSHeapSize: number;
      totalJSHeapSize: number;
      jsHeapSizeLimit: number;
    };
  }
}

/**
 * Egys√©ges adatkezel≈ë oszt√°ly
 *
 * K√∂zponti bel√©p√©si pont minden adatel√©r√©shez:
 * - Gyors√≠t√≥t√°r adatok (cache)
 * - Hossz√∫ t√°v√∫ t√°rol√°s (storage)
 * - K√∂zvetlen localStorage el√©r√©s
 * - Automatikus 24 √≥r√°s cleanup
 */
export class DataManager {
  private static instance: DataManager;

  private storageAdapter: StorageAdapter;
  private localStorageAdapter: LocalStorageAdapter;
  private apiClient: ApiClient; // ‚úÖ JAV√çT√ÅS: M√°r nem nullable
  private syncService: SyncService | null = null;

  // ‚úÖ √öJ: Memory monitoring √©s performance tracking
  private performanceMetrics = {
    operationCount: 0,
    totalOperationTime: 0,
    slowOperations: [] as Array<{ operation: string; duration: number; timestamp: number }>,
    memorySnapshots: [] as Array<{ timestamp: number; used: number; total: number }>,
    lastMemoryCheck: Date.now(),
  };

  // üöÄ √öJ: Be√°ll√≠t√°sok mem√≥ria cache optimaliz√°ci√≥
  private settingsCache = new Map<string, { value: any; timestamp: number }>();
  private readonly SETTINGS_CACHE_TTL = 5 * 60 * 1000; // 5 perc
  
  // üéØ Speci√°lis cache a user_darkMode sz√°m√°ra (ultra gyors hozz√°f√©r√©s)
  private darkModeCache: { value: boolean; timestamp: number } | null = null;
  private readonly DARK_MODE_CACHE_TTL = 10 * 60 * 1000; // 10 perc
  
  // üéØ Speci√°lis cache a user_showHorizontalScroller sz√°m√°ra
  private horizontalScrollerCache: { value: boolean; timestamp: number } | null = null;
  private readonly HORIZONTAL_SCROLLER_CACHE_TTL = 15 * 60 * 1000; // 15 perc
  
  // üéØ Kritikus be√°ll√≠t√°sok el≈ëre bet√∂lt√©shez
  private readonly preloadCriticalSettings = [
    'user_darkMode',
    'user_fontSize', 
    'user_language',
    'user_theme',
    'user_showHorizontalScroller', // ‚ö†Ô∏è M√©g haszn√°lva - optimaliz√°l√°s sz√ºks√©ges!
    'user_itemsPerPage',
    'user_maxAgeHours',
  ];

  private constructor() {
    // Adapterek inicializ√°l√°sa
    this.storageAdapter = new StorageAdapter();
    this.localStorageAdapter = new LocalStorageAdapter();

    // ‚úÖ JAV√çT√ÅS: API kliens nem nullable
    this.apiClient = new ApiClient();
  }

  /**
   * DataManager singleton p√©ld√°ny lek√©r√©se
   */
  public static getInstance(): DataManager {
    if (!DataManager.instance) {
      DataManager.instance = new DataManager();
    }
    return DataManager.instance;
  }

  /**
   * Inicializ√°lja az adaptereket √©s a szinkroniz√°ci√≥t
   * ‚úÖ JAV√çTOTT duplik√°ci√≥-mentes inicializ√°l√°s + Promise cache
   */
  public async initialize(): Promise<void> {
    // ‚úÖ KRITIKUS JAV√çT√ÅS: Ha m√°r inicializ√°lva, azonnal return
    if (isInitialized) {
      console.log('[DataManager] M√°r inicializ√°lva, kihagy√°s');
      return;
    }

    // ‚úÖ KRITIKUS JAV√çT√ÅS: Ha inicializ√°l√°s folyamatban, v√°rjuk meg ugyanazt a Promise-t
    if (isInitializing && initializePromise) {
      console.log('[DataManager] Inicializ√°l√°s folyamatban, v√°rakoz√°s...');
      return initializePromise;
    }

    // ‚úÖ √öJ: Promise cache l√©trehoz√°sa - ez akad√°lyozza meg a 6x duplik√°lt h√≠v√°st
    isInitializing = true;
    initializePromise = this._doInitialize();

    try {
      await initializePromise;
    } finally {
      isInitializing = false;
      initializePromise = null;
    }
  }

  /**
   * ‚úÖ √öJ: T√©nyleges inicializ√°l√°si logika k√ºl√∂n met√≥dusban
   */
  private async _doInitialize(): Promise<void> {
    console.log('[DataManager] Egyetlen inicializ√°l√°s elkezd√©se...');

    // ‚úÖ √öJ: Performance monitoring ind√≠t√°sa
    this.startPerformanceMonitoring();
    this.trackMemoryUsage(); // Initial memory check

    // StorageAdapter inicializ√°l√°sa
    await this.storageAdapter.initialize();
    console.log('[DataManager] StorageAdapter initialized.');

    // ‚úÖ JAV√çT√ÅS: SyncService inicializ√°l√°sa - apiClient m√°r nem nullable
    if (!this.syncService) {
      this.syncService = new SyncService(
        this.apiClient, // Most m√°r nem null
        this.storageAdapter.getIndexedDBService(),
        () => this.onSyncComplete(),
      );
      console.log('[DataManager] SyncService initialized.');
    }

    // √öJ: Automatikus cleanup scheduler ind√≠t√°sa
    cleanupScheduler.start();
    console.log('[DataManager] 24 √≥r√°s cleanup scheduler elind√≠tva');

    // Ha online, ind√≠tsunk egy szinkroniz√°ci√≥t
    if (navigator.onLine) {
      this.syncService?.scheduleSyncWithDelay(1000); // Optional chaining
    }

    // Esem√©nyfigyel≈ëk
    window.addEventListener('online', () => {
      console.log('Online √°llapot - szinkroniz√°l√°s ind√≠t√°sa');
      this.syncService?.synchronize(); // Optional chaining
    });

    // √öJ: beforeunload esem√©ny - cleanup le√°ll√≠t√°sa
    window.addEventListener('beforeunload', () => {
      cleanupScheduler.stop();
    });

    isInitialized = true; // ‚úÖ JAV√çT√ÅS: Itt √°ll√≠tjuk be, hogy befejezett
    console.log('[DataManager] Inicializ√°l√°s sikeresen befejezve - SINGLETON MEGER≈êS√çTVE');
  }

  /**
   * Szinkroniz√°ci√≥ ind√≠t√°sa
   * √Åthelyezve a StorageManager oszt√°lyb√≥l
   *
   * @param options - Opcion√°lis szinkroniz√°ci√≥s be√°ll√≠t√°sok
   * @returns Promise<boolean> - Sikeres volt-e a szinkroniz√°ci√≥
   */
  public async syncNow(options?: SyncOptions): Promise<boolean> {
    if (!this.syncService) {
      console.warn('SyncService is not initialized. Call DataManager.initialize() first.');
      return false;
    }
    // Ha vannak opci√≥k, adjuk √°t azokat a synchronize() met√≥dusnak
    // Ha nincsenek, egyszer≈±en h√≠vjuk a synchronize() met√≥dust param√©ter n√©lk√ºl
    const result = options
      ? await this.syncService.synchronize(options)
      : await this.syncService.synchronize();

    return result.success;
  }

  /**
   * Szinkroniz√°ci√≥ ut√°n megh√≠vott callback
   * √Åthelyezve a StorageManager oszt√°lyb√≥l
   */
  private onSyncComplete(): void {
    // √ârtes√≠thetj√ºk a hookot, hogy friss√≠tse az √°llapotot
  }

  /**
   * Szinkroniz√°ci√≥s inform√°ci√≥k lek√©r√©se
   * √Åthelyezve a StorageManager oszt√°lyb√≥l
   */
  public async getSyncInfo(): Promise<SyncInfo> {
    if (!this.syncService) {
      console.warn('SyncService is not initialized. Returning default SyncInfo.');
      // Ellen≈ërizd a SyncInfo t√≠pust a c:\\news\\src\\utils\\datamanager\\types\\sync.ts f√°jlban
      // hogy ezek a mez≈ëk megfelelnek-e.
      return {
        lastSyncTimestamp: null,
        pendingCount: 0,
        isSyncing: false,
        lastSuccess: 0, // M√≥dos√≠tva null-r√≥l 0-ra, hogy megfeleljen a number t√≠pusnak
        error: 'SyncService not initialized',
      } as SyncInfo;
    }
    return await this.syncService.getSyncInfo();
  }

  /**
   * Debug inform√°ci√≥k √∂sszegy≈±jt√©se
   * √Åthelyezve a StorageManager oszt√°lyb√≥l
   */
  public async getDebugInfo(): Promise<DebugInfo> {
    const localState = await this.localStorageAdapter.loadLocalState();

    // √öJ: R√©szletes storage statisztik√°k lek√©r√©se StorageMetrics seg√≠ts√©g√©vel
    let dbStats;
    try {
      dbStats = await StorageMetrics.getDetailedStats();
    } catch (error) {
      console.warn('Failed to get detailed storage stats:', error);
      dbStats = { error: 'Storage stats unavailable' };
    }

    let syncInfoData: SyncInfo;
    if (this.syncService) {
      syncInfoData = await this.syncService.getSyncInfo();
    } else {
      // Ellen≈ërizd a SyncInfo t√≠pust a c:\\news\\src\\utils\\datamanager\\types\\sync.ts f√°jlban
      syncInfoData = {
        lastSyncTimestamp: null,
        pendingCount: 0,
        isSyncing: false,
        lastSuccess: 0, // M√≥dos√≠tva null-r√≥l 0-ra, hogy megfeleljen a number t√≠pusnak
        error: 'SyncService not initialized',
      } as SyncInfo;
    }

    // √öJ: Storage quota √©s cleanup info hozz√°ad√°sa
    let quotaInfo;
    let cleanupStatus;
    try {
      quotaInfo = await StorageMetrics.getStorageQuota();
      cleanupStatus = this.getCleanupStatus();
    } catch (error) {
      console.warn('Failed to get quota/cleanup info:', error);
      quotaInfo = { used: 0, quota: 0, usagePercentage: 0 };
      cleanupStatus = { isRunning: false, nextCleanup: 0 };
    }

    return {
      localState,
      dbStats,
      syncInfo: syncInfoData,
      deviceId: localStorage.getItem('device-id'),
      timestamp: Date.now(),
      // √öJ: Kieg√©sz√≠t≈ë debug inform√°ci√≥k
      quotaInfo,
      cleanupStatus,
    };
  }

  /**
   * Elt√°rolja, hogy melyik adapter mely ter√ºlethez tartozik
   */
  private getAdapter(area: DataArea) {
    switch (area) {
      case DataArea.CACHE:
        // CACHE ter√ºlethez haszn√°ljuk a StorageAdapter-t (cache funkci√≥kkal)
        return this.storageAdapter;
      case DataArea.STORAGE:
        return this.storageAdapter;
      case DataArea.LOCAL_STORAGE:
        return this.localStorageAdapter;
      default:
        throw new Error(`Ismeretlen t√°rol√°si ter√ºlet: ${area}`);
    }
  }

  /**
   * ‚úÖ JAV√çTOTT: Egyszer≈±s√≠tett met√≥dusok - EGYETLEN implement√°ci√≥ t√≠pusonk√©nt
   */

  // Adat lek√©r√©se
  async get<T>(
    area: DataArea,
    key: string,
    options: Record<string, unknown> = {},
  ): Promise<T | null> {
    return this.trackOperation(async () => {
      // üöÄ CACHE OPTIMALIZ√ÅCI√ì: localStorage be√°ll√≠t√°sok gyors el√©r√©se
      if (area === DataArea.LOCAL_STORAGE) {
        // 1. Mem√≥ria cache ellen≈ërz√©s
        const cached = this.settingsCache.get(key);
        if (cached && Date.now() - cached.timestamp < this.SETTINGS_CACHE_TTL) {
          console.log(`[DataManager] ‚ö° Cache hit: ${key} (${Date.now() - cached.timestamp}ms r√©gi)`);
          return cached.value as T;
        }
        
        // 2. Eredeti lek√©r√©s
        const result = await this.localStorageAdapter.get<T>(key, options as LocalStorageOptions);
        
        // 3. Cache ment√©s (csak ha van √©rt√©k)
        if (result !== null) {
          this.settingsCache.set(key, { value: result, timestamp: Date.now() });
          
          // Cache m√©ret korl√°toz√°s (LRU-szer≈±)
          if (this.settingsCache.size > 20) {
            const firstKey = this.settingsCache.keys().next().value;
            if (firstKey) {
              this.settingsCache.delete(firstKey);
            }
          }
        }
        
        return result;
      }
      
      // Eredeti logika m√°s ter√ºletekhez
      switch (area) {
        case DataArea.CACHE:
        case DataArea.STORAGE:
          return this.storageAdapter.get<T>(key, options as { storeName?: string });
        default:
          throw new Error(`Ismeretlen t√°rol√°si ter√ºlet: ${area}`);
      }
    }, `get(${area}, ${key})`);
  }

  // Adat ment√©se
  async set<T>(
    area: DataArea,
    key: string,
    value: T,
    options: Record<string, unknown> = {},
  ): Promise<boolean> {
    return this.trackOperation(async () => {
      let result: boolean;
      
      switch (area) {
        case DataArea.CACHE:
        case DataArea.STORAGE:
          result = await this.storageAdapter.set<T>(key, value, options as { storeName?: string });
          break;
        case DataArea.LOCAL_STORAGE:
          result = await this.localStorageAdapter.set<T>(key, value, options as LocalStorageOptions);
          
          // üîÑ Cache friss√≠t√©s localStorage ment√©s ut√°n
          if (result) {
            this.settingsCache.set(key, { value, timestamp: Date.now() });
            
            // Speci√°lis cache friss√≠t√©sek
            if (key === 'user_darkMode') {
              this.darkModeCache = { value: value as boolean, timestamp: Date.now() };
            }
            if (key === 'user_showHorizontalScroller') {
              this.horizontalScrollerCache = { value: value as boolean, timestamp: Date.now() };
            }
          }
          break;
        default:
          throw new Error(`Ismeretlen t√°rol√°si ter√ºlet: ${area}`);
      }
      
      return result;
    }, `set(${area}, ${key})`);
  }

  // Adat t√∂rl√©se
  async delete(
    area: DataArea,
    key: string,
    options: Record<string, unknown> = {},
  ): Promise<boolean> {
    return this.trackOperation(async () => {
      switch (area) {
        case DataArea.CACHE:
        case DataArea.STORAGE:
          // ‚úÖ JAV√çT√ÅS: storageAdapter.delete csak 1 param√©tert v√°r
          return this.storageAdapter.delete(key);
        case DataArea.LOCAL_STORAGE:
          return this.localStorageAdapter.delete(key, options as LocalStorageOptions);
        default:
          throw new Error(`Ismeretlen t√°rol√°si ter√ºlet: ${area}`);
      }
    }, `delete(${area}, ${key})`);
  }

  /**
   * StorageAdapter p√©ld√°ny lek√©r√©se
   * Ez sz√ºks√©ges p√©ld√°ul a tab tartalmak k√∂zvetlen kezel√©s√©hez
   */
  public getStorageAdapter(): StorageAdapter {
    return this.storageAdapter;
  }

  // √öJ: Gyors el√©r√©si m√≥dszerek cache-hez
  async getFromCache<T>(key: string): Promise<T | null> {
    return this.get<T>(DataArea.CACHE, key);
  }

  async saveToCache<T>(key: string, value: T, ttl?: number): Promise<boolean> {
    return this.set<T>(DataArea.CACHE, key, value, { ttl });
  }

  async removeFromCache(key: string): Promise<boolean> {
    return this.delete(DataArea.CACHE, key);
  }

  // √öJ: Gyors el√©r√©si m√≥dszerek storage-hoz
  async getFromStorage<T>(key: string): Promise<T | null> {
    return this.get<T>(DataArea.STORAGE, key);
  }

  async saveToStorage<T>(key: string, value: T): Promise<boolean> {
    return this.set<T>(DataArea.STORAGE, key, value);
  }

  async removeFromStorage(key: string): Promise<boolean> {
    return this.delete(DataArea.STORAGE, key);
  }

  // üåô √öJ: Speci√°lis dark mode optimaliz√°ci√≥ (ultra-gyors el√©r√©s)
  async getDarkMode(): Promise<boolean> {
    if (this.darkModeCache && Date.now() - this.darkModeCache.timestamp < this.DARK_MODE_CACHE_TTL) {
      return this.darkModeCache.value;
    }
    
    const result = await this.get<boolean>(DataArea.LOCAL_STORAGE, 'user_darkMode');
    this.darkModeCache = { value: result ?? false, timestamp: Date.now() };
    return result ?? false;
  }

  // üìú Ultra gyors horizontal scroller lek√©r√©s (k√ºl√∂n cache-szel)
  async getHorizontalScroller(): Promise<boolean> {
    if (this.horizontalScrollerCache && Date.now() - this.horizontalScrollerCache.timestamp < this.HORIZONTAL_SCROLLER_CACHE_TTL) {
      return this.horizontalScrollerCache.value;
    }
    
    const result = await this.get<boolean>(DataArea.LOCAL_STORAGE, 'user_showHorizontalScroller');
    this.horizontalScrollerCache = { value: result ?? false, timestamp: Date.now() };
    return result ?? false;
  }

  // üåô Dark mode ment√©s cache friss√≠t√©ssel
  async setDarkMode(darkMode: boolean): Promise<boolean> {
    const success = await this.set<boolean>(DataArea.LOCAL_STORAGE, 'user_darkMode', darkMode);
    
    if (success) {
      // Cache friss√≠t√©s
      this.darkModeCache = { value: darkMode, timestamp: Date.now() };
      console.log(`[DataManager] üåô Dark mode mentve √©s cache friss√≠tve: ${darkMode}`);
    }
    
    return success;
  }

  // üóëÔ∏è Cache invalid√°l√°s (sz√ºks√©g eset√©n)
  invalidateSettingsCache(key?: string): void {
    if (key) {
      this.settingsCache.delete(key);
      if (key === 'user_darkMode') {
        this.darkModeCache = null;
      }
      if (key === 'user_showHorizontalScroller') {
        this.horizontalScrollerCache = null;
      }
      console.log(`[DataManager] üóëÔ∏è Cache invalid√°lva: ${key}`);
    } else {
      this.settingsCache.clear();
      this.darkModeCache = null;
      this.horizontalScrollerCache = null;
      console.log(`[DataManager] üóëÔ∏è √ñsszes be√°ll√≠t√°s cache t√∂r√∂lve`);
    }
  }

  // √öJ: Storage kulcsok list√°z√°sa
  async getAllStorageKeys(): Promise<string[]> {
    return this.storageAdapter.getAllKeys();
  }

  /**
   * √öJ: Manu√°lis cleanup futtat√°sa
   */
  public async runCleanup(): Promise<void> {
    await cleanupScheduler.runManualCleanup();
  }

  /**
   * √öJ: Cleanup st√°tusz lek√©r√©se
   */
  public getCleanupStatus(): { isRunning: boolean; nextCleanup: number } {
    return cleanupScheduler.getStatus();
  }

  /**
   * √öJ: R√©szletes storage statisztik√°k lek√©r√©se
   */
  public async getDetailedStorageStats(): Promise<DetailedStorageStats> {
    return StorageMetrics.getDetailedStats();
  }

  /**
   * √öJ: Storage kv√≥ta inform√°ci√≥k lek√©r√©se
   */
  public async getStorageQuotaInfo(): Promise<{
    used: number;
    quota: number;
    usagePercentage: number;
  }> {
    return StorageMetrics.getStorageQuota();
  }

  /**
   * √öJ: Storage ter√ºlet elemz√©se
   */
  public async analyzeStorageUsage(): Promise<{
    criticalLevel: boolean;
    recommendations: string[];
    breakdown: Record<string, unknown>;
  }> {
    return StorageMetrics.analyzeUsage();
  }

  // √öJ: Gyors el√©r√©si m√≥dszerek localStorage-hoz (wrapper)
  async getFromLocalStorage<T>(key: string): Promise<T | null> {
    return this.get<T>(DataArea.LOCAL_STORAGE, key);
  }

  async saveToLocalStorage<T>(key: string, value: T): Promise<boolean> {
    return this.set<T>(DataArea.LOCAL_STORAGE, key, value);
  }

  async removeFromLocalStorage(key: string): Promise<boolean> {
    return this.delete(DataArea.LOCAL_STORAGE, key);
  }

  // √öJ: Kompatibilit√°si met√≥dusok a r√©gi localStorage.getItem/setItem helyettes√≠t√©s√©re
  async getItem<T>(key: string): Promise<T | null> {
    return this.getFromLocalStorage<T>(key);
  }

  async setItem<T>(key: string, value: T): Promise<boolean> {
    return this.saveToLocalStorage<T>(key, value);
  }

  async removeItem(key: string): Promise<boolean> {
    return this.removeFromLocalStorage(key);
  }

  /**
   * ‚úÖ √öJ: Memory usage monitoring √©s leak detection
   */
  private trackMemoryUsage(): void {
    if (performance.memory) {
      const used = Math.round(performance.memory.usedJSHeapSize / 1024 / 1024);
      const total = Math.round(performance.memory.totalJSHeapSize / 1024 / 1024);
      const limit = Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024);

      // Store snapshot
      this.performanceMetrics.memorySnapshots.push({
        timestamp: Date.now(),
        used,
        total,
      });

      // Keep only last 100 snapshots
      if (this.performanceMetrics.memorySnapshots.length > 100) {
        this.performanceMetrics.memorySnapshots.shift();
      }

      // Critical memory warnings
      const usagePercentage = (used / limit) * 100;
      if (usagePercentage > 80) {
        console.error(
          `[DataManager] üö® KRITIKUS MEM√ìRIAHASZN√ÅLAT: ${used}MB/${limit}MB (${usagePercentage.toFixed(1)}%)`,
        );
      } else if (usagePercentage > 60) {
        console.warn(
          `[DataManager] ‚ö†Ô∏è MAGAS MEM√ìRIAHASZN√ÅLAT: ${used}MB/${limit}MB (${usagePercentage.toFixed(1)}%)`,
        );
      }

      // Memory leak detection - check for continuous growth
      if (this.performanceMetrics.memorySnapshots.length >= 10) {
        const recent = this.performanceMetrics.memorySnapshots.slice(-10);
        const growthRate = (recent[recent.length - 1].used - recent[0].used) / recent.length;

        if (growthRate > 5) {
          // More than 5MB growth per snapshot
          console.warn(
            `[DataManager] üîç MEMORY LEAK GYAN√ö: ${growthRate.toFixed(1)}MB/snapshot n√∂veked√©s`,
          );
        }
      }

      this.performanceMetrics.lastMemoryCheck = Date.now();
    }
  }

  /**
   * ‚úÖ √öJ: Operation performance tracking
   */
  private trackOperation<T>(operation: () => Promise<T>, operationName: string): Promise<T> {
    const startTime = performance.now();
    this.performanceMetrics.operationCount++;

    return operation()
      .then((result) => {
        const duration = performance.now() - startTime;
        this.performanceMetrics.totalOperationTime += duration;

        // Track slow operations
        if (duration > 100) {
          // Operations slower than 100ms
          this.performanceMetrics.slowOperations.push({
            operation: operationName,
            duration,
            timestamp: Date.now(),
          });

          console.warn(
            `[DataManager] üêå LASS√ö M≈∞VELET: ${operationName} - ${duration.toFixed(2)}ms`,
          );

          // Keep only last 50 slow operations
          if (this.performanceMetrics.slowOperations.length > 50) {
            this.performanceMetrics.slowOperations.shift();
          }
        }

        return result;
      })
      .catch((error) => {
        const duration = performance.now() - startTime;
        console.error(
          `[DataManager] ‚ùå M≈∞VELET HIBA: ${operationName} - ${duration.toFixed(2)}ms`,
          error,
        );
        throw error;
      });
  }

  /**
   * ‚úÖ √öJ: Performance monitoring timer
   */
  private startPerformanceMonitoring(): void {
    // Memory monitoring every 2 minutes
    setInterval(
      () => {
        this.trackMemoryUsage();
      },
      2 * 60 * 1000,
    );

    // Performance summary every 10 minutes
    setInterval(
      () => {
        this.logPerformanceSummary();
      },
      10 * 60 * 1000,
    );
  }

  /**
   * ‚úÖ √öJ: Performance summary logging
   */
  private logPerformanceSummary(): void {
    const avgOperationTime =
      this.performanceMetrics.operationCount > 0
        ? this.performanceMetrics.totalOperationTime / this.performanceMetrics.operationCount
        : 0;

    const recentSlowOps = this.performanceMetrics.slowOperations.filter(
      (op) => Date.now() - op.timestamp < 10 * 60 * 1000, // Last 10 minutes
    );

    console.log(`[DataManager] üìä Performance Summary:
    - Operations: ${this.performanceMetrics.operationCount}
    - Avg Time: ${avgOperationTime.toFixed(2)}ms
    - Slow Ops (10min): ${recentSlowOps.length}
    - Memory Checks: ${this.performanceMetrics.memorySnapshots.length}`);

    if (recentSlowOps.length > 0) {
      console.warn(
        `[DataManager] ‚ö†Ô∏è Recent slow operations:`,
        recentSlowOps.slice(-5).map((op) => `${op.operation}: ${op.duration.toFixed(2)}ms`),
      );
    }
  }

  /**
   * ‚úÖ √öJ: Performance diagnostics lek√©r√©se
   */
  public getPerformanceDiagnostics(): {
    operationCount: number;
    avgOperationTime: number;
    slowOperationsCount: number;
    memoryUsage: { used: number; total: number; percentage: number } | null;
    recentSlowOps: Array<{ operation: string; duration: number; timestamp: number }>;
    healthStatus: 'KIV√ÅL√ì' | 'J√ì' | 'K√ñZEPES' | 'GYENGE';
  } {
    const avgTime =
      this.performanceMetrics.operationCount > 0
        ? this.performanceMetrics.totalOperationTime / this.performanceMetrics.operationCount
        : 0;

    const recentSlowOps = this.performanceMetrics.slowOperations.filter(
      (op) => Date.now() - op.timestamp < 10 * 60 * 1000,
    );

    let memoryUsage = null;
    if (performance.memory) {
      const used = Math.round(performance.memory.usedJSHeapSize / 1024 / 1024);
      const total = Math.round(performance.memory.totalJSHeapSize / 1024 / 1024);
      memoryUsage = {
        used,
        total,
        percentage: (used / total) * 100,
      };
    }

    // Health status calculation
    let healthStatus: 'KIV√ÅL√ì' | 'J√ì' | 'K√ñZEPES' | 'GYENGE' = 'KIV√ÅL√ì';
    if (avgTime > 100 || recentSlowOps.length > 5) healthStatus = 'GYENGE';
    else if (avgTime > 50 || recentSlowOps.length > 2) healthStatus = 'K√ñZEPES';
    else if (avgTime > 20 || recentSlowOps.length > 0) healthStatus = 'J√ì';

    return {
      operationCount: this.performanceMetrics.operationCount,
      avgOperationTime: avgTime,
      slowOperationsCount: this.performanceMetrics.slowOperations.length,
      memoryUsage,
      recentSlowOps: recentSlowOps.slice(-5),
      healthStatus,
    };
  }
}
