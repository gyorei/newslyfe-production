import React, { useState, useEffect, useRef } from 'react';
import AdSenseUnit from './AdSenseUnit';
import { useIntersectionObserver } from './useIntersectionObserver';
import { AD_CLIENT } from '../adConfig';
import styles from './AdSenseLayout.module.css';

interface AdSenseLayoutProps {
  slotId: string;
  clientId?: string;
  format?: string;
  style?: React.CSSProperties;
  responsive?: boolean;
  showBadge?: boolean;
  badgeLabel?: string;
  debug?: boolean;
  fallback?: React.ReactNode;
  // ========================================
  // üíº B≈êV√çTETT PROPS - VIDE√ìHOZ HASONL√ìAN
  // ========================================
  title?: string;
  description?: string;
  imageUrl?: string;
  advertiser?: string;
  clickUrl?: string;
  // ‚úÖ √öJ: Tabv√°lt√°si optimaliz√°ci√≥ param√©terek
  activeTabId?: string;
  tabMode?: string;
  // ‚úÖ √öJ: T√©ma sz√≠n param√©ter a vizu√°lis azonosul√°shoz
  themeColor?: string;
}

/**
 * Kontrasztos sz√∂vegsz√≠n meghat√°roz√°sa egy h√°tt√©rsz√≠nhez
 * S√∂t√©t h√°tt√©rhez vil√°gos sz√∂veget, vil√°gos h√°tt√©rhez s√∂t√©t sz√∂veget ad
 */
const getContrastColor = (hexColor: string = '#ffe066'): string => {
  try {
    // Alap√©rtelmezett sz√≠n, ha √©rv√©nytelen a bemenet
    if (!hexColor || hexColor.length < 7) return '#222222';
    
    // Hex sz√≠nk√≥d √°talak√≠t√°sa RGB √©rt√©kekk√©
    const r = parseInt(hexColor.slice(1, 3), 16);
    const g = parseInt(hexColor.slice(3, 5), 16);
    const b = parseInt(hexColor.slice(5, 7), 16);
    
    // Vil√°goss√°g kisz√°m√≠t√°sa (W3C k√©plet)
    const brightness = (r * 299 + g * 587 + b * 114) / 1000;
    
    // S√∂t√©t h√°tt√©ren feh√©r, vil√°gos h√°tt√©ren fekete sz√∂veg
    return brightness > 128 ? '#222222' : '#ffffff';
  } catch (error) {
    console.error('[AdSenseLayout] Hiba a kontrasztos sz√≠n sz√°m√≠t√°sakor:', error);
    return '#222222';
  }
};

/**
 * Egys√©ges AdSense wrapper: badge, margin, debug, fallback, szab√°lyos markup.
 * Most m√°r csak akkor t√∂lti be az AdSenseUnit-ot, ha l√°that√≥ a viewportban (IntersectionObserver).
 * ‚úÖ Friss√≠tve a VideoAdCard mint√°j√°ra, fejlettebb megjelen√≠t√©ssel.
 * ‚úÖ √öJ: T√°mogatja a villan√°s-mentes tabv√°lt√°st √©s fokozatos bet√∂lt√©st
 * ‚úÖ √öJ: T√°mogatja a t√©ma sz√≠nnel val√≥ azonosul√°st
 */
export const AdSenseLayout: React.FC<AdSenseLayoutProps> = ({
  slotId,
  clientId = AD_CLIENT,
  format = 'auto',
  style,
  responsive = true,
  showBadge = true,
  badgeLabel = 'üíº Hirdet√©s',
  debug = false,
  fallback = null,
  // ========================================
  // üíº B≈êV√çTETT PROPS HASZN√ÅLATA
  // ========================================
  title = "Discover the best content!",
  description = "Check out our latest offers.",
  imageUrl = "/assets/ad-placeholder.jpg",
  advertiser = "NewsReader Partner",
  clickUrl = "https://example.com/promo",
  // ‚úÖ √öJ: Tabv√°lt√°si optimaliz√°ci√≥ param√©terek
  activeTabId,
  tabMode = 'news',
  // ‚úÖ √öJ: T√©ma sz√≠n param√©ter
  themeColor = '#ffe066', // Alap√©rtelmezett s√°rga sz√≠n
}) => {
  const [containerRef, isVisible] = useIntersectionObserver<HTMLDivElement>({ threshold: 0.25 });
  
  // ========================================
  // üíº ENVIRONMENT ELLEN≈êRZ√âS - GOOGLE SZAB√ÅLYOK!
  // ========================================
  const isProduction = process.env.NODE_ENV === 'production';
  const shouldShowAdSense = isProduction && slotId && clientId;

  // ‚úÖ √öJ: Fokozatos bet√∂lt√©s √°llapotok
  const [isContentVisible, setIsContentVisible] = useState(false);
  const [isLoaded, setIsLoaded] = useState(false);
  const loadTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const prevTabIdRef = useRef<string | undefined>(activeTabId);

  // ‚úÖ √öJ: Tabv√°lt√°s detekt√°l√°sa √©s √°tmenet kezel√©se
  useEffect(() => {
    // Ha v√°ltozott a tab ID, resetelj√ºk a l√°that√≥s√°got
    if (activeTabId !== prevTabIdRef.current) {
      // El≈ësz√∂r elrejtj√ºk a tartalmat
      setIsContentVisible(false);
      
      // T√∂r√∂lj√ºk a kor√°bbi id≈ëz√≠t≈ët, ha volt
      if (loadTimeoutRef.current) {
        clearTimeout(loadTimeoutRef.current);
      }
      
      // Be√°ll√≠tunk egy √∫j id≈ëz√≠t≈ët a fokozatos megjelen√≠t√©shez
      loadTimeoutRef.current = setTimeout(() => {
        setIsContentVisible(true);
        console.log(`[AdSenseLayout] üé≠ Rekl√°m megjelen√≠t√©se tab v√°lt√°s ut√°n: ${activeTabId}-${tabMode}`);
      }, 100); // Kis k√©sleltet√©s a tabv√°lt√°s ut√°n
      
      // Friss√≠tj√ºk a referenci√°t
      prevTabIdRef.current = activeTabId;
    }
    
    return () => {
      // Tiszt√≠t√°s unmount-kor
      if (loadTimeoutRef.current) {
        clearTimeout(loadTimeoutRef.current);
      }
    };
  }, [activeTabId, tabMode]);

  // ‚úÖ √öJ: Bet√∂lt√©si √°llapot kezel√©se
  useEffect(() => {
    // Els≈ë bet√∂lt√©skor k√©sleltetve megjelen√≠tj√ºk a tartalmat
    if (!isLoaded) {
      loadTimeoutRef.current = setTimeout(() => {
        setIsContentVisible(true);
        setIsLoaded(true);
        console.log(`[AdSenseLayout] üé≠ Rekl√°m els≈ë bet√∂lt√©se k√©sz`);
      }, 100);
    }
    
    return () => {
      if (loadTimeoutRef.current) {
        clearTimeout(loadTimeoutRef.current);
      }
    };
  }, []);

  const handleClick = () => {
    if (clickUrl && !shouldShowAdSense) {
      window.open(clickUrl, '_blank', 'noopener,noreferrer');
    }
  };

  // ‚úÖ √öJ: Fokozatos √°tmenet st√≠lusok
  const contentStyle: React.CSSProperties = {
    opacity: isContentVisible ? 1 : 0,
    transition: 'opacity 0.2s ease-in-out',
    height: '100%',
    width: '100%',
    position: 'relative'
  };
  
  // ‚úÖ √öJ: T√©ma-alap√∫ st√≠lusok
  const badgeStyle: React.CSSProperties = {
    backgroundColor: themeColor,
    color: getContrastColor(themeColor),
  };
  
  const containerStyle: React.CSSProperties = {
    ...style,
    boxShadow: `0 4px 16px ${themeColor}30`, // 30% √°tl√°tsz√≥s√°g a t√©masz√≠nnel
    borderTop: `3px solid ${themeColor}`,
  };
  
  const titleStyle: React.CSSProperties = {
    color: '#333333',
    borderLeft: `3px solid ${themeColor}`,
    paddingLeft: '8px',
  };
  
  const advertiserStyle: React.CSSProperties = {
    color: themeColor !== '#ffffff' ? themeColor : '#666666',
    fontWeight: 500,
  };

  return (
    <div
      ref={containerRef}
      className={styles.adSenseLayout}
      onClick={handleClick}
      role="region"
      aria-label={badgeLabel || 'Ad'}
      style={containerStyle}
    >
      <div style={contentStyle}>
        {showBadge && (
          <span className={styles.adBadge} style={badgeStyle}>{badgeLabel}</span>
        )}
        
        {/* ========================================
         * üíº AD SENSE UNIT - GOOGLE SZAB√ÅLYOK!
         * ======================================== */}
        {isVisible && shouldShowAdSense && import.meta.env.VITE_ADSENSE_ENABLED !== 'false' ? (
          <div className={styles.adSenseContainer}>
            <AdSenseUnit
              slotId={slotId}
              clientId={clientId}
              format={format}
              responsive={responsive}
              style={{ 
                minHeight: 250, 
                border: 'none', 
                background: 'transparent',
                width: '100%'
              }}
            />
          </div>
        ) : (
          /* ========================================
           * üíº FALLBACK CONTENT - FEJLESZT≈êI M√ìD
           * ======================================== */
          <>
            {imageUrl && (
              <img src={imageUrl} alt={title} className={styles.adImage} />
            )}
            <div className={styles.adContent}>
              <h4 className={styles.adTitle} style={titleStyle}>{title}</h4>
              <p className={styles.adDescription}>{description}</p>
              <span className={styles.adAdvertiser} style={advertiserStyle}>{advertiser}</span>
              {debug && (
                <div className={styles.adDebug}>
                  <p>Debug: Slot ID: {slotId}</p>
                  <p>Debug: Client ID: {clientId}</p>
                  <p>Debug: Theme: {themeColor}</p>
                </div>
              )}
            </div>
          </>
        )}
        {fallback}
      </div>
    </div>
  );
};

export default AdSenseLayout;