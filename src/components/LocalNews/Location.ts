/**
 * Lokaliz√°ci√≥s Szolg√°ltat√°s (localizationService.ts)
 *
 * üîß REFAKTOR√ÅL√ÅSI JAVASLATOK - TISZT√çT√ÅS UT√ÅN:
 * ‚úÖ MEGTARTVA: Country mappingek, utility funkci√≥k, cache kezel√©s
 * üóëÔ∏è T√ñR√ñLVE: IP funkci√≥k, √ºres objektumok, duplik√°lt interf√©szek, wrapper met√≥dusok
 * üì¶ K√ñLT√ñZTETEND≈ê: Country mappingek ‚Üí config/countryMappings.ts
 */

// Importok jav√≠t√°sa - relat√≠v √∫tvonalak a src mapp√°hoz k√©pest
import { NewsSource } from '../../types';
import { locationProvider } from './location/LocationProvider';
import { LocationData } from './location/types'; // ‚úÖ JAV√çT√ÅS: Helyes t√≠pus import√°l√°sa
import {
  countryMapping,
  countryNormalizers,
  countryCodeNameMap,
  continentCountryCodes,
} from './config/countryMappings';

// ‚ùå T√ñR√ñLVE: Felesleges importok √©s konstansok

// ‚ùå KOMMENT√ÅLVA: IPLocation interf√©sz - csak egyszer haszn√°lt
/*
interface IPLocation {
  country: string;
  countryCode: string;
  city?: string;
  ip: string;
}
*/

// ‚úÖ MEGTARTAND√ì - hasznos helper funkci√≥k
export function getCountryNameByCode(code: string): string {
  return countryCodeNameMap[code.toLowerCase()] || code.toUpperCase();
}

export function getContinentByCountryCode(code: string): string | null {
  const lowerCode = code.toLowerCase();
  if (continentCountryCodes.asia.includes(lowerCode)) return 'Asia';
  if (continentCountryCodes.africa.includes(lowerCode)) return 'Africa';
  if (continentCountryCodes.northAmerica.includes(lowerCode)) return 'North America';
  if (continentCountryCodes.southAmerica.includes(lowerCode)) return 'South America';
  if (continentCountryCodes.oceania.includes(lowerCode)) return 'Oceania';
  return continentCountryCodes.europe.includes(lowerCode) ? 'Europe' : null;
}

export function normalizeCountry(country: string): string {
  for (const [normalized, alternatives] of Object.entries(countryNormalizers)) {
    if (alternatives.includes(country)) {
      return normalized;
    }
  }
  return country;
}

export function prioritizeSourcesByCountry<T extends { country?: string }>(
  sources: T[],
  countryFilter?: string,
): T[] {
  if (!countryFilter) return sources;

  return [...sources].sort((a, b) => {
    const aIsFromCountry = a.country === countryFilter;
    const bIsFromCountry = b.country === countryFilter;

    if (aIsFromCountry && !bIsFromCountry) return -1;
    if (!aIsFromCountry && bIsFromCountry) return 1;
    return 0;
  });
}

export function findCountryByAlternativeName(
  country: string,
  _continentsData?: Record<string, unknown>,
): string | null {
  for (const [normalizedName, alternativeNames] of Object.entries(countryNormalizers)) {
    if (alternativeNames.includes(country)) {
      return normalizedName;
    }
  }
  return null;
}

// DataService interf√©sz defini√°l√°sa
interface DataServiceSources {
  sources: {
    getNewsSourcesByCountry: (name: string) => Promise<NewsSource[]>;
  };
}

export async function getLocalSourcesByCountryName(
  countryName: string,
  dataService: DataServiceSources,
): Promise<NewsSource[]> {
  try {
    const resolvedCountryName = countryMapping[countryName] || countryName;
    const sources = await dataService.sources.getNewsSourcesByCountry(resolvedCountryName);
    return sources || [];
  } catch (error) {
    console.error(`Hiba a lok√°lis forr√°sok lek√©r√©s√©n√©l: ${countryName}`, error);
    return [];
  }
}

export const ContentLocalization = {
  handleLocationBasedFiltering: async (
    location: LocationData | null,
    filters: { country?: string },
    sources: NewsSource[],
    dataService: DataServiceSources,
  ) => {
    let filteredSources = sources;

    if (location?.country && !filters.country) {
      const countryName = countryMapping[location.country] || location.country;

      const localSources = await dataService.sources.getNewsSourcesByCountry(countryName);

      if (localSources && localSources.length > 0) {
        console.log(`Lok√°ci√≥ alap√∫ sz≈±r√©s: ${countryName}, ${localSources.length} forr√°s`);
        filteredSources = localSources;
      }
    }

    return filteredSources;
  },
};

// Egyszer≈±s√≠tett lok√°ci√≥s szolg√°ltat√°s
// ‚úÖ √ÅTIR√ÅNY√çT√ÅS: localLocationService helyett haszn√°ld a locationProvider-t k√∂zvetlen√ºl
export const localLocationService = {
  // ‚ö†Ô∏è DEPRECATED: Haszn√°ld helyette: locationProvider.getLocation()
  getLocation: () => locationProvider.getLocation(),
  // ‚ö†Ô∏è DEPRECATED: Haszn√°ld helyette: locationProvider.setManualLocation()
  setSelectedLocation: (country: string, countryCode: string, _continent?: string) =>
    locationProvider.setManualLocation(country, countryCode),
  // ‚ö†Ô∏è DEPRECATED: Haszn√°ld helyette: locationProvider.clearManualLocation()
  clearSelectedLocation: () => locationProvider.clearManualLocation(),

  getBrowserPreferences: () => ({
    language: navigator.language,
    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
  }),
};

// JAV√çT√ÅS: getLocalizedSources helyesen defini√°lva
export function getLocalizedSources(sources: NewsSource[], filters: { country?: string | null }) {
  if (!filters.country) return sources;

  return [...sources].sort((a, b) => {
    const aIsFromCountry = a.country === filters.country;
    const bIsFromCountry = b.country === filters.country;

    if (aIsFromCountry && !bIsFromCountry) return -1;
    if (!aIsFromCountry && bIsFromCountry) return 1;
    return 0;
  });
}

// Cache implement√°ci√≥
// ‚ùå KOMMENT√ÅLVA: DUPLIK√ÅLT CACHE RENDSZER - newsSourceCache
// Van m√°r egy cache utility, ez felesleges Map cache
/*
const newsSourceCache = new Map<string, {
  sources: NewsSource[];
  timestamp: number;
}>();
*/

// ‚ùå KOMMENT√ÅLVA: HASZN√ÅLATON K√çV√úLI FUNKCI√ì - getNewsSourcesByCountry
/*
export const getNewsSourcesByCountry = async (
  country: string, 
  dataService?: DataServiceSources
): Promise<NewsSource[]> => {
  try {
    const normalizedCountry = normalizeCountry(country);
    const cacheKey = cache.generateKey(CACHE_PREFIX, normalizedCountry);

    // Cache ellen≈ërz√©s
    const cachedSources = await cache.get<NewsSource[]>(cacheKey);
    if (cachedSources) {
      return cachedSources;
    }

    let sources: NewsSource[] = [];

    // DataService haszn√°lata
    if (dataService) {
      sources = await dataService.sources.getNewsSourcesByCountry(normalizedCountry);
    }

    // Cache-el√©s
    if (sources.length > 0) {
      await cache.set(
        cacheKey, 
        sources,
        CACHE_TIMES.MEDIUM,
        CACHE_PREFIX
      );
    }

    return sources;
  } catch (error) {
    console.error(`Hiba a(z) ${country} h√≠rforr√°sainak lek√©r√©se k√∂zben:`, error);
    return [];
  }
};
*/

// ‚ùå KOMMENT√ÅLVA: HASZN√ÅLATON K√çV√úLI FUNKCI√ì - clearNewsSourceCache
/*
export const clearNewsSourceCache = (country?: string) => {
  if (country) {
    newsSourceCache.delete(normalizeCountry(country));
  } else {
    newsSourceCache.clear();
  }
};
*/

// Kiterjesztett interf√©sz
interface ExtendedDataServiceSources extends DataServiceSources {
  sources: {
    getNewsSourcesByCountry: (name: string) => Promise<NewsSource[]>;
    getNewsSourcesByContinent: (continent: string) => Promise<Record<string, NewsSource[]>>;
    getAllNewsSources: () => Promise<NewsSource[]>;
    getNewsSourceById: (id: string) => Promise<NewsSource | null>;
  };
}

export const getFilteredSourcesByLocation = async (
  filters: { country?: string; continent?: string; source?: string[] },
  dataService: ExtendedDataServiceSources,
): Promise<NewsSource[]> => {
  try {
    const location = await localLocationService.getLocation();

    let sources;
    if (filters.country) {
      sources = await dataService.sources.getNewsSourcesByCountry(filters.country);
    } else if (filters.continent) {
      const countriesByContinent = await dataService.sources.getNewsSourcesByContinent(
        filters.continent,
      );
      sources = Object.values(countriesByContinent).flat();
    } else {
      sources = await dataService.sources.getAllNewsSources();
    }

    // Lok√°ci√≥ alap√∫ sz≈±r√©s
    if (location?.country && !filters.country) {
      const normalizedCountry = normalizeCountry(location.country);
      const localSources = await getLocalSourcesByCountryName(normalizedCountry, dataService);

      if (localSources.length > 0) {
        console.log(`Lok√°ci√≥ alap√∫ sz≈±r√©s: ${normalizedCountry}, ${localSources.length} forr√°s`);
        sources = localSources;
      }
    }

    // Sz≈±r√©s forr√°s azonos√≠t√≥ szerint
    if (filters.source?.length) {
      const sourceObjects = await Promise.all(
        filters.source.map((id) => dataService.sources.getNewsSourceById(id)),
      );
      sources = sourceObjects.filter(Boolean) as NewsSource[];
    }

    return sources || [];
  } catch (error) {
    console.error('Hiba a forr√°sok sz≈±r√©s√©n√©l:', error);
    return [];
  }
};

// K√∂zponti szolg√°ltat√°s export - TISZT√çTOTT VERZI√ì
export const localizationService = {
  countryMapping,
  countryNormalizers,
  countryCodeNameMap,
  continentCountryCodes,
  getCountryNameByCode,
  getContinentByCountryCode,
  normalizeCountry,
  prioritizeSourcesByCountry,
  findCountryByAlternativeName,
  getLocalSourcesByCountryName,
  ContentLocalization,
  getFilteredSourcesByLocation,
};

export default localizationService;
