import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
import { GeoLocationStrategy } from './GeoLocationStrategy';
import { LocationData, LocationStrategy } from '../../types';
import styles from './GeoLocation.module.css';

interface GeoLocationPromptProps {
  onSuccess?: (location: LocationData) => void;
  onError?: (error: Error) => void;
  onCancel?: () => void;
  strategy?: LocationStrategy;
  showOnSuccess?: boolean;
  className?: string;
}

interface PromptState {
  permissionState: 'unknown' | 'prompt' | 'granted' | 'denied';
  isLoading: boolean;
  error: string | null;
  location: LocationData | null;
}

/**
 * Geolok√°ci√≥s enged√©lyt k√©r≈ë √©s helymeghat√°roz√°st kezel≈ë komponens
 *
 * Ez a komponens a felhaszn√°l√≥t√≥l k√©r enged√©lyt a helymeghat√°roz√°sra,
 * √©s megjelen√≠ti a helymeghat√°roz√°s √°llapot√°t √©s eredm√©ny√©t.
 */
export const GeoLocationPrompt: React.FC<GeoLocationPromptProps> = ({
  onSuccess,
  onError,
  onCancel,
  strategy,
  showOnSuccess = false,
  className,
}) => {
  // √Ållapot inicializ√°l√°sa
  const [state, setState] = useState<PromptState>({
    permissionState: 'unknown',
    isLoading: false,
    error: null,
    location: null,
  });

  // Referencia a permissionState-re, hogy elker√ºlj√ºk a felesleges √∫jrarenderel√©st
  const permissionStateRef = useRef(state.permissionState);

  // Saj√°t strat√©gia l√©trehoz√°sa, ha nincs megadva - useMemo-ba csomagolva
  const locationStrategy = useMemo(() => strategy || new GeoLocationStrategy(), [strategy]);

  // Helymeghat√°roz√°s ind√≠t√°sa - useCallback-be csomagolva
  const startLocationDetection = useCallback(async () => {
    setState((prev) => ({ ...prev, isLoading: true, error: null }));
    try {
      const location = await locationStrategy.getLocation();
      if (location) {
        setState((prev) => ({
          ...prev,
          isLoading: false,
          location,
          permissionState: 'granted',
        }));
        onSuccess?.(location);
      } else {
        throw new Error('Nem siker√ºlt meghat√°rozni a helyadatokat');
      }
    } catch (error) {
      setState((prev) => ({
        ...prev,
        isLoading: false,
        error: error instanceof Error ? error.message : 'Ismeretlen hiba',
      }));
      onError?.(error instanceof Error ? error : new Error('Ismeretlen hiba'));
    }
  }, [locationStrategy, onSuccess, onError]);

  // Komponens bet√∂lt√©sekor ellen≈ërizz√ºk az enged√©lyeket √©s inicializ√°ljuk a strat√©gi√°t
  useEffect(() => {
    const checkPermission = async () => {
      try {
        // Ellen≈ërizz√ºk az enged√©ly √°llapot√°t, ha el√©rhet≈ë a Permissions API
        if (navigator.permissions && navigator.permissions.query) {
          const result = await navigator.permissions.query({
            name: 'geolocation' as PermissionName,
          });
          setState((prev) => ({
            ...prev,
            permissionState: result.state as 'prompt' | 'granted' | 'denied',
          }));

          // Friss√≠ts√ºk a ref √©rt√©k√©t is
          permissionStateRef.current = result.state as 'prompt' | 'granted' | 'denied';

          // Esem√©nykezel≈ë hozz√°ad√°sa az enged√©ly √°llapot√°nak v√°ltoz√°s√°hoz
          result.addEventListener('change', () => {
            setState((prev) => ({
              ...prev,
              permissionState: result.state as 'prompt' | 'granted' | 'denied',
            }));
            permissionStateRef.current = result.state as 'prompt' | 'granted' | 'denied';
          });
        }

        // Inicializ√°ljuk a strat√©gi√°t (opcion√°lis l√°ncol√°ssal)
        if (typeof locationStrategy.initialize === 'function') {
          await locationStrategy.initialize();
        }

        // Ha m√°r van enged√©ly, √©s a showOnSuccess true, akkor r√∂gt√∂n elind√≠tjuk a helymeghat√°roz√°st
        if (permissionStateRef.current === 'granted' && showOnSuccess) {
          startLocationDetection();
        }
      } catch (error) {
        console.error('Hiba az enged√©lyek ellen≈ërz√©sekor:', error);
      }
    };

    checkPermission();
  }, [locationStrategy, showOnSuccess, startLocationDetection]);

  // Enged√©ly k√©r√©s√©nek elutas√≠t√°sa
  const handleCancel = () => {
    onCancel?.();
  };

  // Hiba eset√©n √∫jrapr√≥b√°l√°s
  const handleRetry = () => {
    startLocationDetection();
  };

  // K√ºl√∂nb√∂z≈ë √°llapotok megjelen√≠t√©se
  const renderContent = () => {
    // Bet√∂lt√©s √°llapot
    if (state.isLoading) {
      return (
        <div className={styles.loadingState}>
          <div className={styles.spinner}></div>
          <p className={styles.loadingText}>Helymeghat√°roz√°s folyamatban...</p>
          <p className={styles.loadingSubtext}>Ez csak n√©h√°ny m√°sodpercet vehet ig√©nybe</p>
        </div>
      );
    }

    // Hiba √°llapot
    if (state.error) {
      return (
        <div className={styles.errorState}>
          <div className={styles.errorIcon}>‚ö†Ô∏è</div>
          <h3 className={styles.title}>Helymeghat√°roz√°si hiba</h3>
          <p className={styles.errorMessage}>{state.error}</p>
          <div className={styles.buttonGroup}>
            <button className={styles.primaryButton} onClick={handleRetry}>
              √öjrapr√≥b√°l√°s
            </button>
            <button className={styles.secondaryButton} onClick={handleCancel}>
              M√©gsem
            </button>
          </div>
        </div>
      );
    }

    // Sikeres helymeghat√°roz√°s
    if (state.location && showOnSuccess) {
      return (
        <div className={styles.successState}>
          <div className={styles.successIcon}>‚úì</div>
          <h3 className={styles.title}>Helymeghat√°roz√°s sikeres</h3>
          <div className={styles.locationInfo}>
            <p>
              <strong>Orsz√°g:</strong> {state.location.country}
            </p>
            {state.location.city && (
              <p>
                <strong>V√°ros:</strong> {state.location.city}
              </p>
            )}
          </div>
          <button className={styles.secondaryButton} onClick={handleCancel}>
            Bez√°r√°s
          </button>
        </div>
      );
    }

    // Enged√©lyk√©r≈ë √°llapot (alap√©rtelmezett)
    return (
      <div className={styles.promptState}>
        <h3 className={styles.title}>Pontosabb h√≠raj√°nlatok</h3>
        <p className={styles.description}>
          Pontos helymeghat√°roz√°s haszn√°lat√°val relev√°nsabb h√≠reket tudunk mutatni az √ñn sz√°m√°ra.
        </p>
        <div className={styles.locationIcon}>üìç</div>
        <div className={styles.buttonGroup}>
          <button className={styles.primaryButton} onClick={startLocationDetection}>
            Enged√©lyezem
          </button>
          <button className={styles.secondaryButton} onClick={handleCancel}>
            Most nem
          </button>
        </div>
        <p className={styles.privacyNote}>
          Helyadatait kiz√°r√≥lag a relev√°ns h√≠rek megjelen√≠t√©s√©re haszn√°ljuk, √©s nem t√°roljuk a
          szervereinken.
        </p>
      </div>
    );
  };

  return <div className={`${styles.geoPrompt} ${className || ''}`}>{renderContent()}</div>;
};

export default GeoLocationPrompt;
