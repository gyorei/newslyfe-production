/**
 * Frontend Helyi H√≠rek Szolg√°ltat√°s
 *
 * A FrontLocal modul feladata a frontend √©s backend k√∂z√∂tti h√≠d megval√≥s√≠t√°sa
 * a helyi h√≠rek √©s be√°ll√≠t√°sok kezel√©s√©ben. K√∂zvet√≠ti a k√©r√©seket a backend API
 * fel√©, √©s el≈ëk√©sz√≠ti az adatokat a frontend komponensek sz√°m√°ra.
 */

/*

üìä √ñSSZEGZETT √âRT√âKEL√âS
üåü KIV√ÅL√ì PONTOK (9/10):
‚úÖ Teljes cache implement√°ci√≥ - Professzion√°lis szint
‚úÖ Bi-directional konverzi√≥ - RssNewsItem ‚Üî APINewsItem
‚úÖ Cache statisztik√°k - Monitoring √©s debugging
‚úÖ Automatikus cleanup - Memory management
‚úÖ torzsMode API integr√°ci√≥ - Backend kommunik√°ci√≥
‚úÖ R√©szletes logging - Debug inform√°ci√≥k
‚úÖ Cache TTL kezel√©s - Id≈ëalap√∫ valid√°ci√≥
‚ö†Ô∏è JAV√çTAND√ì TER√úLETEK:
‚ö†Ô∏è Hungary default elt√°vol√≠t√°sa
‚ö†Ô∏è Cache TTL optimaliz√°l√°sa (4‚Üí24 √≥ra)
‚ö†Ô∏è maxAgeHours duplik√°ci√≥ megsz√ºntet√©se
‚ö†Ô∏è Error recovery implement√°l√°sa
üéØ V√âGS≈ê √âRT√âKEL√âS
FrontLocal.ts t√∂rzs implement√°ci√≥: MAJDNEM T√ñK√âLETES! üåü

Ez egy professzion√°lis szint≈± cache implement√°ci√≥ kiv√°l√≥ cache kezel√©ssel, statisztik√°kkal √©s automatikus cleanup-pal. Csak 3-4 kisebb probl√©m√°t kell jav√≠tani ahhoz, hogy t√∂k√©letes legyen.

PRIORIT√ÅS:

Hungary default elt√°vol√≠t√°sa ‚úã
Cache TTL 24 √≥r√°ra n√∂vel√©se ‚è∞
maxAgeHours logika tiszt√≠t√°sa üßπ


*/

import { localizationService } from '../Location';
import { RssNewsItem } from '../../../types';
import { RSS_CONFIG } from '../config/localConfig';
import { apiClient } from '../../../apiclient/apiClient';
import { NewsDistributor } from '../topnews/newsDistributor';
import i18n from 'i18next';

// √öJ: Vissza√°ll√≠tott cache-hez kapcsol√≥d√≥ defin√≠ci√≥k
const TORZS_MODE_NEWS_TTL_MS = 4 * 60 * 60 * 1000; // 4 √≥ra

function getTorzsModeCacheKey(country: string, importanceLevel: number): string {
  return `torzs_mode_news_${country.toLowerCase()}_${importanceLevel}`;
}

interface CacheStats {
  hits: number;
  misses: number;
  saves: number;
}

const cacheStats: CacheStats = {
  hits: 0,
  misses: 0,
  saves: 0,
};


// NewsSource t√≠pus defini√°l√°sa
interface NewsSource {
  id: string;
  name: string;
  url: string;
  country?: string;
  continent?: string;
  fontossag?: number;
  rssFeed?: string;
}

// DbRow interface for converting API responses
interface DbRow {
  id?: string;
  eredeti_id?: string;
  name?: string;
  forras_neve?: string;
  cim?: string;
  url?: string;
  rss_url?: string;
  rss_feed?: string | null; // Changed from string | undefined to string | null
  fontossag?: number;
  orszag?: string;
  country?: string;
  kontinens?: string;
  continent?: string;
  aktiv?: boolean;
}

/**
 * H√≠rek sz≈±r√©s√©t lehet≈ëv√© tev≈ë interf√©sz
 */
interface NewsFilters {
  country?: string;
  continent?: string;
  source?: string[];
  importanceLevel?: number;
  category?: string | null;
  useGeoLocation?: boolean;
  isCleanTab?: boolean;
  maxAgeHours?: number; // √öJ: Id≈ëalap√∫ sz≈±r√©s t√°mogat√°sa
  torzsMode?: boolean; // √öJ: T√∂rzs h√≠radat m√≥d t√°mogat√°sa
  forceRefresh?: boolean; // ‚úÖ √öJ: Cache bypass t√°mogat√°sa
}

/**
 * API √°ltal visszaadott h√≠rt√©telek form√°tuma
 */
interface APINewsItem {
  id?: string;
  title?: string;
  description?: string;
  imageUrl?: string;
  sourceId?: string;
  source?: string;
  country?: string;
  continent?: string;
  date?: string;
  timestamp?: number;
  url?: string;
  categories?: string[];
  hasRssFeed?: boolean;
  sourceStatus?: string;
}

// √öJ: Cache strukt√∫ra t√≠pus
interface CachedNewsData {
  news: APINewsItem[];
  timestamp: number;
  country: string;
  importanceLevel: number;
}

const frontLocalNewsCache = new Map<string, CachedNewsData>();
/**
 * Alap√©rtelmezett sz≈±r≈ëk hozz√°ad√°sa a hi√°nyz√≥ adatokhoz
 */
const getDefaultFilters = (filters?: Partial<NewsFilters>): NewsFilters => {
  return {
    ...filters,
    importanceLevel:
      filters?.importanceLevel !== undefined
        ? filters.importanceLevel
        : RSS_CONFIG.IMPORTANCE_LEVELS.CRITICAL,
  };
};

/**
 * FrontLocal Szolg√°ltat√°s - Frontend Komponensek sz√°m√°ra
 */
const FrontLocal = {
  /**
   * H√≠rek lek√©r√©se sz≈±r≈ëk alapj√°n - EGYSZER≈∞ CACHE LOGIK√ÅVAL
   */
  getNews: async (filters?: {
    country?: string;
    continent?: string;
    source?: string[];
    importanceLevel?: number;
    category?: string | null;
    useGeoLocation?: boolean;
    isCleanTab?: boolean;
    maxAgeHours?: number;
    torzsMode?: boolean;
    forceRefresh?: boolean; // ‚úÖ √öJ: Cache bypass t√°mogat√°sa
  }): Promise<RssNewsItem[]> => {
    console.log('--- FrontLocal.getNews ---', filters);
    try {
      // PRIORIT√ÅS: Ha van source √©s pontosan 1 elem, mindig a backend sourceId query param√©teres √°gat futtatjuk!
      if (filters?.source && Array.isArray(filters.source) && filters.source.length === 1) {
        const sourceId = filters.source[0];
        // console.log('[FRONTLOCAL-DEBUG] Egy forr√°s sz≈±r√©s, sourceId:', sourceId);
        const params = new URLSearchParams();
        if (filters.importanceLevel) {
          params.append('importanceLevel', filters.importanceLevel.toString());
        }
        if (filters.country) {
          params.append('country', filters.country);
        }
        if (filters.maxAgeHours !== undefined) {
          params.append('maxAgeHours', filters.maxAgeHours.toString());
        }
        if (filters.torzsMode) {
          params.append('torzsMode', 'true');
        }
        params.append('limit', '3000');
        params.append('sourceId', sourceId);
        const url = `/api/local/news?${params.toString()}`;
        // console.log('[FRONTLOCAL-DEBUG] Egy forr√°s API k√©r√©s:', url);
        const response = await fetch(url);
        if (!response.ok) {
          let errorMsg = `API hiba: ${response.status} ${response.statusText}`;
          try {
            const errorData = await response.json();
            errorMsg = errorData.error || errorMsg;
          } catch {
            // intentionally left blank
          }
          throw new Error(errorMsg);
        }
        const data = await response.json();
        // console.log('[FRONTLOCAL-DEBUG] Egy forr√°s API v√°lasz h√≠r darabsz√°m:', data.news?.length || 0);
        let allNewsItems: RssNewsItem[] = [];
        if (data && data.news && Array.isArray(data.news)) {
          allNewsItems = data.news.map((item: APINewsItem) =>
            apiNewsItemToRssNewsItem(item, filters?.country)
          );
        }
        // console.log('[FRONTLOCAL-DEBUG] Egy forr√°s visszaadott h√≠rek sz√°ma:', allNewsItems.length);
        return allNewsItems;
      }
      const effectiveFilters = getDefaultFilters(filters);

      // √öJ: Cache v√°ltoz√≥k inicializ√°l√°sa
      let allNewsItems: RssNewsItem[] = [];
      let fetchedFromCache = false;

      // --- CACHE ELLEN≈êRZ√âS T√ñRZSM√ìD ESET√âN ---
      if (effectiveFilters.torzsMode && !effectiveFilters.forceRefresh) {
        // Explicit valid√°ci√≥ - nincs Hungary default!
        if (!effectiveFilters.country) {
          console.warn(
            '[FrontLocal.getNews] T√ñRZS M√ìD: Orsz√°g param√©ter hi√°nyzik - t√∂rzs m√≥d letiltva',
          );
          effectiveFilters.torzsMode = false; // Fallback norm√°l m√≥dra
        } else {
          const cacheKey = getTorzsModeCacheKey(
            effectiveFilters.country, // ‚Üê JAV√çTVA: Explicit country, nincs default!
            effectiveFilters.importanceLevel || 10,
          );

          const cachedEntry = frontLocalNewsCache.get(cacheKey);
          if (cachedEntry && Date.now() - cachedEntry.timestamp < TORZS_MODE_NEWS_TTL_MS) {
            console.log(
              `[FrontLocal.getNews] üéØ T√ñRZS CACHE HIT! ${cachedEntry.news.length} h√≠r, kor: ${Math.round((Date.now() - cachedEntry.timestamp) / 60000)}perc`,
            );

            // Cache-b≈ël √°talak√≠t√°s RssNewsItem form√°tumra
            allNewsItems = cachedEntry.news.map((item: APINewsItem) =>
              apiNewsItemToRssNewsItem(item, effectiveFilters.country)
            );

            fetchedFromCache = true;
            cacheStats.hits++;
          } else if (cachedEntry) {
            console.log(
              `[FrontLocal.getNews] ‚è∞ T√ñRZS CACHE LEJ√ÅRT. Cache kor: ${Math.round((Date.now() - cachedEntry.timestamp) / 60000)}perc`,
            );
            cacheStats.misses++;
          } else {
            console.log(`[FrontLocal.getNews] ‚ùå T√ñRZS CACHE MISS. Els≈ë bet√∂lt√©s: ${cacheKey}`);
            cacheStats.misses++;
          }
        }
      } else if (effectiveFilters.forceRefresh) {
        console.log(
          `[FrontLocal.getNews] üîÑ FORCE REFRESH: Cache bypass aktiv√°lva - k√∂zvetlen API h√≠v√°s`,
        );
      }

      // FELT√âTELES API H√çV√ÅS - csak ha nincs cache
      if (!fetchedFromCache) {
        // Helymeghat√°roz√°s haszn√°lata, ha sz√ºks√©ges √©s enged√©lyezett
        /*
        if (
          !effectiveFilters.country &&
          !effectiveFilters.continent &&
          !effectiveFilters.source?.length &&
          effectiveFilters.useGeoLocation !== false &&
          effectiveFilters.isCleanTab !== true
        ) {
          console.log(`[FrontLocal.getNews] Helymeghat√°roz√°s haszn√°lata...`);
          const location = await localLocationService.getLocation();

          if (location?.country) {
            console.log(`[FrontLocal.getNews] Felhaszn√°l√≥ orsz√°ga: ${location.country}`);
            effectiveFilters.country = location.country;
          } else {
            console.warn('[FrontLocal.getNews] Nem siker√ºlt meghat√°rozni a felhaszn√°l√≥ orsz√°g√°t.');
            return [];
          }
        }
        */

        // console.log('[FRONTLOCAL-DEBUG] Nem egy forr√°s sz≈±r√©s, v√©gs≈ë sz≈±r≈ëk:', effectiveFilters);

        // Forr√°sok lek√©r√©se a v√©gleges√≠tett sz≈±r≈ëkkel
        const sources = await FrontLocal.getFilteredSources(effectiveFilters);
        // console.log(`[FrontLocal.getNews] getFilteredSources eredm√©nye: ${sources.length} forr√°s`);

        if (sources.length === 0) {
          // console.warn('[FrontLocal.getNews] A sz≈±r√©sek ut√°n nem maradt feldolgozhat√≥ h√≠rforr√°s.');
          return [];
        }

        // A forr√°sok egy r√©szhalmaz√°t haszn√°ljuk csak
        const sourcesToProcess = sources.slice(0, RSS_CONFIG.MAX_SOURCES_PER_REQUEST);

        console.log(
          `[FrontLocal.getNews] H√≠rek lek√©rdez√©se ${sourcesToProcess.length} forr√°sb√≥l...`,
        );

        // API h√≠v√°s implement√°l√°sa
        const params = new URLSearchParams();
        if (effectiveFilters.importanceLevel) {
          params.append('importanceLevel', effectiveFilters.importanceLevel.toString());
        }
        if (effectiveFilters.country) {
          params.append('country', effectiveFilters.country);
        }
        if (effectiveFilters.maxAgeHours !== undefined) {
          params.append('maxAgeHours', effectiveFilters.maxAgeHours.toString());
          // console.log(
          //   `[FrontLocal.getNews] maxAgeHours param√©ter: ${effectiveFilters.maxAgeHours} √≥ra`,
          // );
        }
        if (effectiveFilters.torzsMode) {
          params.append('torzsMode', 'true');
          // console.log(`[FrontLocal.getNews] torzsMode akt√≠v - 24 √≥r√°s t√∂rzs h√≠radat bet√∂lt√©se`);
        }
        params.append('limit', '3000');

        // console.log(`[FrontLocal.getNews] API k√©r√©s: /api/local/news?${params.toString()}`);

        const response = await fetch(`/api/local/news?${params.toString()}`);
        if (!response.ok) {
          let errorMsg = `API hiba: ${response.status} ${response.statusText}`;
          try {
            const errorData = await response.json();
            errorMsg = errorData.error || errorMsg;
          } catch {
            // intentionally left blank
          }
          throw new Error(errorMsg);
        }
        const data = await response.json();
        // console.log(
        //   `[FrontLocal.getNews] API v√°lasz: ${data.news?.length || 0} h√≠r, meta:`,
        //   data.meta,
        // );

        // Ellen≈ërizz√ºk, hogy a v√°lasz tartalmaz-e h√≠reket
        if (data && data.news && Array.isArray(data.news)) {
          // √Åtalak√≠tjuk a h√≠relemeket a k√≠v√°nt form√°tumra
          allNewsItems = data.news.map((item: APINewsItem) =>
            apiNewsItemToRssNewsItem(item, effectiveFilters.country)
          );

          // --- CACHE MENT√âS sikeres API h√≠v√°s ut√°n ---
          if (effectiveFilters.torzsMode && allNewsItems.length > 0 && effectiveFilters.country) {
            const cacheKey = getTorzsModeCacheKey(
              effectiveFilters.country, // ‚Üê JAV√çTVA: Explicit country, nincs default!
              effectiveFilters.importanceLevel || 10,
            );

            // RssNewsItem-eket visszaalak√≠tjuk APINewsItem form√°tumra cache-hez
            const apiNewsItems: APINewsItem[] = allNewsItems.map((item) => ({
              id: item.id,
              title: item.title,
              description: item.description,
              imageUrl: item.imageUrl,
              sourceId: item.source.id,
              source: item.source.name,
              country: item.source.country,
              continent: item.source.continent,
              date: item.pubDate,
              timestamp: item.timestamp,
              url: item.link,
              categories: item.categories,
            }));

            frontLocalNewsCache.set(cacheKey, {
              news: apiNewsItems,
              timestamp: Date.now(),
              country: effectiveFilters.country,
              importanceLevel: effectiveFilters.importanceLevel || 10,
            });

            cacheStats.saves++;
            console.log(
              `[FrontLocal.getNews] üíæ T√ñRZS CACHE MENT√âS: ${allNewsItems.length} h√≠r mentve cache kulccsal: ${cacheKey}`,
            );

            // √öJ: Egyszer≈± cache cleanup - max 50 bejegyz√©s
            if (frontLocalNewsCache.size > 50) {
              const oldestKey = Array.from(frontLocalNewsCache.entries()).sort(
                ([, a], [, b]) => a.timestamp - b.timestamp,
              )[0]?.[0];
              if (oldestKey) {
                frontLocalNewsCache.delete(oldestKey);
                console.log(`[FrontLocal.getNews] üßπ R√©gi cache bejegyz√©s t√∂r√∂lve: ${oldestKey}`);
              }
            }
          } else if (effectiveFilters.torzsMode && !effectiveFilters.country) {
            console.warn(
              '[FrontLocal.getNews] T√ñRZS CACHE MENT√âS: Orsz√°g hi√°nyzik - cache ment√©s kihagyva',
            );
          }

          // Friss√≠tj√ºk a fontoss√°gi szint inform√°ci√≥kat, ha van meta adat
          if (data.meta) {
            if (data.meta.hasMore !== undefined) {
              // Itt √©rdemes lenne egy glob√°lis √°llapotot friss√≠teni a hasMoreSources √©rt√©kkel
            }
            if (data.meta.nextImportanceLevel !== undefined) {
              // Itt √©rdemes lenne egy glob√°lis √°llapotot friss√≠teni a nextImportanceLevel √©rt√©kkel
            }
          }
        } else {
          console.warn(
            '[FrontLocal.getNews] Az API v√°lasza nem tartalmaz h√≠reket vagy hib√°s form√°tum√∫',
          );
        }
      }

      // H√≠rek eloszt√°sa √©s sz≈±r√©se a kor√°bbi k√≥d szerint
      let newsItems = NewsDistributor.distribute(
        allNewsItems,
        effectiveFilters.country,
        effectiveFilters.importanceLevel,
        effectiveFilters.continent,
      );

      // Kateg√≥ria sz≈±r√©s, ha sz√ºks√©ges
      if (effectiveFilters.category) {


        newsItems = newsItems.filter((item) => {
          // Kateg√≥ria mez≈ëk vizsg√°lata
          if (item.categories?.includes(effectiveFilters.category!)) {
            return true;
          }

          // Kulcsszavas sz≈±r√©s a c√≠mben √©s le√≠r√°sban
          const title = item.title.toLowerCase();
          const description = item.description.toLowerCase();
          const searchCategory = effectiveFilters.category!.toLowerCase();

          return title.includes(searchCategory) || description.includes(searchCategory);
        });

        // console.log(
        //   `[FrontLocal.getNews] Kateg√≥ria sz≈±r√©s ut√°n: ${newsItems.length}/${beforeFilterByCategory} h√≠r maradt.`,
        // );
      }
      // console.log('[FRONTLOCAL-DEBUG] Nem egy forr√°s sz≈±r√©s, visszaadott h√≠rek sz√°ma:', newsItems.length);
      return newsItems;
    } catch (error) {
      console.error('[FRONTLOCAL-DEBUG] Hiba a h√≠rek lek√©r√©se sor√°n:', error);
      throw error;
    }
  },

  /**
   * Sz≈±rt forr√°sok lek√©r√©se
   */
  getFilteredSources: async (filters: {
    country?: string;
    continent?: string;
    source?: string[];
    importanceLevel?: number;
  }): Promise<NewsSource[]> => {
    // console.log(`[getFilteredSources] === KEZD√âS === Sz≈±r≈ëk:`, JSON.stringify(filters));
    try {
      let sourceRows: DbRow[] = [];

      // API h√≠v√°s a megfelel≈ë v√©gpont kiv√°laszt√°s√°val
      if (filters.country) {
        const normalizedCountry = localizationService.normalizeCountry(filters.country);
        // console.log(`[getFilteredSources] Normaliz√°lt orsz√°g: ${normalizedCountry}`);
        // Fix type casting to match our local DbRow interface
        sourceRows = (await apiClient.getSourcesByCountry(normalizedCountry)) as unknown as DbRow[];
        // console.log(`[getFilteredSources] API v√°lasz: ${sourceRows?.length ?? 0} forr√°s`);
      } else if (filters.continent) {
        // Fix type casting to match our local DbRow interface
        sourceRows = (await apiClient.getSourcesByContinent(
          filters.continent,
        )) as unknown as DbRow[];
        // console.log(`[getFilteredSources] API v√°lasz: ${sourceRows?.length ?? 0} forr√°s`);
      } else if (filters.source?.length) {
        // console.log(
        //   `[getFilteredSources] Forr√°s ID-k alapj√°n lek√©r√©s: ${filters.source.join(',')}`,
        // );
        // TODO: apiClient.getSourcesByIds implement√°l√°s
        return [];
      } else {
        console.warn('[getFilteredSources] Nincs √©rv√©nyes sz≈±r≈ë a forr√°sok lek√©r√©s√©hez.');
        return [];
      }

      // Eredm√©ny ellen≈ërz√©s
      if (!sourceRows || sourceRows.length === 0) {
        return [];
      }

      // Convert DbRow to NewsSource - Fix null handling for rssFeed
      const sources: NewsSource[] = sourceRows.map((row) => ({
        id: row.eredeti_id || row.id || '',
        name: row.forras_neve || row.cim || row.name || '',
        url: row.url || '',
        country: row.orszag || row.country || '',
        continent: row.kontinens || row.continent || '',
        fontossag: row.fontossag || RSS_CONFIG.IMPORTANCE_LEVELS.OPTIONAL,
        rssFeed: row.rss_url || (row.rss_feed === null ? undefined : row.rss_feed), // Fix: Convert null to undefined
      }));

      // Fontoss√°g szerinti sz≈±r√©s
      let filteredSources = sources;
      if (filters.importanceLevel !== undefined) {
    
        filteredSources = filteredSources.filter(
          (source) =>
            (source.fontossag || RSS_CONFIG.IMPORTANCE_LEVELS.OPTIONAL) <= filters.importanceLevel!,
        );
        // console.log(
        //   `[getFilteredSources] Fontoss√°gi sz≈±r√©s ut√°n: ${filteredSources.length}/${beforeFilter}`,
        // );
      }

      // Forr√°s ID szerinti tov√°bbi sz≈±r√©s
      if (filters.source && filters.source.length > 0) {
     
        const sourceIdSet = new Set(filters.source);
        filteredSources = filteredSources.filter((source) => sourceIdSet.has(source.id));
        // console.log(
        //   `[getFilteredSources] Forr√°s ID sz≈±r√©s ut√°n: ${filteredSources.length}/${beforeFilter}`,
        // );
      }

      // console.log(
      //   `[getFilteredSources] === BEFEJEZ√âS === Visszaadott forr√°sok sz√°ma: ${filteredSources.length}`,
      // );
      return filteredSources;
    } catch (error) {
      console.error('[getFilteredSources] Hiba a sz≈±rt forr√°sok lek√©r√©se k√∂zben:', error);
      return [];
    }
  },

  /**
   * Tov√°bbi h√≠rek bet√∂lt√©se k√∂vetkez≈ë fontoss√°gi szintr≈ël
   */
  loadMoreSources: async (
    currentImportanceLevel: number,
    filters?: { country?: string; continent?: string; source?: string[] },
  ): Promise<{
    sources: NewsSource[];
    hasMoreSources: boolean;
    nextImportanceLevel: number | null;
  }> => {
    // console.log(`[loadMoreSources] Kezd√©s, jelenlegi szint: ${currentImportanceLevel}`);

    try {
      // K√∂vetkez≈ë szint lek√©r√©se
      const nextImportanceLevel = NewsDistributor.getNextImportanceLevel(currentImportanceLevel);

      if (nextImportanceLevel === null) {
        // console.log(`[loadMoreSources] Nincs t√∂bb fontoss√°gi szint`);
        return {
          sources: [],
          hasMoreSources: false,
          nextImportanceLevel: null,
        };
      }

      // √öj forr√°sok lek√©r√©se a k√∂vetkez≈ë szintr≈ël
      const sources = await FrontLocal.getFilteredSources({
        ...filters,
        importanceLevel: nextImportanceLevel,
      });

      // console.log(
      //   `[loadMoreSources] ${sources.length} forr√°s a k√∂vetkez≈ë szinten (${nextImportanceLevel})`,
      // );

      // Van-e m√©g tov√°bbi szint
      const hasMoreSources = NewsDistributor.getNextImportanceLevel(nextImportanceLevel) !== null;

      return {
        sources,
        hasMoreSources,
        nextImportanceLevel,
      };
    } catch (error) {
      console.error('[loadMoreSources] Hiba a tov√°bbi forr√°sok bet√∂lt√©se k√∂zben:', error);
      return {
        sources: [],
        hasMoreSources: false,
        nextImportanceLevel: null,
      };
    }
  },
};

function apiNewsItemToRssNewsItem(item: APINewsItem, countryFallback?: string): RssNewsItem {
  return {
    id: item.id || `item-${Date.now()}-${Math.random()}`,
    title: item.title || i18n.t('localnews.untitled', 'Untitled news'),
    description: item.description || i18n.t('localnews.noDescription', 'No description'),
    imageUrl: item.imageUrl || '',
    source: {
      id: item.sourceId || '',
      name: item.source || i18n.t('localnews.unknownSource', 'Unknown source'),
      country: item.country || countryFallback || '',
      continent: item.continent || '',
    },
    pubDate: item.date || new Date().toISOString(),
    timestamp: item.timestamp || Date.now(),
    link: item.url || '',
    categories: item.categories || [],
  };
}

export default FrontLocal;
