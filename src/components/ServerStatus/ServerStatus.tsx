/*
 K√âSZ! A ServerStatus komponens ki van
  komment√°lva!

  Most m√°r:
  - ‚úÖ Nincs "Szerver ind√≠t√°sa..." sz√∂veg a
  header felett
  - ‚úÖ Tiszt√°bb, egyszer≈±bb fel√ºlet        
  - ‚úÖ Ha k√©s≈ëbb m√©gis kellene, k√∂nnyen
  visszakomment√°lhat√≥

  Az alkalmaz√°s most azonnal bet√∂lt a header    
   n√©lk√ºli zavar√≥ √ºzenetek! üöÄ

*/

import React from 'react';
import { useServerHealth } from '../../hooks/useServerHealth';
import './ServerStatus.css';

export const ServerStatus: React.FC = () => {
  const { isReady, isChecking, error, retry } = useServerHealth();

  // Teszt gomb kezel√©se
  // const toggleTestMode = () => {
  //   const currentTestMode = localStorage.getItem('test-slow-server') === 'true';
  //   localStorage.setItem('test-slow-server', (!currentTestMode).toString());
  //   window.location.reload(); // Oldal √∫jrat√∂lt√©se a teszt m√≥d alkalmaz√°s√°hoz
  // };

  // Ha a szerver k√©sz, csak a teszt gomb jelenjen meg (fejleszt√©s sor√°n)
  // if (isReady) {
  //   return (
  //     <div className="server-status-test">
  //       <button onClick={toggleTestMode} className="server-status-test-button">
  //         {localStorage.getItem('test-slow-server') === 'true' ? 'Kikapcsol√°s' : 'Lass√∫ szerver teszt'}
  //       </button>
  //     </div>
  //   );
  // }

  return (
    <div className="server-status">
      {isChecking ? (
        <div className="server-status-loading">
          <div className="server-status-spinner"></div>
          <span>Szerver ind√≠t√°sa...</span>
        </div>
      ) : error ? (
        <div className="server-status-error">
          <span>‚ö†Ô∏è {error}</span>
          <button onClick={retry} className="server-status-retry">
            √öjrapr√≥b√°lkoz√°s
          </button>
        </div>
      ) : null}
    </div>
  );
};