// src\components\CardMoreMenu\CardMoreMenu.tsx
import React, { useEffect, useRef, useLayoutEffect } from 'react';
import styles from './CardMoreMenu.module.css';

// Propok defin√≠ci√≥ja a men√ºh√∂z
export interface CardMoreMenuProps {
  open: boolean; // Megmondja, hogy a men√º nyitva van-e
  anchorEl: HTMLElement | null; // A gomb DOM eleme, amihez igaz√≠tjuk a men√ºt
  onClose: () => void; // Callback a men√º bez√°r√°s√°hoz
  // Callback propok az akci√≥khoz
  onAnalyze?: () => void;
  onSave?: () => void;
  onShare?: () => void;
  onHideSource?: () => void;
  url?: string; // Az eredeti cikk URL-je
  saveText?: string; // √öj prop: a ment√©s gomb egyedi sz√∂vege
  // ‚úÖ √öJ: K√°rtya DOM eleme a pozicion√°l√°shoz
  cardEl?: HTMLElement | null; // A k√°rtya DOM eleme
}

const CardMoreMenu: React.FC<CardMoreMenuProps> = ({
  open,
  anchorEl,
  onClose,
  onAnalyze,
  onSave,
  onShare,
  onHideSource,
  url,
  saveText = '‚≠ê Save', // Alap√©rtelmezett ment√©s sz√∂veg - angolra ford√≠tva
  cardEl,
}) => {
  const menuRef = useRef<HTMLDivElement>(null);
  const [position, setPosition] = React.useState<{ top: number; left: number } | null>(null);

  // ‚úÖ JAV√çTOTT: Intelligens pozicion√°l√°s f√ºggv√©ny - k√°rtya hat√°rain bel√ºl
  const calculateOptimalPosition = (anchorRect: DOMRect, menuWidth: number, menuHeight: number) => {
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;
    const padding = 8; // Minim√°lis t√©rk√∂z a k√©perny≈ë sz√©l√©t≈ël

    // ‚úÖ √öJ: K√°rtya hat√°rainak kisz√°m√≠t√°sa
    let cardRect: DOMRect | null = null;
    if (cardEl) {
      cardRect = cardEl.getBoundingClientRect();
    }

    let left: number;
    let top: number;

    // ‚úÖ 1. Horizont√°lis pozicion√°l√°s - priorit√°s a jobb oldal, de ha nem f√©r ki, akkor balra
    const canFitRight = anchorRect.right + menuWidth + padding <= viewportWidth;
    const canFitLeft = anchorRect.left - menuWidth - padding >= 0;

    // ‚úÖ √öJ: K√°rtya hat√°rain bel√ºl pozicion√°l√°s
    if (cardRect) {
      const canFitRightInCard = anchorRect.right + menuWidth + padding <= cardRect.right;
      const canFitLeftInCard = anchorRect.left - menuWidth - padding >= cardRect.left;

      if (canFitRightInCard) {
        // Jobbra tudunk pozicion√°lni a k√°rty√°n bel√ºl
        left = anchorRect.right + 5;
      } else if (canFitLeftInCard) {
        // Balra tudunk pozicion√°lni a k√°rty√°n bel√ºl
        left = anchorRect.left - menuWidth - 5;
      } else {
        // Fallback: k√°rtya k√∂zep√©n
        left = cardRect.left + (cardRect.width - menuWidth) / 2;
      }
    } else {
      // Fallback: viewport alap√∫ pozicion√°l√°s
      if (canFitRight) {
        left = anchorRect.right + 5;
      } else if (canFitLeft) {
        left = anchorRect.left - menuWidth - 5;
      } else {
        left = Math.max(padding, viewportWidth - menuWidth - padding);
      }
    }

    // ‚úÖ 2. Vertik√°lis pozicion√°l√°s - priorit√°s alul, de ha nem f√©r ki, akkor fel√ºl
    const canFitBelow = anchorRect.bottom + menuHeight + padding <= viewportHeight;
    const canFitAbove = anchorRect.top - menuHeight - padding >= 0;

    // ‚úÖ √öJ: K√°rtya hat√°rain bel√ºl pozicion√°l√°s
    if (cardRect) {
      const canFitBelowInCard = anchorRect.bottom + menuHeight + padding <= cardRect.bottom;
      const canFitAboveInCard = anchorRect.top - menuHeight - padding >= cardRect.top;

      if (canFitBelowInCard) {
        // Alul tudunk pozicion√°lni a k√°rty√°n bel√ºl
        top = anchorRect.bottom + 5;
      } else if (canFitAboveInCard) {
        // Fel√ºl tudunk pozicion√°lni a k√°rty√°n bel√ºl
        top = anchorRect.top - menuHeight - 5;
      } else {
        // Fallback: k√°rtya k√∂zep√©n
        top = cardRect.top + (cardRect.height - menuHeight) / 2;
      }
    } else {
      // Fallback: viewport alap√∫ pozicion√°l√°s
      if (canFitBelow) {
        top = anchorRect.bottom + 5;
      } else if (canFitAbove) {
        top = anchorRect.top - menuHeight - 5;
      } else {
        top = Math.max(padding, viewportHeight - menuHeight - padding);
      }
    }

    // ‚úÖ DEBUG: Konzolra √≠rjuk ki a pozicion√°l√°si inform√°ci√≥kat
    // console.log('üîç Menu Positioning Debug:', {
    //   viewport: { width: viewportWidth, height: viewportHeight },
    //   card: cardRect ? { 
    //     left: cardRect.left, 
    //     right: cardRect.right, 
    //     top: cardRect.top, 
    //     bottom: cardRect.bottom,
    //     width: cardRect.width,
    //     height: cardRect.height
    //   } : null,
    //   anchor: { 
    //     left: anchorRect.left, 
    //     right: anchorRect.right, 
    //     top: anchorRect.top, 
    //     bottom: anchorRect.bottom 
    //   },
    //   menu: { width: menuWidth, height: menuHeight },
    //   canFit: { right: canFitRight, left: canFitLeft, below: canFitBelow, above: canFitAbove },
    //   finalPosition: { left, top }
    // });

    return { left, top };
  };

  // ‚úÖ JAV√çTOTT: Poz√≠cion√°l√°s useLayoutEffect-tel
  useLayoutEffect(() => {
    // console.log('üîç CardMoreMenu useLayoutEffect:', { open, anchorEl: !!anchorEl });
    
    if (!open || !anchorEl) {
      setPosition(null);
      return;
    }

    const anchorRect = anchorEl.getBoundingClientRect();
    // console.log('üîç Anchor rect:', anchorRect);
    
    // Els≈ë alkalommal ideiglenes poz√≠ci√≥ a gomb k√∂zel√©ben
    if (!menuRef.current) {
      // console.log('üîç Setting initial position');
      
      // ‚úÖ JAV√çTOTT: Az els≈ë poz√≠ci√≥ is intelligens legyen - k√°rtya hat√°rain bel√ºl
      const viewportWidth = window.innerWidth;
      const viewportHeight = window.innerHeight;
      const padding = 8;
      
      // Becs√ºlt men√º m√©retek (alap√©rtelmezett)
      const estimatedMenuWidth = 180;
      const estimatedMenuHeight = 200;
      
      // ‚úÖ √öJ: K√°rtya hat√°rainak kisz√°m√≠t√°sa
      let cardRect: DOMRect | null = null;
      if (cardEl) {
        cardRect = cardEl.getBoundingClientRect();
      }
      
      let left: number;
      let top: number;
      
      // ‚úÖ √öJ: K√°rtya hat√°rain bel√ºl pozicion√°l√°s
      if (cardRect) {
        const canFitRightInCard = anchorRect.right + estimatedMenuWidth + padding <= cardRect.right;
        const canFitLeftInCard = anchorRect.left - estimatedMenuWidth - padding >= cardRect.left;

        if (canFitRightInCard) {
          left = anchorRect.right + 5;
        } else if (canFitLeftInCard) {
          left = anchorRect.left - estimatedMenuWidth - 5;
        } else {
          left = cardRect.left + (cardRect.width - estimatedMenuWidth) / 2;
        }
        
        const canFitBelowInCard = anchorRect.bottom + estimatedMenuHeight + padding <= cardRect.bottom;
        const canFitAboveInCard = anchorRect.top - estimatedMenuHeight - padding >= cardRect.top;

        if (canFitBelowInCard) {
          top = anchorRect.bottom + 5;
        } else if (canFitAboveInCard) {
          top = anchorRect.top - estimatedMenuHeight - 5;
        } else {
          top = cardRect.top + (cardRect.height - estimatedMenuHeight) / 2;
        }
      } else {
        // Fallback: viewport alap√∫ pozicion√°l√°s
        if (anchorRect.right + estimatedMenuWidth + padding <= viewportWidth) {
          left = anchorRect.right + 5;
        } else if (anchorRect.left - estimatedMenuWidth - padding >= 0) {
          left = anchorRect.left - estimatedMenuWidth - 5;
        } else {
          left = Math.max(padding, viewportWidth - estimatedMenuWidth - padding);
        }
        
        if (anchorRect.bottom + estimatedMenuHeight + padding <= viewportHeight) {
          top = anchorRect.bottom + 5;
        } else if (anchorRect.top - estimatedMenuHeight - padding >= 0) {
          top = anchorRect.top - estimatedMenuHeight - 5;
        } else {
          top = Math.max(padding, viewportHeight - estimatedMenuHeight - padding);
        }
      }
      
      setPosition({ top, left });
      return;
    }

    // Miut√°n a men√º megjelent, kisz√°moljuk az optim√°lis poz√≠ci√≥t
    const menuRect = menuRef.current.getBoundingClientRect();
    // console.log('üîç Menu rect:', menuRect);
    
    const optimalPosition = calculateOptimalPosition(
      anchorRect,
      menuRect.width,
      menuRect.height
    );

    setPosition(optimalPosition);
  }, [open, anchorEl]);

  // K√ºls≈ë kattint√°s figyel√©se a bez√°r√°shoz
  useEffect(() => {
    if (!open) return;

    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as HTMLElement;
      
      // console.log('üîç Click outside detected:', {
      //   menuRef: !!menuRef.current,
      //   anchorEl: !!anchorEl,
      //   cardEl: !!cardEl,
      //   target: target,
      //   targetClass: target.className,
      //   menuContains: menuRef.current?.contains(target),
      //   anchorContains: anchorEl?.contains(target),
      //   cardContains: cardEl?.contains(target),
      //   isMoreButton: target.classList.contains('_moreButton_') || target.closest('._moreButton_') || target.className.includes('moreButton') ||
      //                     target.classList.contains('moreButton') ||
      //                     target.closest('.moreButton')
      // });
      
      // ‚úÖ JAV√çTOTT: Ne z√°rjuk be, ha a kattint√°s egy 3 pontos gombra t√∂rt√©nik
      const isMoreButton = target.classList.contains('_moreButton_') || 
                          target.closest('._moreButton_') || 
                          target.className.includes('moreButton') ||
                          target.classList.contains('moreButton') ||
                          target.closest('.moreButton');
      if (isMoreButton) {
        // console.log('üîç Click on more button - not closing menu');
        return;
      }
      
      // ‚úÖ JAV√çTOTT: Ne z√°rjuk be, ha a kattint√°s a k√°rty√°n bel√ºl t√∂rt√©nik
      if (cardEl && cardEl.contains(target)) {
        // console.log('üîç Click inside card - not closing menu');
        return;
      }
      
      // Csak akkor z√°rjuk be, ha a men√ºn √©s a k√°rty√°n k√≠v√ºlre kattintottunk
      if (
        menuRef.current &&
        !menuRef.current.contains(target) &&
        cardEl &&
        !cardEl.contains(target)
      ) {
        // console.log('üîç Closing menu due to outside click');
        onClose();
      }
    };

    // ‚úÖ JAV√çTOTT: Nagyobb k√©sleltet√©s, hogy a men√º megjelenjen
    const timerId = setTimeout(() => {
      document.addEventListener('mousedown', handleClickOutside);
    }, 100); // 100ms k√©sleltet√©s a 0ms helyett

    // Billenty≈±zet figyel√©s (ESC)
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        // console.log('üîç Closing menu due to ESC key');
        onClose();
      }
    };
    document.addEventListener('keydown', handleKeyDown);

    return () => {
      clearTimeout(timerId);
      document.removeEventListener('mousedown', handleClickOutside);
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [open, onClose, anchorEl]);

  // Ha nincs nyitva vagy nincs poz√≠ci√≥, ne renderelj√ºnk semmit
  if (!open || !position) {
    return null;
  }

  // Men√ºpontok v√©grehajt√°sa √©s bez√°r√°sa
  const handleAction = (action?: () => void) => {
    console.log('[CardMoreMenu] Men√º gomb kattint√°s:', action?.name);
    if (action) {
      action();
      console.log('[CardMoreMenu] Men√º gomb m≈±velet lefutott:', action?.name);
    }
    onClose(); // Minden akci√≥ ut√°n bez√°rjuk a men√ºt
    console.log('[CardMoreMenu] Men√º bez√°rva');
  };

  return (
    <div
      ref={menuRef}
      className={styles.menu} // CSS modul haszn√°lata
      style={{
        position: 'fixed', // Fix poz√≠ci√≥ a viewport-hoz k√©pest
        top: `${position.top}px`,
        left: `${position.left}px`,
        zIndex: 1050, // Magas z-index, hogy minden f√∂l√∂tt legyen
      }}
      // Megakad√°lyozza, hogy a men√ºre kattint√°s bez√°rja azt
      onClick={(e) => e.stopPropagation()}
    >
      {/* T√©nyleges men√ºpontok */}
      {onSave && (
        <button className={styles.menuItem} onClick={() => handleAction(onSave)}>
          {saveText}
        </button>
      )}
      {onShare && (
        <button className={styles.menuItem} onClick={() => handleAction(onShare)}>
          üîó Share
        </button>
      )}
      {onAnalyze && (
        <button className={styles.menuItem} onClick={() => handleAction(onAnalyze)}>
          üìä Analyze News
        </button>
      )}
      {onHideSource && (
        <button className={styles.menuItem} onClick={() => handleAction(onHideSource)}>
          üö´ Hide Source
        </button>
      )}
      {url && (
        <button
          className={styles.menuItem}
          onClick={() => {
            window.open(url, '_blank', 'noopener,noreferrer');
            handleAction(); // Csak bez√°r√°s
          }}
        >
          üåê Open Original in New Tab
        </button>
      )}
      {/* Ide j√∂hetnek tov√°bbi men√ºpontok k√©s≈ëbb */}
    </div>
  );
};

export default CardMoreMenu;
