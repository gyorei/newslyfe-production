// src\components\VideoPanel\useVideoData.ts
import { useState, useEffect, useCallback, useRef } from 'react';
import { apiClient } from '../../apiclient/apiClient';

// ========================================
// üé• VIDEO DATA HOOK
// ========================================
// Ez CSAK vide√≥ adatokat kezel!
// NEM keverj√ºk a h√≠r adatokkal!

export interface VideoDataState {
  videoItems: any[]; // k√©s≈ëbb: YouTubeVideo[]
  loading: boolean;
  error: Error | string | null;
  lastFetched: Date | null;
}

export interface UseVideoDataOptions {
  activeTabId: string;
  isVideoMode: boolean;
  autoRefresh?: boolean;
  refreshInterval?: number; // milliszekundumokban
  country?: string | null; // ‚úÖ JAV√çTVA: null is megengedett t√≠pus
  // maxVideos?: number; // ‚úÖ KIKOMMENT√ÅLVA: maxim√°lis vide√≥ sz√°m csatorn√°nk√©nt
  // maxAgeDays?: number; // ‚úÖ KIKOMMENT√ÅLVA: maxim√°lis vide√≥ √©letkor napokban
}

// ‚úÖ √öJ: Fejlettebb vide√≥ cache rendszer
class VideoCache {
  private static instance: VideoCache;
  private cache: Map<string, { data: any[], timestamp: number }> = new Map();
  private readonly DEFAULT_MAX_AGE_MS = 5 * 60 * 1000; // 5 perc alap√©rtelmezetten

  private constructor() {
    console.log('[VideoCache] üé¨ Vide√≥ cache rendszer inicializ√°lva');
  }

  public static getInstance(): VideoCache {
    if (!VideoCache.instance) {
      VideoCache.instance = new VideoCache();
    }
    return VideoCache.instance;
  }

  public set(key: string, data: any[]): void {
    this.cache.set(key, { data, timestamp: Date.now() });
    console.log(`[VideoCache] üíæ Mentve a cache-be: ${key} (${data.length} vide√≥)`);
  }

  public get(key: string): any[] | null {
    const entry = this.cache.get(key);
    if (!entry) return null;
    return entry.data;
  }

  public isFresh(key: string, maxAgeMs: number = this.DEFAULT_MAX_AGE_MS): boolean {
    const entry = this.cache.get(key);
    if (!entry) return false;
    
    const age = Date.now() - entry.timestamp;
    const isFresh = age < maxAgeMs;
    
    if (isFresh) {
      console.log(`[VideoCache] ‚úÖ Friss cache: ${key} (${Math.round(age/1000)}s)`);
    } else {
      console.log(`[VideoCache] ‚è∞ Lej√°rt cache: ${key} (${Math.round(age/1000)}s)`);
    }
    
    return isFresh;
  }
  
  // ‚úÖ √öJ: Helyi t√°rol√≥ba ment√©s/bet√∂lt√©s (localStorage alap√∫)
  public saveToStorage(): void {
    try {
      // Csak a friss adatokat mentj√ºk
      const freshEntries: Record<string, { data: any[], timestamp: number }> = {};
      
      this.cache.forEach((value, key) => {
        if (this.isFresh(key, 30 * 60 * 1000)) { // 30 perces cache
          freshEntries[key] = value;
        }
      });
      
      localStorage.setItem('videoCache', JSON.stringify(freshEntries));
      console.log(`[VideoCache] üì¶ Mentve a helyi t√°rol√≥ba (${Object.keys(freshEntries).length} elem)`);
    } catch (error) {
      console.error('[VideoCache] Hiba a helyi t√°rol√≥ba ment√©s sor√°n:', error);
    }
  }
  
  public loadFromStorage(): void {
    try {
      const storedData = localStorage.getItem('videoCache');
      if (!storedData) return;
      
      const parsed = JSON.parse(storedData);
      
      // Bet√∂ltj√ºk a mentett adatokat a mem√≥ria cache-be
      Object.entries(parsed).forEach(([key, value]: [string, any]) => {
        this.cache.set(key, value);
      });
      
      console.log(`[VideoCache] üì• Bet√∂ltve a helyi t√°rol√≥b√≥l (${Object.keys(parsed).length} elem)`);
    } catch (error) {
      console.error('[VideoCache] Hiba a helyi t√°rol√≥b√≥l bet√∂lt√©s sor√°n:', error);
    }
  }
  
  // ‚úÖ √öJ: Cache tiszt√≠t√°s (lej√°rt elemek elt√°vol√≠t√°sa)
  public cleanup(maxAgeMs: number = this.DEFAULT_MAX_AGE_MS): void {
    const keysToDelete: string[] = [];
    
    this.cache.forEach((value, key) => {
      if (!this.isFresh(key, maxAgeMs)) {
        keysToDelete.push(key);
      }
    });
    
    keysToDelete.forEach(key => this.cache.delete(key));
    console.log(`[VideoCache] üßπ Cache tiszt√≠t√°s: ${keysToDelete.length} lej√°rt elem elt√°vol√≠tva`);
  }
}

export const useVideoData = ({
  activeTabId,
  isVideoMode,
  autoRefresh = false,
  refreshInterval = 300000, // 5 perc alap√©rtelmezetten
  country = undefined, // Orsz√°g sz≈±r√©s
  // maxVideos = 100, // ‚úÖ KIKOMMENT√ÅLVA: alap√©rtelmezett 100 vide√≥
  // maxAgeDays = 7, // ‚úÖ KIKOMMENT√ÅLVA: alap√©rtelmezett 7 nap
}: UseVideoDataOptions): VideoDataState & {
  refreshVideos: () => Promise<any[] | void>; // ‚úÖ JAV√çTVA: visszat√©r√©si t√≠pus jav√≠t√°sa, void eset√©t is figyelembe veszi
  clearError: () => void;
} => {
  // ========================================
  // üé• VIDEO STATE KEZEL√âS
  // ========================================
  const [videoItems, setVideoItems] = useState<any[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<Error | string | null>(null);
  const [lastFetched, setLastFetched] = useState<Date | null>(null);
  const intervalRef = useRef<number | null>(null);

  // ‚úÖ JAV√çTVA: Vide√≥ cache inicializ√°l√°sa √©s bet√∂lt√©se
  const videoCache = VideoCache.getInstance();
  const lastRequestTimestampRef = useRef<number>(0);
  const CACHE_THROTTLE_MS = 2000; // 2 m√°sodperces throttle az API k√©r√©sek k√∂z√∂tt
  
  // ‚úÖ √öJ: Cache bet√∂lt√©se a localStorage-b√≥l inicializ√°l√°skor
  useEffect(() => {
    videoCache.loadFromStorage();
    
    // Takar√≠t√°s az alkalmaz√°s bez√°r√°sakor
    return () => {
      videoCache.saveToStorage();
    };
  }, []);
  
  // ‚úÖ √öJ: Cache kulcs gener√°l√°sa
  const getCacheKey = useCallback((countryParam?: string | null): string => {
    return `video-${countryParam || 'all'}`;
  }, []);

  // ========================================
  // üé• VIDEO FETCHING LOGIKA
  // ========================================
  const fetchVideoData = useCallback(async (forceRefresh: boolean = false) => {
    if (!isVideoMode) {
      console.log('[useVideoData] Nem vide√≥ m√≥d, adatlek√©r√©s kihagyva');
      return;
    }
    
    const cacheKey = getCacheKey(country);
    
    // ‚úÖ JAV√çTVA: Cache ellen≈ërz√©s √©s haszn√°lat
    if (!forceRefresh && videoCache.isFresh(cacheKey)) {
      const cachedData = videoCache.get(cacheKey);
      if (cachedData && cachedData.length > 0) {
        console.log(`[useVideoData] üü¢ Vide√≥ adatok bet√∂ltve cache-b≈ël: ${country || 'all'} (${cachedData.length} vide√≥)`);
        setVideoItems(cachedData);
        setLastFetched(new Date());
        return cachedData;
      }
    }
    
    // ‚úÖ √öJ: Throttle v√©delem a t√∫l gyakori API h√≠v√°sok ellen
    const now = Date.now();
    if (now - lastRequestTimestampRef.current < CACHE_THROTTLE_MS && !forceRefresh) {
      console.log(`[useVideoData] üõ°Ô∏è API k√©r√©s throttle, kihagyva (${Math.round((now - lastRequestTimestampRef.current)/1000)}s)`);
      return;
    }
    
    lastRequestTimestampRef.current = now;
    
    // API adatlek√©r√©s logika
    setLoading(true);
    setError(null);
    
    try {
      console.log(`[useVideoData] üîÑ Vide√≥ adatok lek√©r√©se API-b√≥l: ${country || 'all'}`);
      
      // ‚úÖ JAV√çTVA: Az apiClient.getVideoNews f√ºggv√©ny megh√≠v√°sa el≈ëtt konvert√°ljuk a country t√≠pus√°t
      // Csak string vagy undefined lehet, a null √©rt√©ket undefined-re konvert√°ljuk
      const countryParam = country === null ? undefined : country;
      
      const response = await apiClient.getVideoNews({ 
        country: countryParam, // ‚úÖ JAV√çTVA: null helyett undefined
        // maxVideos, // ‚úÖ KIKOMMENT√ÅLVA
        // maxAgeDays // ‚úÖ KIKOMMENT√ÅLVA
      });
      
      if (response.success && response.videos) {
        console.log(`[useVideoData] ‚úÖ Sikeres API v√°lasz: ${response.videos.length} vide√≥`);
        setVideoItems(response.videos);
        setLastFetched(new Date());
        
        // ‚úÖ JAV√çTVA: Cache ment√©s
        videoCache.set(cacheKey, response.videos);
        // Minden 10. lek√©r√©s ut√°n mentj√ºk a cache-t localStorage-ba
        if (Math.random() < 0.1) {
          videoCache.saveToStorage();
        }
        
        return response.videos;
      } else {
        throw new Error('Invalid response format from video API');
      }

    } catch (err) {
      console.error('[useVideoData] üé• Hiba a vide√≥ adatok lek√©r√©sekor:', err);
      setError(err instanceof Error ? err : 'Failed to fetch video data');
      setVideoItems([]);
    } finally {
      setLoading(false);
    }
  }, [isVideoMode, country, getCacheKey]);

  // ========================================
  // üé• MANUAL REFRESH FUNKCI√ì
  // ========================================
  const refreshVideos = useCallback(async () => {
    console.log('[useVideoData] üîÑ Manu√°lis vide√≥ friss√≠t√©s k√©rve');
    return fetchVideoData(true); // ‚úÖ JAV√çTVA: most m√°r helyes a visszat√©r√©si t√≠pus
  }, [fetchVideoData]);

  // ========================================
  // üé• ERROR CLEAR FUNKCI√ì
  // ========================================
  const clearError = useCallback(() => {
    setError(null);
  }, []);

  // ========================================
  // üé• AUTO REFRESH LOGIKA
  // ========================================
  useEffect(() => {
    if (!isVideoMode) {
      // JAV√çT√ÅS: Csak akkor logoljuk, ha t√©nylegesen video m√≥dban voltunk
      return;
    }

    if (autoRefresh) {
      // console.log(`[useVideoData] üé• Auto refresh bekapcsolva: ${refreshInterval}ms`);
      
      const interval = setInterval(() => {
        // console.log('[useVideoData] üé• Auto refresh fut...');
        fetchVideoData(true); // force refresh az automatikus friss√≠t√©sn√©l
      }, refreshInterval);

      return () => {
        // console.log('[useVideoData] üé• Auto refresh le√°ll√≠tva');
        clearInterval(interval);
      };
    }
  }, [isVideoMode, autoRefresh, refreshInterval, fetchVideoData]);

  // ========================================
  // üé• INITIAL FETCH LOGIKA
  // ========================================
  useEffect(() => {
    if (isVideoMode && activeTabId) {
      console.log(`[useVideoData] üé• Video m√≥d aktiv√°lva: ${activeTabId}`);
      fetchVideoData();
    } else if (!isVideoMode) {
      // ========================================
      // üé• CLEANUP - NEM VIDEO M√ìDBAN
      // ========================================
      // JAV√çT√ÅS: Csak akkor logoljuk, ha t√©nylegesen video m√≥dban voltunk
      setVideoItems([]);
      setError(null);
      setLastFetched(null);
    }
  }, [isVideoMode, activeTabId, fetchVideoData]);

  // ========================================
  // üé• RETURN STATE √âS FUNKCI√ìK
  // ========================================
  return {
    videoItems,
    loading,
    error,
    lastFetched,
    refreshVideos,
    clearError,
  };
};

export default useVideoData;
