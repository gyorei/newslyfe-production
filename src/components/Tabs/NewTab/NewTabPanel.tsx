/*
import * as React from 'react';
import { useState } from 'react';
import styles from './NewTab.module.css';
import { detectGeoQuery } from './geo/GeoMatcher';
import { useSimpleGeoSearch } from './geo/useSimpleGeoSearch';
import { NewsItem } from '../../../types';
import { HistoryPanel } from '../../History';

interface NewTabPanelProps {
  title: string;
  onConfigChange?: (mode: 'news' | 'browse' | 'search') => void;
  onRegionSelect?: (region: string, type: 'country' | 'continent' | 'region') => void;
  // ‚úÖ √öJ: Single Tab Mode callback
  onSearchComplete?: (results: NewsItem[], query: string, geoResult: any) => void; // ‚úÖ 3. H√°rom param√©ter
}

/**
 * NewTabPanel komponens - ‚úÖ √öJ: Single Tab Mode t√°mogat√°ssal
 * Keres√©s ut√°n ELT≈∞NIK, helyette Panel jelenik meg (Google-szer≈± UX)
 *//*
export const NewTabPanel: React.FC<NewTabPanelProps> = ({
  title: _title,
  onConfigChange: _onConfigChange,
  onRegionSelect,
  // ‚úÖ √öJ: Callback prop
  onSearchComplete,
}) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [activeButton, setActiveButton] = useState('home');

  // Megl√©v≈ë geo-keres√©si hook haszn√°lata
  const { performGeoSearch, isSearching, lastResult } = useSimpleGeoSearch();

  // Fels≈ë gombok kezel√©se
  const handleTopButtonClick = (action: string) => {
    setActiveButton(action);
    console.log(`Fels≈ë gomb kattintva: ${action}`);
  };

  // ‚úÖ M√ìDOS√çTOTT: Geo-intelligens keres√©s + Single Tab Mode callback
  const handleSearch = async () => {
    if (!searchTerm.trim()) return;

    console.log(`[NewTabPanel] Geo-keres√©s ind√≠t√°sa: "${searchTerm}"`);

    try {
      // 1. Geo-felismer√©s a megl√©v≈ë GeoMatcher-rel
      const geoResult = detectGeoQuery(searchTerm, 'hu');

      if (geoResult.isValid && geoResult.geoMatch) {
        console.log(`[NewTabPanel] Geo tal√°lat:`, geoResult.geoMatch);

        // 2. Callback h√≠v√°sa a sz√ºl≈ë komponens fel√©
        if (onRegionSelect) {
          onRegionSelect(geoResult.geoMatch.code, geoResult.geoMatch.type);
        }

        // 3. H√≠rek lek√©r√©se a megl√©v≈ë hook-kal
        const results = await performGeoSearch(searchTerm);
        console.log(`[NewTabPanel] Keres√©si eredm√©nyek:`, results.length, 'h√≠r');

        // ‚úÖ 3. Single Tab Mode aktiv√°l√°sa (h√°rom param√©terrel)
        if (onSearchComplete && results.length > 0) {
          console.log(`[NewTabPanel] Single Tab Mode aktiv√°l√°s: ${results.length} h√≠r`);
          onSearchComplete(results, searchTerm, geoResult); // ‚úÖ 3 param√©ter
          return;
        }
      } else {
        console.log(`[NewTabPanel] "${searchTerm}" nem ismert orsz√°g/kontinens`);

        // ‚úÖ 3. Sikertelen keres√©s is aktiv√°lhatja Single Tab Mode-ot
        if (onSearchComplete) {
          onSearchComplete([], searchTerm, geoResult); // ‚úÖ 3 param√©ter
          return;
        }
      }
    } catch (error) {
      console.error('[NewTabPanel] Keres√©si hiba:', error);

      // ‚úÖ 3. Hiba eset√©n is aktiv√°lhat√≥ Single Tab Mode
      if (onSearchComplete) {
        onSearchComplete([], searchTerm, null); // ‚úÖ 3 param√©ter
        return;
      }
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  return (
    <div className={styles.container}>
      <div className={styles.topButtonsBar}>
        <button
          className={`${styles.topButton} ${activeButton === 'home' ? styles.active : ''}`}
          onClick={() => setActiveButton('home')}
        >
          Home
        </button>
        <button
          className={`${styles.topButton} ${activeButton === 'dashboard' ? styles.active : ''}`}
          onClick={() => setActiveButton('dashboard')}
        >
          Dashboard
        </button>
        <button
          className={`${styles.topButton} ${activeButton === 'bookmarks' ? styles.active : ''}`}
          onClick={() => setActiveButton('bookmarks')}
        >
          Bookmarks
        </button>
        <button
          className={`${styles.topButton} ${activeButton === 'history' ? styles.active : ''}`}
          onClick={() => setActiveButton('history')}
        >
          History
        </button>
      </div>

      <div className={styles.centerSection}>
        {activeButton === 'history' ? (
          <HistoryPanel />
        ) : (
          <div className={styles.searchArea}>
            <div className={styles.searchContainer}>
              <input
                type="text"
                className={styles.searchInput}
                placeholder="Search for a country or continent... (e.g. russia, europe)"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                onKeyPress={handleKeyPress}
              />
            </div>
            {isSearching && (
              <div
                style={{
                  marginTop: '20px',
                  padding: '10px',
                  background: '#2d2d30',
                  borderRadius: '8px',
                  textAlign: 'center',
                }}
              >
                <p>üîç Searching in progress...</p>
              </div>
            )}
       
          </div>
        )}
      </div>
    </div>
  );
};

export default NewTabPanel;
*/