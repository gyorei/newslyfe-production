// File: src/components/Content/hooks/useNewsData.ts
import { useState, useEffect, useCallback, useRef, useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import { Tab as AppTab, NewsItem } from '../../../types';
import FrontLocal from '../../LocalNews/FrontLocal/FrontLocal';
// √öJ: useStorage import a maxAgeHours be√°ll√≠t√°s olvas√°s√°hoz
import { useStorage } from '../../../hooks/useStorage';
// √öJ: Csak a konstans import√°l√°sa, a bridge-et nem haszn√°ljuk itt (Panel komponensben van)
import { MAX_AGE_HOURS_PREFERENCE_KEY } from '../../Utility/Settings/ContentSettings/TimeSettings';
import { UserHistoryService } from '../../History/utils/UserHistoryService';
// ‚úÖ √öJ: useTabCache import a cache √°llapot ellen≈ërz√©s√©hez
import { useTabCache } from '../../../hooks/useTabStorage/useTabCache';

/**
 * API v√°lasz item t√≠pusdefin√≠ci√≥ a t√©rk√©pes√≠t√©shez
 */
interface NewsApiItem {
  id: string;
  title: string;
  description: string;
  url: string;
  imageUrl?: string;
  source: string;
  sourceId: string;
  date: string;
  timestamp: number;
  country?: string;
  continent?: string;
  category?: string | null;
  categories?: string[];
}

/**
 * API v√°lasz form√°tum
 */
interface NewsApiResponse {
  news: NewsApiItem[];
  meta?: {
    hasMore?: boolean;
    total?: number;
    page?: number;
  };
}

/**
 * Sz≈±r≈ë t√≠pusa a h√≠rek lek√©r√©s√©hez
 */
interface NewsFilters {
  country?: string;
  continent?: string;
  importanceLevel?: number;
  category?: string | null;
  source?: string[];
  searchTerm?: string;
  limit?: number;
  maxAgeHours?: number; // √öJ: Id≈ëalap√∫ sz≈±r√©s t√°mogat√°sa
  torzsMode?: boolean; // √öJ: T√∂rzs h√≠radat m√≥d t√°mogat√°sa
  forceRefresh?: boolean; // ‚úÖ √öJ: Cache bypass t√°mogat√°sa
}

/**
 * Hook a h√≠rek adatainak lek√©r√©s√©re, kezel√©s√©re √©s a kapcsol√≥d√≥ √°llapotok menedzsel√©s√©re.
 */
interface UseNewsDataProps {
  activeTab: AppTab;
  isNewTab: boolean;
  activeTabId: string;
  initialNewsItems?: NewsItem[];
  requestToken?: string;
  abortSignal?: AbortSignal;
  // --- √öJ: setNewsItemsToken callback ---
  setNewsItemsToken?: (token: string) => void;
}

// --- √öJ: Egys√©ges filter el≈ëk√©sz√≠t≈ë seg√©df√ºggv√©ny ---
function prepareFilters(base: NewsFilters, maxAgeHours: number, forceRefresh = false): NewsFilters {
  const torzsMode = base.torzsMode || false;
  return {
    ...base,
    torzsMode,
    forceRefresh,
    maxAgeHours: torzsMode ? 24 : maxAgeHours,
  };
}

// --- √öJ: CacheEntry t√≠pus az id≈ëb√©lyeges cache-hez ---
type CacheEntry = { timestamp: number; items: NewsItem[] };

export function useNewsData({
  activeTab,
  isNewTab,
  activeTabId,
  initialNewsItems,
  requestToken,
  abortSignal,
  setNewsItemsToken, // --- √öJ: callback param√©ter ---
}: UseNewsDataProps) {
  const [newsItems, setNewsItems] = useState<NewsItem[]>(initialNewsItems || []);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [refreshKey, setRefreshKey] = useState(0);
  const [hasMoreSources, setHasMoreSources] = useState(true);
  const { t } = useTranslation();

  // ‚úÖ JAV√çT√ÅS: Duplik√°lt API h√≠v√°sok megel≈ëz√©se
  const isLoadingRef = useRef(false);
  const lastRequestRef = useRef<string>('');
  // --- requestCacheRef most m√°r id≈ëb√©lyeges cache-t t√°rol ---
  const requestCacheRef = useRef<Map<string, CacheEntry>>(new Map());

  // √öJ: maxAgeHours √°llapot kezel√©se
  const [maxAgeHours, setMaxAgeHours] = useState<number>(24); // Alap√©rtelmezett: 24 √≥ra

  // √öJ: useStorage hook az id≈ëbe√°ll√≠t√°sok olvas√°s√°hoz
  const { getUserPreference } = useStorage();
  
  // ‚úÖ √öJ: Tab cache integr√°l√°sa a frissess√©g ellen≈ërz√©s√©hez
  const { getTabContent, isCacheFresh, invalidateCache } = useTabCache();
  
  // ‚úÖ √öJ: Cache-frissess√©g ellen≈ërz≈ë konstans - Feature flag a biztons√°gos bevezet√©shez
  const FEATURE_USE_CACHE_FRESHNESS = true;

  // ‚úÖ STABILIZ√ÅLT: maxAgeHours bet√∂lt√©se √©s figyel√©se
  useEffect(() => {
    const loadMaxAgeHours = async () => {
      try {
        // Bet√∂lt√©s IndexedDB-b≈ël
        const maxAgePref = await getUserPreference(MAX_AGE_HOURS_PREFERENCE_KEY);
        if (maxAgePref && maxAgePref.value !== undefined) {
          const ageValue = Number(maxAgePref.value);
          setMaxAgeHours(ageValue);
     //     console.log(`[useNewsData] maxAgeHours bet√∂ltve: ${ageValue} √≥ra`);
        } else {
          // Fallback localStorage-b√≥l
          const savedMaxAge = localStorage.getItem('maxAgeHours');
          if (savedMaxAge) {
            const ageValue = Number(savedMaxAge);
            setMaxAgeHours(ageValue);
     //       console.log(`[useNewsData] maxAgeHours bet√∂ltve localStorage-b√≥l: ${ageValue} √≥ra`);
          }
        }
      } catch (error) {
   //     console.error('[useNewsData] Hiba a maxAgeHours bet√∂lt√©sekor:', error);
      }
    };

    loadMaxAgeHours();
  }, [getUserPreference]); // ‚úÖ STABILIZ√ÅLT: Csak bet√∂lt√©sre haszn√°ljuk

  // ‚úÖ OPTIMALIZ√ÅLT: Lok√°lis h√≠rek lek√©r√©se cache-sel √©s duplik√°ci√≥-v√©delemmel, id≈ëb√©lyeges cache
  const fetchLocalNews = useCallback(
    async (filters: NewsFilters = {}) => {
      console.log('[DEBUG] fetchLocalNews kapott sz≈±r≈ëi:', filters);
      console.log('--- useNewsData.fetchLocalNews ---', filters);
      if (abortSignal?.aborted) {
   //     console.log('[USENEWSDATA-DEBUG] fetchLocalNews megszak√≠tva, filter:', filters);
        return [];
      }
      const currentToken = requestToken;
      try {
    //    console.log('[USENEWSDATA-DEBUG] fetchLocalNews h√≠v√°s, filter:', filters);
        // ‚úÖ CACHE KULCS: Egyedi azonos√≠t√≥ a k√©r√©shez
        const cacheKey = JSON.stringify({
          country: filters.country,
          importanceLevel: filters.importanceLevel || 10,
          category: filters.category,
          maxAgeHours: filters.maxAgeHours || maxAgeHours,
          torzsMode: filters.torzsMode,
          forceRefresh: filters.forceRefresh, // ‚úÖ √öJ: forceRefresh cache kulcsban
        });

        // --- PATCH: forceRefresh eset√©n mem√≥riacache t√∂rl√©se √©s kihagy√°sa ---
        if (filters.forceRefresh) {
          requestCacheRef.current.delete(cacheKey); // Mem√≥riacache t√∂rl√©se
        } else if (requestCacheRef.current.has(cacheKey)) {
          // --- KOMMENTEZVE: forceRefresh eset√©n ne adjon vissza cache-t ---
          // const cacheEntry = requestCacheRef.current.get(cacheKey);
          // if (cacheEntry && Date.now() - cacheEntry.timestamp < 5 * 60 * 1000) {
          //   setNewsItems(cacheEntry.items);
          //   setHasMoreSources(cacheEntry.items.length >= 30);
          //   if (setNewsItemsToken) setNewsItemsToken(currentToken!);
          //   return cacheEntry.items;
          // }
        }

  //      console.log(`[useNewsData] FrontLocal.getNews h√≠v√°sa maxAgeHours: ${maxAgeHours}`, filters);

        // √öJ: Ha pontosan egy forr√°s van a filterben, akkor a filtert v√°ltozatlanul √°tadjuk a FrontLocal.getNews-nek,
        // √≠gy a backend sourceId query param√©terrel h√≠v√≥dik meg (forr√°s tab eset√©n)
        let rssNewsItems: any[] = [];
        if (filters.source && Array.isArray(filters.source) && filters.source.length === 1) {
     //     console.log('[USENEWSDATA-DEBUG] Egy forr√°sos fetchLocalNews, filter:', filters);
          rssNewsItems = await FrontLocal.getNews({
            ...filters,
            useGeoLocation: true,
            isCleanTab: false,
            maxAgeHours: filters.maxAgeHours || maxAgeHours,
            torzsMode: filters.torzsMode,
            forceRefresh: filters.forceRefresh,
          });
     //     console.log('[USENEWSDATA-DEBUG] Egy forr√°sos fetchLocalNews, visszakapott h√≠rek:', rssNewsItems.length);
        } else {
     //     console.log('[USENEWSDATA-DEBUG] Norm√°l fetchLocalNews, filter:', filters);
          rssNewsItems = await FrontLocal.getNews({
            country: filters.country,
            importanceLevel: filters.importanceLevel || 10,
            category: filters.category,
            source: filters.source,
            useGeoLocation: true,
            isCleanTab: false,
            maxAgeHours: filters.maxAgeHours || maxAgeHours,
            torzsMode: filters.torzsMode,
            forceRefresh: filters.forceRefresh,
          });
    //      console.log('[USENEWSDATA-DEBUG] Norm√°l fetchLocalNews, visszakapott h√≠rek:', rssNewsItems.length);
        }

        // Token check
        if (requestToken && currentToken !== requestToken) {
     //     console.warn('[useNewsData] üõë Token mismatch ‚Äì fetchLocalNews v√°lasz figyelmen k√≠v√ºl hagyva');
          return [];
        }
/*
       console.log(
          `[useNewsData] ${rssNewsItems.length} h√≠r √©rkezett a FrontLocal-b√≥l (${filters.forceRefresh ? 'FORCE REFRESH' : `${maxAgeHours}h sz≈±r√©ssel`})`,
        );
*/
        // Konvert√°l√°s RssNewsItem[] ‚Üí NewsItem[] form√°tumra
        const newsItems = rssNewsItems.map(
          (item) =>
            ({
              id: item.id,
              title: item.title,
              description: item.description,
              imageUrl: item.imageUrl || '',
              source: item.source.name,
              sourceId: item.source.id,
              date: item.pubDate,
              timestamp: item.timestamp,
              url: item.link,
              country: item.source.country || filters.country || 'unknown',
              continent: item.source.continent || 'unknown',
              categories: item.categories || [],
            }) as NewsItem,
        );

        // ‚úÖ CACHE MENT√âS: Eredm√©ny t√°rol√°sa id≈ëb√©lyeggel
        // requestCacheRef.current.set(cacheKey, { timestamp: Date.now(), items: newsItems });

        // ‚úÖ CACHE TISZT√çT√ÅS: Max 10 bejegyz√©s t√°rol√°sa
        // if (requestCacheRef.current.size > 10) {
        //   const oldestKey = requestCacheRef.current.keys().next().value;
        //   if (oldestKey) {
        //     requestCacheRef.current.delete(oldestKey);
        //   }
        // }

        setHasMoreSources(newsItems.length >= 30);
        setNewsItems(newsItems);
        if (setNewsItemsToken) setNewsItemsToken(currentToken!);
        return newsItems;
      } catch (err) {
        if ((err as Error).name === 'AbortError') {
   //       console.log('[useNewsData] Fetch megszak√≠tva (abort)');
          return [];
        }
    //    console.error(`[useNewsData] FrontLocal hiba:`, err);
        throw err;
      }
    },
    [maxAgeHours, abortSignal, requestToken, setNewsItemsToken],
  );

  // 2. M√ìDOS√çTOTT: Kontinens h√≠rek lek√©r√©se maxAgeHours param√©terrel √©s T√ñRZS M√ìD T√ÅMOGAT√ÅSSAL
  const fetchContinentNews = useCallback(
    async (continent: string, country?: string, filters: NewsFilters = {}) => {
      if (abortSignal?.aborted) {
   //     console.log('[useNewsData] ‚õî K√©r√©s megszak√≠tva m√©g a fetchContinentNews el≈ëtt');
        return [];
      }
      const currentToken = requestToken;
      try {
        const params = new URLSearchParams();
        if (country) params.append('country', country);
        params.append('limit', '1000');
        params.append('importanceLevel', '10');

        // üéØ √öJ: T√ñRZS M√ìD T√ÅMOGAT√ÅS KONTINENS H√çREKHEZ
        if (filters.torzsMode) {
          params.append('torzsMode', 'true');
          params.append('maxAgeHours', '24'); // 24 √≥ra t√∂rzs m√≥dban
    //      console.log(`[useNewsData] üéØ KONTINENS T√ñRZS M√ìD: ${continent} - 24 √≥r√°s h√≠rek`);
        } else {
          // √öJ: maxAgeHours param√©ter hozz√°ad√°sa
          params.append('maxAgeHours', (filters.maxAgeHours || maxAgeHours).toString());
          console.log(
            `[useNewsData] KONTINENS NORM√ÅL M√ìD: ${continent} - ${filters.maxAgeHours || maxAgeHours}h h√≠rek`,
          );
        }

        // Ha fetch-et haszn√°lsz:
        // const response = await fetch(url, { signal: abortSignal });
        // const data = await response.json();
        // Jelenleg fallback: sima fetch abortSignal n√©lk√ºl
        const url = `/api/continent/${continent}/news?${params.toString()}`;
   //     console.log(`[useNewsData] Kontinens h√≠rek lek√©rdez√©se - ${url}`);

        // V√âGLEGES: fetch signal √°tad√°sa
        const response = await fetch(url, { signal: abortSignal });
        if (!response.ok) throw new Error(`API hiba: ${response.status} ${response.statusText}`);

        const data = (await response.json()) as NewsApiResponse;
        // Token check
        if (requestToken && currentToken !== requestToken) {
    //      console.warn('[useNewsData] üõë Token mismatch ‚Äì fetchContinentNews v√°lasz figyelmen k√≠v√ºl hagyva');
          return [];
        }
        /*
        console.log(
          `[useNewsData] ${data.news?.length || 0} kontinens h√≠r bet√∂ltve (${continent}, ${filters.torzsMode ? '24h T√ñRZS' : `${filters.maxAgeHours || maxAgeHours}h`}).`,
        );*/
        setHasMoreSources(data.meta?.hasMore || false);
        const items = (data.news || []).map(
          (item: NewsApiItem) =>
            ({
              ...item,
              imageUrl: item.imageUrl || '',
              continent: item.continent || continent,
              country: item.country || country || 'unknown',
            }) as NewsItem,
        );
        setNewsItems(items);
        if (setNewsItemsToken) setNewsItemsToken(currentToken!);
        return items;
      } catch (err) {
        if ((err as Error).name === 'AbortError') {
    //      console.warn('[fetchContinentNews] ‚õî Fetch megszak√≠tva AbortController-rel');
          return [];
        }
   //     console.error(`[useNewsData] Kontinens h√≠r API hiba:`, err);
        throw err;
      }
    },
    [maxAgeHours, abortSignal, requestToken, setNewsItemsToken],
  );

  // ‚úÖ OPTIMALIZ√ÅLT: Egys√©ges t√∂rzs logika duplik√°ci√≥-v√©delemmel - STABILIZ√ÅLT DEPENDENCIES
  const fetchNews = useCallback(async () => {
    const currentToken = requestToken;
    if (abortSignal?.aborted) {
      return [];
    }
    if (isNewTab || activeTab?.mode === 'search') {
      setNewsItems([]);
      if (setNewsItemsToken) setNewsItemsToken(currentToken!);
      return [];
    }

    // ‚úÖ √öJ: Ellen≈ërizz√ºk a cache frissess√©g√©t a tabId alapj√°n
    const tabCacheIsFresh = await isCacheFresh(activeTabId);
    
    // ‚úÖ JAV√çT√ÅS: Orsz√°g valid√°ci√≥ a cache bet√∂lt√©skor
    const expectedCountry = activeTab?.filters?.country;
    const tabContentFromCache = tabCacheIsFresh ? await getTabContent(activeTabId, expectedCountry) : null;
    
    // ‚úÖ JAV√çT√ÅS: Orsz√°g valid√°ci√≥ a cache-ben t√°rolt adatokra
    if (tabContentFromCache && expectedCountry) {
      const cachedCountry = tabContentFromCache.meta?.country;
      if (cachedCountry && cachedCountry !== expectedCountry) {
        console.log(`[useNewsData] ‚ö†Ô∏è Cache orsz√°g mismatch (${cachedCountry} ‚â† ${expectedCountry}) ‚Äì cache invalid√°l√°s: ${activeTabId}`);
        // Cache invalid√°l√°s √©s √∫jrat√∂lt√©s k√©nyszer√≠t√©se
        await invalidateCache(activeTabId);
        // Folytatjuk az API h√≠v√°ssal
      } else if (FEATURE_USE_CACHE_FRESHNESS && tabCacheIsFresh && tabContentFromCache?.meta?.originalNews) {
        console.log(`[useNewsData] üü¢ Friss cache haszn√°lata (${expectedCountry}), API h√≠v√°s kihagyva: ${activeTabId}`);
        
        // Ha van friss cache √©s az orsz√°g egyezik, be√°ll√≠tjuk az adatokat
        const cachedNewsItems = tabContentFromCache.meta.originalNews;
        // ‚úÖ JAV√çT√ÅS: Explicit t√≠puskonverzi√≥ a hib√°k elker√ºl√©se √©rdek√©ben
        setNewsItems(cachedNewsItems as NewsItem[]);
        if (setNewsItemsToken) setNewsItemsToken(currentToken!);
        return cachedNewsItems as NewsItem[];
      }
    } else if (FEATURE_USE_CACHE_FRESHNESS && tabCacheIsFresh && tabContentFromCache?.meta?.originalNews && !expectedCountry) {
      // Ha nincs orsz√°g megadva, akkor haszn√°ljuk a cache-t
      console.log(`[useNewsData] üü¢ Friss cache haszn√°lata (nincs orsz√°g sz≈±r≈ë), API h√≠v√°s kihagyva: ${activeTabId}`);
      
      const cachedNewsItems = tabContentFromCache.meta.originalNews;
      setNewsItems(cachedNewsItems as NewsItem[]);
      if (setNewsItemsToken) setNewsItemsToken(currentToken!);
      return cachedNewsItems as NewsItem[];
    }
    
    // Ha a cache nem el√©g friss vagy force refresh van, akkor folytatjuk az API h√≠v√°ssal
    if (tabCacheIsFresh) {
      console.log(`[useNewsData] üü† Cache friss, de API h√≠v√°s k√©rve (force refresh): ${activeTabId}`);
    } else {
      console.log(`[useNewsData] ‚ö™ Nincs friss cache vagy lej√°rt, API h√≠v√°s: ${activeTabId}`);
    }

    // ‚úÖ DUPLIK√ÅCI√ì V√âDELEM: Ha m√°r fut egy k√©r√©s
    if (isLoadingRef.current) {
      return [];
    }

    // ‚úÖ K√âR√âS KULCS: Egyedi azonos√≠t√≥ - STABILIZ√ÅLT
    const requestKey = JSON.stringify({
      tabId: activeTabId,
      filters: activeTab?.filters,
      maxAgeHours,
      torzsMode: activeTab?.filters?.torzsMode || false,
    });

    // ‚úÖ ISM√âTL≈êD≈ê K√âR√âS V√âDELEM
    if (lastRequestRef.current === requestKey) {
 //     console.log('[USENEWSDATA-DEBUG] fetchNews azonos k√©r√©s, tabId:', activeTabId);
      return [];
    }

    isLoadingRef.current = true;
    lastRequestRef.current = requestKey;
    setLoading(true);
    setError(null);

    try {
      const currentFilters = prepareFilters(
        activeTab?.filters ?? {},
        maxAgeHours,
        activeTab?.filters?.forceRefresh || false
      );
  //    console.log('[USENEWSDATA-DEBUG] fetchNews ind√≠t√°s, tabId:', activeTabId, 'filter:', currentFilters);
/*
      console.log(
        `[useNewsData] ${currentFilters.torzsMode ? 'üéØ T√ñRZS M√ìD' : 'NORM√ÅL M√ìD'}: ${currentFilters.maxAgeHours}h h√≠rek`,
      );
*/
      let fetchedItems: NewsItem[] = [];
      if (currentFilters.continent && typeof currentFilters.continent === 'string') {
        fetchedItems = await fetchContinentNews(
          currentFilters.continent,
          currentFilters.country,
          currentFilters,
        );
      } else {
        fetchedItems = await fetchLocalNews(currentFilters);
      }
      // Token check
      if (requestToken && currentToken !== requestToken) {
  //      console.warn('[useNewsData] üõë Token mismatch ‚Äì fetchNews v√°lasz figyelmen k√≠v√ºl hagyva');
        return [];
      }
      setNewsItems(fetchedItems);
      if (setNewsItemsToken) setNewsItemsToken(currentToken!);
      return fetchedItems;
    } catch (err) {
      if ((err as Error).name === 'AbortError') {
   //     console.log('[useNewsData] Fetch megszak√≠tva (abort)');
        return [];
      }
      setError(t('content.error.generic', 'An error occurred: {{message}}', { message: err instanceof Error ? err.message : 'Unknown error' }));
      return [];
    } finally {
      isLoadingRef.current = false;
      setLoading(false);
    }
  }, [activeTabId, activeTab?.filters, activeTab?.mode, isNewTab, maxAgeHours, abortSignal, requestToken, setNewsItemsToken, isCacheFresh, getTabContent]); // ‚úÖ √öJ: isCacheFresh √©s getTabContent hozz√°adva

  // --- √öJ: Memoiz√°lt filter hash a dependency array-hez ---
  const filterHash = useMemo(() => JSON.stringify(activeTab?.filters || {}), [activeTab?.filters]);

  // 4. Bet√∂lt√©s ind√≠t√°sa vagy kezdeti adatok haszn√°lata
  useEffect(() => {
    // 1. Ha vannak initial adatok, haszn√°ld ≈ëket √©s l√©pj ki.
    if (initialNewsItems && initialNewsItems.length > 0) {
      setNewsItems(initialNewsItems);
      return;
    }

    // 2. Ha √∫j tab vagy keres√©s m√≥dban vagyunk:
    if ((isNewTab || activeTab?.mode === 'search')) {
      if (newsItems.length > 0) setNewsItems([]);
      return;
    }

    // 3. Ha norm√°l tab, nincs initial adat, mindig fetch-eljen, ha tabId vagy filterHash v√°ltozik!
    if (!isNewTab && activeTab?.mode === 'news' && !initialNewsItems) {
      fetchNews();
    }
  }, [
    initialNewsItems,
    isNewTab,
    activeTabId,
    activeTab?.mode,
    filterHash,
    fetchNews,
    refreshKey,
  ]);

  // 5. "Load more" funkci√≥ - egyszer≈±s√≠tett implement√°ci√≥
  const loadMoreItems = useCallback(async () => {
    if (!hasMoreSources || loading) return;

 //   console.log('[useNewsData] Tov√°bbi h√≠rek bet√∂lt√©se pr√≥b√°l√°sa...');

    // Val√≥s alkalmaz√°sban itt egy pagin√°lt API h√≠v√°s lenne
    // Jelenleg csak figyelmeztet√ºnk, hogy val√≥di implement√°ci√≥ sz√ºks√©ges
 //   console.warn('[useNewsData] loadMoreItems: Val√≥s pagin√°ci√≥ implement√°l√°sa sz√ºks√©ges.');
  }, [hasMoreSources, loading]);

  // 6. √öJ: H√≠rek manu√°lis friss√≠t√©se (a Content.tsx-ben haszn√°lt refreshNewsData)
  const refreshNewsData = useCallback(
    async (background: boolean = false) => {
 //     console.log(`[useNewsData] H√≠rek friss√≠t√©se${background ? ' h√°tt√©rben' : ''}...`);

      // Ha h√°tt√©rben friss√≠t√ºnk, nem mutatunk bet√∂lt√©si √°llapotot
      if (!background) {
        setLoading(true);
      }

      try {
        const currentFilters = prepareFilters(activeTab?.filters ?? {}, maxAgeHours, true);
/*
        console.log(
          `[useNewsData] üîÑ FORCE REFRESH: Cache bypass - ${currentFilters.torzsMode ? 'üéØ T√ñRZS M√ìD' : 'NORM√ÅL M√ìD'}: ${currentFilters.maxAgeHours}h h√≠rek`,
        );
*/
        if (currentFilters.continent && typeof currentFilters.continent === 'string') {
          const freshData = await fetchContinentNews(
            currentFilters.continent,
            currentFilters.country,
            currentFilters,
          );
          setNewsItems(freshData);
          if (setNewsItemsToken) setNewsItemsToken(requestToken!);
   //       console.log(`[useNewsData] ${freshData.length} friss√≠tett h√≠r bet√∂ltve (FORCE REFRESH)`);
          return freshData;
        } else {
          const freshData = await fetchLocalNews(currentFilters);
          setNewsItems(freshData);
          if (setNewsItemsToken) setNewsItemsToken(requestToken!);
  //        console.log(`[useNewsData] ${freshData.length} friss√≠tett h√≠r bet√∂ltve (FORCE REFRESH)`);
          return freshData;
        }
      } catch (err) {
   //     console.error('[useNewsData] Hiba a h√≠rek friss√≠t√©sekor:', err);
        if (!background) {
          setError(t('content.error.refresh', 'Refresh error: {{message}}', { message: err instanceof Error ? err.message : 'Unknown error' }));
        }
        return [];
      } finally {
        if (!background) {
          setLoading(false);
        }
      }
    },
    [activeTab?.filters, maxAgeHours, fetchContinentNews, fetchLocalNews, requestToken, setNewsItemsToken]);

  // ‚úÖ NAPL√ìZ√ÅS: minden sikeres h√≠rek-lek√©r√©s ut√°n
  const lastLoggedFilters = useRef<string>('');
  useEffect(() => {
    if (newsItems.length > 0) {
      const currentFilters = JSON.stringify({
        searchTerm: activeTab?.filters?.searchTerm,
        country: activeTab?.filters?.country,
        continent: activeTab?.filters?.continent,
        source: activeTab?.filters?.source,
      });

      if (lastLoggedFilters.current !== currentFilters) {
        UserHistoryService.logVisit({
          timestamp: Date.now(),
          searchTerm: activeTab?.filters?.searchTerm || activeTab?.filters?.country || activeTab?.filters?.continent || 'unknown',
          country: activeTab?.filters?.country,
          source: activeTab?.filters?.source ? activeTab?.filters?.source.join(',') : undefined,
        });
        lastLoggedFilters.current = currentFilters;
      }
    }
  }, [newsItems, activeTab?.filters]);

  return {
    newsItems,
    loading,
    error,
    handleRetry: () => {
      setError(null);
      setRefreshKey((prev) => prev + 1);
    },
    loadMoreSources: loadMoreItems,
    hasMoreSources,
    setNewsItems,
    refreshNewsData, // √öJ: Az √∫jonnan implement√°lt met√≥dus export√°l√°sa
  };
}
