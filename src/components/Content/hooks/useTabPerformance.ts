/*
√ÅTSZERVEZ√âSI LEHET≈êS√âGEK:

1. Teljes√≠tm√©nym√©r√©s kiszervez√©se √∂n√°ll√≥ szolg√°ltat√°sba
   - √Åthelyezhet≈ë: src\utils\performance k√∂nyvt√°rba
   - √öj f√°jl: TabPerformanceTracker.ts
   - Indokl√°s: A teljes√≠tm√©nym√©r≈ë logika √∫jrahasznos√≠that√≥ m√°s komponensekn√©l is

2. Browser Performance API kezel√©s korszer≈±s√≠t√©se
   - Javaslat: Web Vitals k√∂nyvt√°r integr√°l√°sa
   - El≈ëny√∂k: Standardiz√°lt metrik√°k, jobb kompatibilit√°s

3. UI visszajelz√©sek k√ºl√∂nv√°laszt√°sa
   - √Åthelyezhet≈ë: √öj k√∂nyvt√°rba: src\components\UI\Performance
   - √öj komponens: PerformanceIndicator.tsx
   - Indokl√°s: A m√©r√©s √©s az adatok megjelen√≠t√©s√©nek sz√©tv√°laszt√°sa
*/

import { useCallback, useEffect, useRef } from 'react';

// Konstans prefix a markerekhez, hogy elker√ºlj√ºk a n√©v√ºtk√∂z√©st
const PREFIX = 'tabPerf_';

export interface PerformanceData {
  tabSwitchTotal: number; // Teljes tabv√°lt√°s ideje (ms)
  dbLoadTime: number; // IndexedDB bet√∂lt√©si id≈ë (ms)
  renderTime: number; // React render id≈ë (ms)
  scrollRestoreTime: number; // G√∂rget√©si poz√≠ci√≥ vissza√°ll√≠t√°si ideje (ms)
  initialRender: boolean; // Els≈ë renderel√©s-e vagy m√°r volt bet√∂ltve
  timestamp: string; // Id≈ëb√©lyeg a m√©r√©shez
}

export type PerformancePhase = 'dbLoad' | 'render' | 'scrollRestore' | 'tabSwitch';

export function useTabPerformance() {
  // Performance API el√©rhet≈ës√©g√©nek ellen≈ërz√©se
  const isSupported = useRef<boolean>(
    typeof performance !== 'undefined' &&
      typeof performance.mark === 'function' &&
      typeof performance.measure === 'function',
  );

  // Performance markerek t√°rol√°sa
  const performanceData = useRef<PerformanceData>({
    tabSwitchTotal: 0,
    dbLoadTime: 0,
    renderTime: 0,
    scrollRestoreTime: 0,
    initialRender: true,
    timestamp: new Date().toISOString(),
  });

  // Az utols√≥ 10 m√©r√©s eredm√©nyeinek t√°rol√°sa trendek megfigyel√©s√©hez
  // Fix hossz√∫s√°g√∫ t√∂mb a k√∂rk√∂r√∂s buffer megval√≥s√≠t√°s√°hoz
  const historySize = 10;
  const performanceHistory = useRef<PerformanceData[]>(
    Array(historySize)
      .fill(null)
      .map(() => ({
        tabSwitchTotal: 0,
        dbLoadTime: 0,
        renderTime: 0,
        scrollRestoreTime: 0,
        initialRender: true,
        timestamp: new Date().toISOString(),
      })),
  );
  const historyIndex = useRef<number>(0);

  // Debug seg√≠t≈ë: konzolba √≠rja a m√©r√©si adatokat
  const logPerformanceData = useCallback(() => {
    if (!isSupported.current) {
      console.warn(
        'A Performance API nem el√©rhet≈ë a b√∂ng√©sz≈ëben! A teljes√≠tm√©nym√©r√©s nem m≈±k√∂dik.',
      );
      return;
    }

    const now = new Date().toISOString();
    console.group(`‚ö°Ô∏è Tab Performance Metrics (${now})`);
    console.table([
      {
        ...performanceData.current,
        timestamp: now,
      },
    ]);

    // Csak az √©rv√©nyes m√©r√©seket vessz√ºk figyelembe az √°tlag sz√°m√≠t√°s√°n√°l
    const validMeasurements = performanceHistory.current.filter(
      (data) => data !== null && data.tabSwitchTotal > 0,
    );

    if (validMeasurements.length > 0) {
      const avgData = validMeasurements.reduce(
        (acc, curr) => {
          return {
            tabSwitchTotal: acc.tabSwitchTotal + curr.tabSwitchTotal,
            dbLoadTime: acc.dbLoadTime + curr.dbLoadTime,
            renderTime: acc.renderTime + curr.renderTime,
            scrollRestoreTime: acc.scrollRestoreTime + curr.scrollRestoreTime,
            initialRender: false,
            timestamp: now,
          };
        },
        {
          tabSwitchTotal: 0,
          dbLoadTime: 0,
          renderTime: 0,
          scrollRestoreTime: 0,
          initialRender: false,
          timestamp: now,
        },
      );

      const count = validMeasurements.length;
      console.log(`üìä √Åtlagos teljes√≠tm√©ny adatok (utols√≥ ${count} m√©r√©s alapj√°n):`);
      console.table([
        {
          tabSwitchTotal: (avgData.tabSwitchTotal / count).toFixed(2),
          dbLoadTime: (avgData.dbLoadTime / count).toFixed(2),
          renderTime: (avgData.renderTime / count).toFixed(2),
          scrollRestoreTime: (avgData.scrollRestoreTime / count).toFixed(2),
          timestamp: now,
        },
      ]);
    }
    console.groupEnd();
  }, []);

  // Markerek √©s m√©r√©sek tiszt√≠t√°sa
  const clearMarkers = useCallback((phase: PerformancePhase) => {
    if (!isSupported.current) return;

    performance.clearMarks(`${PREFIX}${phase}-start`);
    performance.clearMarks(`${PREFIX}${phase}-end`);
    performance.clearMeasures(`${PREFIX}${phase}`);
  }, []);

  // √Åltal√°nos teljes√≠tm√©nym√©r√©s
  const measurePhase = useCallback(
    (phase: PerformancePhase, workFn: () => void) => {
      if (!isSupported.current) {
        workFn();
        return;
      }

      // Kezd≈ë marker
      performance.mark(`${PREFIX}${phase}-start`);

      // V√©grehajtand√≥ munka
      workFn();

      // Befejez≈ë marker
      performance.mark(`${PREFIX}${phase}-end`);

      // M√©r√©s
      performance.measure(`${PREFIX}${phase}`, `${PREFIX}${phase}-start`, `${PREFIX}${phase}-end`);

      // Eredm√©ny kinyer√©se
      const measure = performance.getEntriesByName(`${PREFIX}${phase}`).pop();
      if (measure) {
        switch (phase) {
          case 'dbLoad':
            performanceData.current.dbLoadTime = measure.duration;
            break;
          case 'render':
            performanceData.current.renderTime = measure.duration;
            break;
          case 'scrollRestore':
            performanceData.current.scrollRestoreTime = measure.duration;
            break;
          case 'tabSwitch':
            performanceData.current.tabSwitchTotal = measure.duration;

            // Az eredm√©nyek t√°rol√°sa a t√∂rt√©neti adatokban (k√∂rk√∂r√∂s buffer)
            performanceData.current.timestamp = new Date().toISOString();
            performanceHistory.current[historyIndex.current] = { ...performanceData.current };
            historyIndex.current = (historyIndex.current + 1) % historySize;

            // Eredm√©nyek ki√≠r√°sa a konzolba
            logPerformanceData();

            // K√∂vetkez≈ë m√©r√©shez be√°ll√≠tjuk, hogy m√°r nem els≈ë renderel√©s
            performanceData.current.initialRender = false;
            break;
        }
      }

      // Markerek √©s m√©r√©sek tiszt√≠t√°sa
      clearMarkers(phase);

      // Er≈ëforr√°s-id≈ëvonalak tiszt√≠t√°sa is
      if (phase === 'tabSwitch') {
        performance.clearResourceTimings();
      }
    },
    [clearMarkers, logPerformanceData],
  );

  // Teljes√≠tm√©nym√©r√©s kezd√©se tabv√°lt√°skor
  const startTabSwitchMeasurement = useCallback(() => {
    if (!isSupported.current) return;
    performance.mark(`${PREFIX}tabSwitch-start`);
  }, []);

  // Teljes√≠tm√©nym√©r√©s befejez√©se √©s eredm√©nyek √∂sszegz√©se
  const endTabSwitchMeasurement = useCallback(() => {
    if (!isSupported.current) return;

    try {
      // Ellen≈ërizz√ºk, hogy l√©tezik-e a kezd≈ëpont
      const startMarkers = performance.getEntriesByName(`${PREFIX}tabSwitch-start`, 'mark');
      if (startMarkers.length === 0) {
        console.warn('A tabSwitch kezd≈ëpont nem tal√°lhat√≥, m√©r√©s kihagyva');
        return;
      }

      performance.mark(`${PREFIX}tabSwitch-end`);

      // M√©r√©s v√©grehajt√°sa
      performance.measure(
        `${PREFIX}tabSwitch`,
        `${PREFIX}tabSwitch-start`,
        `${PREFIX}tabSwitch-end`,
      );

      const tabSwitchMeasure = performance.getEntriesByName(`${PREFIX}tabSwitch`).pop();
      if (tabSwitchMeasure) {
        performanceData.current.tabSwitchTotal = tabSwitchMeasure.duration;

        // Az eredm√©nyek t√°rol√°sa a t√∂rt√©neti adatokban (k√∂rk√∂r√∂s buffer)
        performanceData.current.timestamp = new Date().toISOString();
        performanceHistory.current[historyIndex.current] = { ...performanceData.current };
        historyIndex.current = (historyIndex.current + 1) % historySize;

        // Eredm√©nyek ki√≠r√°sa a konzolba
        logPerformanceData();

        // K√∂vetkez≈ë m√©r√©shez be√°ll√≠tjuk, hogy m√°r nem els≈ë renderel√©s
        performanceData.current.initialRender = false;
      }
    } catch (error) {
      console.error('Hiba a teljes√≠tm√©nym√©r√©s sor√°n:', error);
    } finally {
      // Mindenk√©pp takar√≠tsunk
      clearMarkers('tabSwitch');
      performance.clearResourceTimings();
    }
  }, [clearMarkers, logPerformanceData]);

  // Async scroll helyre√°ll√≠t√°s m√©r√©se
  const measureScrollRestoration = useCallback(
    (scrollFn: () => void) => {
      if (!isSupported.current) {
        scrollFn();
        return;
      }

      // Kezd≈ë marker
      performance.mark(`${PREFIX}scrollRestore-start`);

      // V√©grehajtand√≥ g√∂rget√©s
      scrollFn();

      // A t√©nyleges frame renderel√©s m√©r√©se requestAnimationFrame seg√≠ts√©g√©vel
      requestAnimationFrame(() => {
        // A m√°sodik rAF biztos√≠tja, hogy a DOM friss√≠t√©se megt√∂rt√©nt
        requestAnimationFrame(() => {
          try {
            // Ellen≈ërizz√ºk, hogy a kezd≈ë marker l√©tezik-e m√©g
            const startMarkers = performance.getEntriesByName(
              `${PREFIX}scrollRestore-start`,
              'mark',
            );
            if (startMarkers.length === 0) {
              console.warn('A scrollRestore kezd≈ëpont nem tal√°lhat√≥, m√©r√©s kihagyva');
              return;
            }

            performance.mark(`${PREFIX}scrollRestore-end`);

            // M√©r√©s v√©grehajt√°sa
            performance.measure(
              `${PREFIX}scrollRestore`,
              `${PREFIX}scrollRestore-start`,
              `${PREFIX}scrollRestore-end`,
            );

            const scrollRestoreMeasure = performance
              .getEntriesByName(`${PREFIX}scrollRestore`)
              .pop();
            if (scrollRestoreMeasure) {
              performanceData.current.scrollRestoreTime = scrollRestoreMeasure.duration;
            }
          } catch (error) {
            console.error('Hiba a g√∂rget√©s teljes√≠tm√©nym√©r√©se sor√°n:', error);
          } finally {
            // Mindenk√©pp takar√≠tsunk
            clearMarkers('scrollRestore');
          }
        });
      });
    },
    [clearMarkers],
  );

  // Browser Performance API el√©rhet≈ës√©g√©nek ellen≈ërz√©se
  useEffect(() => {
    if (!isSupported.current) {
      console.warn(
        '‚ö†Ô∏è A Performance API nem el√©rhet≈ë a b√∂ng√©sz≈ëben! A teljes√≠tm√©nym√©r√©s nem fog m≈±k√∂dni.',
      );
    }
  }, []);

  return {
    measurePhase, // Egyes√≠tett m√©r√©si f√ºggv√©ny
    measureScrollRestoration, // Speci√°lis f√ºggv√©ny a g√∂rget√©s m√©r√©s√©hez
    startTabSwitchMeasurement, // Tab v√°lt√°s m√©r√©s kezdete
    endTabSwitchMeasurement, // Tab v√°lt√°s m√©r√©s v√©ge
    performanceData: performanceData.current,
    performanceHistory: performanceHistory.current.filter(
      (data) => data !== null && data.tabSwitchTotal > 0,
    ),
    isSupported: isSupported.current,
  };
}
