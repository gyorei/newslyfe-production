// --- useFrontendSearch.ts ---
// Ez a hook kiz√°r√≥lag a TABBAN l√©v≈ë h√≠rek k√∂z√∂tt keres (frontend sz≈±r√©s),
// nem ind√≠t √∫j API keres√©st, nem szinkroniz√°l a glob√°lis (Home) keres√©ssel.
// A keres√©s gyors, csak a kapott newsItems t√∂mbben sz≈±r, relevancia pontoz√°ssal.
// A NavigationBar keres≈ëje ezt haszn√°lja: csak vizu√°lis sz≈±r√©s, nem v√°ltoztatja a f≈ë keres√©si √°llapotot.

import { useState, useCallback } from 'react';
import { NewsItem } from '../../../../types';
import {
  normalizeText,
  prepareSearchTerms,
  detectTextLanguage,
  TextLanguage,
} from '../utils/textSearchUtils';
// ‚úÖ JAV√çTOTT IMPORTOK: validateSearchConfig elt√°vol√≠tva (nem haszn√°lt)
import { SearchConfig, DEFAULT_STRICT_CONFIG, mergeSearchConfig } from '../config/searchConfig';

// üéØ KERES√âSI EREDM√âNY T√çPUS
interface FrontendSearchResult extends NewsItem {
  relevance_score: number;
  content: string;
  created_at: string;
  language: string;
}

// üîç KERES√âSI HOOK INTERFACE - KONFIGUR√ÅLHAT√ì
interface UseFrontendSearchReturn {
  searchResults: FrontendSearchResult[];
  isSearching: boolean;
  performSearch: (query: string, newsItems: NewsItem[]) => FrontendSearchResult[];
  clearSearch: () => void;
  currentConfig: SearchConfig;
}

/**
 * Frontend keres√©si hook - KONFIGUR√ÅLHAT√ì RENDSZER v3.0
 *
 * El≈ëny√∂k:
 * - ‚ö° Szupergyors (5-50ms) - OPTIMALIZ√ÅLT
 * - üîß RUGALMASAN KONFIGUR√ÅLHAT√ì (Strict/Relaxed/Egy√©ni)
 * - üéØ SMART MODE: Konfigur√°ci√≥ alap√°n v√°laszt keres√©si strat√©gi√°t
 * - üåç T√ñBBNYELV≈∞ KERES√âS (Magyar, Orosz, Ukr√°n, stb.)
 * - üöÄ TELJES√çTM√âNY OPTIMALIZ√ÅLT (reduce alap√∫)
 * - üìä R√âSZLETES ANALYTICS √©s LOGGING
 */
export const useFrontendSearch = (
  customConfig?: Partial<SearchConfig>,
): UseFrontendSearchReturn => {
  // üîß KONFIGUR√ÅCI√ì √ñSSZE√ÅLL√çT√ÅSA
  const config = customConfig
    ? mergeSearchConfig(DEFAULT_STRICT_CONFIG, customConfig)
    : DEFAULT_STRICT_CONFIG;

  const [searchResults, setSearchResults] = useState<FrontendSearchResult[]>([]);
  const [isSearching, setIsSearching] = useState(false);

  // ‚úÖ HELPER FUNKCI√ì: STRICT MODE pontoz√°s - Cognitive Complexity cs√∂kkent√©se
  const calculateStrictScore = useCallback(
    (
      searchTerms: string[],
      titleNormalized: string,
      descriptionNormalized: string,
      sourceNormalized: string,
      config: SearchConfig,
      logPrefix: string,
      item: NewsItem,
    ): { score: number; hasMatch: boolean } => {
      let relevanceScore = 0;

      const allTermsFoundInTitle = searchTerms.every((term) => titleNormalized.includes(term));
      const allTermsFoundInDescription = searchTerms.every((term) =>
        descriptionNormalized.includes(term),
      );
      const allTermsFoundInSource = searchTerms.every((term) => sourceNormalized.includes(term));

      const hasMatch = allTermsFoundInTitle || allTermsFoundInDescription || allTermsFoundInSource;

      if (allTermsFoundInTitle) {
        relevanceScore += config.scoreWeights.title * searchTerms.length;

        // Pontos egyez√©s bonus
        const fullQuery = searchTerms.join(' ');
        if (titleNormalized.startsWith(fullQuery)) {
          relevanceScore += config.bonuses.exactStart;
          if (config.enableDebugLogging) {
            console.log(`${logPrefix} PONTOS EGYEZ√âS BONUS: "${item.title}"`);
          }
        }

        // K√∂zels√©gi bonus
        relevanceScore += calculateProximityBonus(titleNormalized, searchTerms, config, logPrefix);
      }

      if (allTermsFoundInDescription) {
        relevanceScore += config.scoreWeights.description * searchTerms.length;
      }

      if (allTermsFoundInSource) {
        relevanceScore += config.scoreWeights.source * searchTerms.length;
      }

      return { score: relevanceScore, hasMatch };
    },
    [],
  );

  // ‚úÖ HELPER FUNKCI√ì: K√∂zels√©gi bonus sz√°m√≠t√°s
  const calculateProximityBonus = useCallback(
    (text: string, searchTerms: string[], config: SearchConfig, logPrefix: string): number => {
      const words = text.split(/\s+/).filter(Boolean);
      const queryWords = searchTerms;

      for (let i = 0; i <= words.length - queryWords.length; i++) {
        const slice = words.slice(i, i + queryWords.length);
        if (queryWords.every((word, idx) => slice[idx] === word)) {
          if (config.enableDebugLogging) {
            console.log(`${logPrefix} K√ñZELS√âGI BONUS: "${queryWords.join(' ')}" egym√°s mellett`);
          }
          return config.bonuses.proximity;
        }
      }
      return 0;
    },
    [],
  );

  // ‚úÖ HELPER FUNKCI√ì: RELAXED MODE pontoz√°s
  const calculateRelaxedScore = useCallback(
    (
      searchTerms: string[],
      titleNormalized: string,
      descriptionNormalized: string,
      sourceNormalized: string,
      config: SearchConfig,
    ): number => {
      let relevanceScore = 0;

      searchTerms.forEach((term) => {
        if (titleNormalized.includes(term)) {
          relevanceScore += config.scoreWeights.title;
          if (titleNormalized.startsWith(term)) {
            relevanceScore += Math.floor(config.bonuses.exactStart / 2);
          }
        }

        if (descriptionNormalized.includes(term)) {
          relevanceScore += config.scoreWeights.description;
        }

        if (sourceNormalized.includes(term)) {
          relevanceScore += config.scoreWeights.source;
        }
      });

      return relevanceScore;
    },
    [],
  );

  // ‚úÖ HELPER FUNKCI√ì: Eredm√©ny objektum l√©trehoz√°sa
  const createSearchResult = useCallback(
    (
      item: NewsItem,
      relevanceScore: number,
      detectedLanguage: TextLanguage,
    ): FrontendSearchResult => {
      return {
        ...item,
        imageUrl: item.imageUrl || (item as any).image_url || (item as any).image || undefined, // <-- Mindig legyen imageUrl, akkor is ha m√°shogy h√≠vj√°k
        content: item.description || '',
        created_at: item.date || new Date(item.timestamp).toISOString(),
        language:
          detectedLanguage === TextLanguage.CYRILLIC
            ? 'ru'
            : detectedLanguage === TextLanguage.MIXED
              ? 'mixed'
              : 'hu',
        relevance_score: relevanceScore,
      };
    },
    [],
  );

  // ‚úÖ HELPER FUNKCI√ì: Debug logging
  const logSearchResults = useCallback(
    (
      results: FrontendSearchResult[],
      newsItemsCount: number,
      searchTime: number,
      logPrefix: string,
      config: SearchConfig,
    ): void => {
      if (!config.enableDebugLogging) return;

      console.log(
        `${logPrefix} Keres√©s befejezve: ${results.length} tal√°lat ${searchTime}ms alatt`,
      );
      console.log(
        `${logPrefix} Sz≈±r√©s: ${newsItemsCount} ‚Üí ${results.length} (${((results.length / newsItemsCount) * 100).toFixed(1)}%)`,
      );

      if (results.length > 0) {
        const maxScore = Math.max(...results.map((r) => r.relevance_score));
        const avgScore = results.reduce((sum, r) => sum + r.relevance_score, 0) / results.length;
        console.log(`${logPrefix} Relevancia - Max: ${maxScore}, √Åtlag: ${avgScore.toFixed(1)}`);

        console.log(`${logPrefix} TOP 3 TAL√ÅLAT:`);
        results.slice(0, 3).forEach((result, index) => {
          console.log(`${index + 1}. [${result.relevance_score}pt] "${result.title}"`);
        });
      } else {
        console.log(`${logPrefix} ‚ùå NINCS TAL√ÅLAT - Pr√≥b√°lj m√°s keres√©si kifejez√©st`);
      }
    },
    [],
  );

  // üéØ F≈êKERES√âSI LOGIKA - EGYSZER≈∞S√çTETT √âS OPTIMALIZ√ÅLT
  const performSearch = useCallback(
    (query: string, newsItems: NewsItem[]): FrontendSearchResult[] => {
      const searchMode = config.strictMode ? 'STRICT' : 'RELAXED';
      const logPrefix = `[useFrontendSearch-${searchMode}]`;

      if (config.enableDebugLogging) {
        console.log(`${logPrefix} Keres√©s ind√≠t√°sa: "${query}" - ${newsItems.length} cikkben`);
        console.log(`${logPrefix} Konfigur√°ci√≥:`, {
          strictMode: config.strictMode,
          maxResults: config.maxResults,
          scoreWeights: config.scoreWeights,
          bonuses: config.bonuses,
        });
      }

      if (!query || query.trim().length === 0) {
        if (config.enableDebugLogging) console.log(`${logPrefix} √úres keres√©si kifejez√©s`);
        return [];
      }

      if (!newsItems || newsItems.length === 0) {
        if (config.enableDebugLogging) console.log(`${logPrefix} Nincs keres√©si adat`);
        return [];
      }

      setIsSearching(true);

      try {
        const startTime = performance.now();

        // üåç AUTOMATIKUS NYELVFELISMER√âS
        const detectedLanguage = detectTextLanguage(query);
        if (config.enableDebugLogging) {
          console.log(`${logPrefix} Felismert nyelv: ${detectedLanguage}`);
        }

        // üîç T√ñBBNYELV≈∞ KERES√âSI KIFEJEZ√âSEK EL≈êK√âSZ√çT√âSE
        const searchTerms = prepareSearchTerms(query, config.minSearchLength);

        if (config.enableDebugLogging) {
          console.log(`${logPrefix} Keres√©si kifejez√©sek:`, searchTerms);
          console.log(`${logPrefix} Keres√©si m√≥d: ${config.strictMode ? 'STRICT' : 'RELAXED'}`);
        }

        if (searchTerms.length === 0) {
          if (config.enableDebugLogging)
            console.log(`${logPrefix} Nincs √©rv√©nyes keres√©si kifejez√©s`);
          return [];
        }

        // üöÄ OPTIMALIZ√ÅLT KERES√âSI LOGIKA - CS√ñKKENTETT KOMPLEXIT√ÅS
        const results: FrontendSearchResult[] = newsItems
          .reduce<FrontendSearchResult[]>((acc, item) => {
            // Sz√∂veg normaliz√°l√°s
            const titleNormalized = normalizeText(item.title);
            const descriptionNormalized = normalizeText(item.description || '');
            const sourceNormalized = normalizeText(item.source || '');

            // Keres√©si strat√©gia v√°laszt√°sa
            let relevanceScore = 0;
            let hasMatch = false;

            if (config.strictMode) {
              const result = calculateStrictScore(
                searchTerms,
                titleNormalized,
                descriptionNormalized,
                sourceNormalized,
                config,
                logPrefix,
                item,
              );
              relevanceScore = result.score;
              hasMatch = result.hasMatch;
            } else {
              relevanceScore = calculateRelaxedScore(
                searchTerms,
                titleNormalized,
                descriptionNormalized,
                sourceNormalized,
                config,
              );
              hasMatch = relevanceScore > 0;
            }

            // üéØ EREDM√âNY HOZZ√ÅAD√ÅSA
            if (hasMatch && relevanceScore > 0) {
              acc.push(createSearchResult(item, relevanceScore, detectedLanguage));
            }

            return acc;
          }, [])
          .sort((a, b) => {
            if (b.relevance_score !== a.relevance_score) {
              return b.relevance_score - a.relevance_score;
            }
            return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();
          })
          .slice(0, config.maxResults || 100);

        const endTime = performance.now();
        const searchTime = Math.round(endTime - startTime);

        // üìä LOGGING
        logSearchResults(results, newsItems.length, searchTime, logPrefix, config);

        // --- 2. KERES√âS UT√ÅN (useFrontendSearch) ---
        console.log('--- 2. KERES√âS UT√ÅN (useFrontendSearch) ---');
        if (results && results.length > 0) {
            console.log('Az els≈ë tal√°lat itt:', results[0]);
            console.log('Az els≈ë tal√°lat imageUrl-je:', results[0].imageUrl);
        }

        // ‚ö†Ô∏è TIMEOUT ELLEN≈êRZ√âS
        if (searchTime > (config.searchTimeout || 5000)) {
          console.warn(
            `${logPrefix} LASS√ö KERES√âS: ${searchTime}ms (limit: ${config.searchTimeout}ms)`,
          );
        }

        setSearchResults(results);
        return results;
      } catch (error) {
        console.error(`[useFrontendSearch] Keres√©si hiba:`, error);
        return [];
      } finally {
        setIsSearching(false);
      }
    },
    [
      config,
      calculateStrictScore,
      calculateRelaxedScore,
      createSearchResult,
      logSearchResults,
      calculateProximityBonus,
    ],
  );

  // üßπ KERES√âS T√ñR√ñL√âSE
  const clearSearch = useCallback(() => {
    if (config.enableDebugLogging) {
      console.log('[useFrontendSearch] Keres√©s t√∂r√∂lve');
    }
    setSearchResults([]);
    setIsSearching(false);
  }, [config.enableDebugLogging]);

  return {
    searchResults,
    isSearching,
    performSearch,
    clearSearch,
    currentConfig: config,
  };
};
