/**
 * üîß KERES√âSI KONFIGUR√ÅCI√ì RENDSZER
 *
 * K√ºl√∂nb√∂z≈ë keres√©si m√≥dok √©s be√°ll√≠t√°sok egy helyen.
 * A useFrontendSearch hook rugalmasan konfigur√°lhat√≥ ezen be√°ll√≠t√°sok alapj√°n.
 *
 * Haszn√°lat:
 * ```typescript
 * const { performSearch } = useFrontendSearch(RELAXED_SEARCH_CONFIG);
 * ```
 */

// üéØ KERES√âSI KONFIGUR√ÅCI√ì T√çPUS DEFIN√çCI√ì
export interface SearchConfig {
  /** Szigor√∫ keres√©si m√≥d - minden kifejez√©snek jelen kell lennie ugyanabban a mez≈ëben */
  strictMode: boolean;

  /** Mez≈ëk s√∫lyoz√°sa a relevancia sz√°m√≠t√°sn√°l */
  scoreWeights: {
    /** C√≠m tal√°lat s√∫lya (alap√©rtelmezett: 5) */
    title: number;
    /** Le√≠r√°s tal√°lat s√∫lya (alap√©rtelmezett: 2) */
    description: number;
    /** Forr√°s tal√°lat s√∫lya (alap√©rtelmezett: 3) */
    source: number;
  };

  /** B√≥nusz pontok speci√°lis esetekre */
  bonuses: {
    /** Pontos egyez√©s bonus - ha a c√≠m a keresett kifejez√©ssel kezd≈ëdik */
    exactStart: number;
    /** K√∂zels√©gi bonus - ha a keresett szavak egym√°s mellett vannak */
    proximity: number;
  };

  /** Minimum keres√©si kifejez√©s hossz karakterben */
  minSearchLength: number;

  /** Maximum tal√°latok sz√°ma (teljes√≠tm√©ny optimaliz√°l√°s) */
  maxResults?: number;

  /** Debug logging enged√©lyez√©se */
  enableDebugLogging?: boolean;

  /** Keres√©si timeout milliszekundumban */
  searchTimeout?: number;

  /** Cache enged√©lyez√©se (j√∂v≈ëbeli funkci√≥) */
  enableCache?: boolean;
}

// üéØ ALAP√âRTELMEZETT STRICT KONFIGUR√ÅCI√ì
export const DEFAULT_STRICT_CONFIG: SearchConfig = {
  strictMode: true,
  scoreWeights: {
    title: 5, // C√≠m a legfontosabb
    description: 2, // Le√≠r√°s k√∂zepes s√∫ly
    source: 3, // Forr√°s fontos
  },
  bonuses: {
    exactStart: 10, // Nagy bonus pontos egyez√©s√©rt
    proximity: 8, // K√∂zepes bonus k√∂zels√©g√©rt
  },
  minSearchLength: 2,
  maxResults: 100,
  enableDebugLogging: true,
  searchTimeout: 5000,
  enableCache: false,
};

// üéØ LAZA KERES√âSI KONFIGUR√ÅCI√ì
export const RELAXED_SEARCH_CONFIG: SearchConfig = {
  strictMode: false,
  scoreWeights: {
    title: 2, // C√≠m kev√©sb√© domin√°ns
    description: 3, // Le√≠r√°s fontosabb
    source: 1, // Forr√°s kev√©sb√© fontos
  },
  bonuses: {
    exactStart: 5, // Kisebb bonus pontos egyez√©s√©rt
    proximity: 3, // Kisebb bonus k√∂zels√©g√©rt
  },
  minSearchLength: 1, // R√∂videbb keres√©si kifejez√©sek is megengedettek
  maxResults: 200,
  enableDebugLogging: false,
  searchTimeout: 3000,
  enableCache: true,
};

// üéØ C√çM-K√ñZPONT√ö KERES√âSI KONFIGUR√ÅCI√ì
export const TITLE_FOCUSED_CONFIG: SearchConfig = {
  strictMode: true,
  scoreWeights: {
    title: 10, // C√≠m domin√°l
    description: 0, // Le√≠r√°s nem sz√°m√≠t
    source: 1, // Forr√°s minim√°lis s√∫ly
  },
  bonuses: {
    exactStart: 15, // Extra nagy bonus pontos c√≠megyez√©s√©rt
    proximity: 10, // Nagy bonus k√∂zels√©g√©rt c√≠mben
  },
  minSearchLength: 2,
  maxResults: 50,
  enableDebugLogging: true,
  searchTimeout: 2000,
  enableCache: false,
};

// üéØ GYORS KERES√âSI KONFIGUR√ÅCI√ì (EL≈êN√âZET M√ìDHOZ)
export const QUICK_SEARCH_CONFIG: SearchConfig = {
  strictMode: false,
  scoreWeights: {
    title: 3,
    description: 1,
    source: 1,
  },
  bonuses: {
    exactStart: 3,
    proximity: 2,
  },
  minSearchLength: 1,
  maxResults: 20, // Kev√©s eredm√©ny gyors bet√∂lt√©shez
  enableDebugLogging: false,
  searchTimeout: 1000, // Gyors timeout
  enableCache: true,
};

// üéØ TELJES SZ√ñVEGES KERES√âSI KONFIGUR√ÅCI√ì
export const FULL_TEXT_CONFIG: SearchConfig = {
  strictMode: false,
  scoreWeights: {
    title: 3,
    description: 5, // Le√≠r√°s a legfontosabb
    source: 2,
  },
  bonuses: {
    exactStart: 7,
    proximity: 5,
  },
  minSearchLength: 3, // Hosszabb kifejez√©sek teljes sz√∂veges keres√©shez
  maxResults: 150,
  enableDebugLogging: true,
  searchTimeout: 4000,
  enableCache: true,
};

// üéØ KONFIGUR√ÅCI√ì VALID√ÅL√ì F√úGGV√âNY
export const validateSearchConfig = (config: Partial<SearchConfig>): boolean => {
  try {
    // Alapvet≈ë ellen≈ërz√©sek
    if (config.minSearchLength && config.minSearchLength < 1) {
      console.warn('[searchConfig] minSearchLength nem lehet 1-n√©l kisebb');
      return false;
    }

    if (config.maxResults && config.maxResults < 1) {
      console.warn('[searchConfig] maxResults nem lehet 1-n√©l kisebb');
      return false;
    }

    if (config.searchTimeout && config.searchTimeout < 100) {
      console.warn('[searchConfig] searchTimeout nem lehet 100ms-n√©l kisebb');
      return false;
    }

    // S√∫lyoz√°s ellen≈ërz√©s
    if (config.scoreWeights) {
      const { title, description, source } = config.scoreWeights;
      if (title < 0 || description < 0 || source < 0) {
        console.warn('[searchConfig] S√∫lyoz√°sok nem lehetnek negat√≠vak');
        return false;
      }
    }

    // B√≥nusz ellen≈ërz√©s
    if (config.bonuses) {
      const { exactStart, proximity } = config.bonuses;
      if (exactStart < 0 || proximity < 0) {
        console.warn('[searchConfig] B√≥nuszok nem lehetnek negat√≠vak');
        return false;
      }
    }

    return true;
  } catch (error) {
    console.error('[searchConfig] Konfigur√°ci√≥ valid√°l√°si hiba:', error);
    return false;
  }
};

// üéØ KONFIGUR√ÅCI√ì √ñSSZEF√âS√úL≈ê F√úGGV√âNY
export const mergeSearchConfig = (
  baseConfig: SearchConfig,
  customConfig: Partial<SearchConfig>,
): SearchConfig => {
  // Valid√°l√°s
  if (!validateSearchConfig(customConfig)) {
    console.warn('[searchConfig] √ârv√©nytelen konfigur√°ci√≥, alap√©rtelmezett haszn√°lata');
    return baseConfig;
  }

  return {
    ...baseConfig,
    ...customConfig,
    // Nested objektumok m√©ly √∂sszef√©s√ºl√©se
    scoreWeights: {
      ...baseConfig.scoreWeights,
      ...(customConfig.scoreWeights || {}),
    },
    bonuses: {
      ...baseConfig.bonuses,
      ...(customConfig.bonuses || {}),
    },
  };
};

// üéØ KONFIGUR√ÅCI√ì T√çPUS EXPORT (TypeScript seg√≠ts√©ghez)
export type SearchConfigKey = keyof SearchConfig;
export type ScoreWeights = SearchConfig['scoreWeights'];
export type SearchBonuses = SearchConfig['bonuses'];

// üéØ EL≈êRE DEFINI√ÅLT KONFIGUR√ÅCI√ìK GY≈∞JTEM√âNYE
export const PREDEFINED_CONFIGS = {
  STRICT: DEFAULT_STRICT_CONFIG,
  RELAXED: RELAXED_SEARCH_CONFIG,
  TITLE_FOCUSED: TITLE_FOCUSED_CONFIG,
  QUICK: QUICK_SEARCH_CONFIG,
  FULL_TEXT: FULL_TEXT_CONFIG,
} as const;

// üéØ KONFIGUR√ÅCI√ì NEVEK T√çPUSA
export type PredefinedConfigName = keyof typeof PREDEFINED_CONFIGS;

// üß™ FEJLESZT≈êI SEG√âDLET - KONFIGUR√ÅCI√ì √ñSSZEHASONL√çT√ÅS
export const compareConfigs = (config1: SearchConfig, config2: SearchConfig): void => {
  console.log('üîß Konfigur√°ci√≥ √∂sszehasonl√≠t√°s:');
  console.table({
    'Strict Mode': { Config1: config1.strictMode, Config2: config2.strictMode },
    'Title Weight': { Config1: config1.scoreWeights.title, Config2: config2.scoreWeights.title },
    'Description Weight': {
      Config1: config1.scoreWeights.description,
      Config2: config2.scoreWeights.description,
    },
    'Source Weight': { Config1: config1.scoreWeights.source, Config2: config2.scoreWeights.source },
    'Exact Start Bonus': {
      Config1: config1.bonuses.exactStart,
      Config2: config2.bonuses.exactStart,
    },
    'Proximity Bonus': { Config1: config1.bonuses.proximity, Config2: config2.bonuses.proximity },
    'Min Search Length': { Config1: config1.minSearchLength, Config2: config2.minSearchLength },
    'Max Results': { Config1: config1.maxResults, Config2: config2.maxResults },
  });
};
